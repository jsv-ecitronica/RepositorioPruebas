
Adivinanzas1a5_767zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d6c  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006014  08006014  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800601c  0800601c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08006094  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08006094  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa71  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e6  00000000  00000000  0002ab0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d73  00000000  00000000  0002d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a517  00000000  00000000  00054e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f30ec  00000000  00000000  0005f36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152456  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000281c  00000000  00000000  001524a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005290 	.word	0x08005290

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005290 	.word	0x08005290

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ImprimirMensajeGanador>:
#include <stdio.h>

/**
 *
 */
void ImprimirMensajeGanador(char* nombre) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]


    printf("\r\n");
 80005ec:	482d      	ldr	r0, [pc, #180]	; (80006a4 <ImprimirMensajeGanador+0xc0>)
 80005ee:	f002 ffb7 	bl	8003560 <puts>
    printf("\r\n                          oooo$$$$$$$$$$$$oooo");
 80005f2:	482d      	ldr	r0, [pc, #180]	; (80006a8 <ImprimirMensajeGanador+0xc4>)
 80005f4:	f002 ff2e 	bl	8003454 <iprintf>
    printf("\r\n                      oo$$$$$$$$$$$$$$$$$$$$$$$$o");
 80005f8:	482c      	ldr	r0, [pc, #176]	; (80006ac <ImprimirMensajeGanador+0xc8>)
 80005fa:	f002 ff2b 	bl	8003454 <iprintf>
    printf("\r\n                   oo$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o         o$   $$ o$");
 80005fe:	482c      	ldr	r0, [pc, #176]	; (80006b0 <ImprimirMensajeGanador+0xcc>)
 8000600:	f002 ff28 	bl	8003454 <iprintf>
    printf("\r\n   o $ oo        o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o       $$ $$ $$o$");
 8000604:	482b      	ldr	r0, [pc, #172]	; (80006b4 <ImprimirMensajeGanador+0xd0>)
 8000606:	f002 ff25 	bl	8003454 <iprintf>
    printf("\r\noo $ $ ~$      o$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$o       $$$o$$o$");
 800060a:	482b      	ldr	r0, [pc, #172]	; (80006b8 <ImprimirMensajeGanador+0xd4>)
 800060c:	f002 ff22 	bl	8003454 <iprintf>
    printf("\r\n~$$$$$$o$     o$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$o    $$$$$$$$");
 8000610:	482a      	ldr	r0, [pc, #168]	; (80006bc <ImprimirMensajeGanador+0xd8>)
 8000612:	f002 ff1f 	bl	8003454 <iprintf>
    printf("\r\n  $$$$$$$    $$$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$");
 8000616:	482a      	ldr	r0, [pc, #168]	; (80006c0 <ImprimirMensajeGanador+0xdc>)
 8000618:	f002 ff1c 	bl	8003454 <iprintf>
    printf("\r\n  $$$$$$$$$$$$$$$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$$$$$$  ~~~$$$");
 800061c:	4829      	ldr	r0, [pc, #164]	; (80006c4 <ImprimirMensajeGanador+0xe0>)
 800061e:	f002 ff19 	bl	8003454 <iprintf>
    printf("\r\n   ~$$$~~~$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     ~$$$");
 8000622:	4829      	ldr	r0, [pc, #164]	; (80006c8 <ImprimirMensajeGanador+0xe4>)
 8000624:	f002 ff16 	bl	8003454 <iprintf>
    printf("\r\n    $$$   o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     ~$$$o");
 8000628:	4828      	ldr	r0, [pc, #160]	; (80006cc <ImprimirMensajeGanador+0xe8>)
 800062a:	f002 ff13 	bl	8003454 <iprintf>
    printf("\r\n   o$$~   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$       $$$o");
 800062e:	4828      	ldr	r0, [pc, #160]	; (80006d0 <ImprimirMensajeGanador+0xec>)
 8000630:	f002 ff10 	bl	8003454 <iprintf>
    printf("\r\n   $$$    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" "$$$$$$ooooo$$$$o");
 8000634:	4827      	ldr	r0, [pc, #156]	; (80006d4 <ImprimirMensajeGanador+0xf0>)
 8000636:	f002 ff0d 	bl	8003454 <iprintf>
    printf("\r\n  o$$$oooo$$$$$  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$   o$$$$$$$$$$$$$$$$$");
 800063a:	4827      	ldr	r0, [pc, #156]	; (80006d8 <ImprimirMensajeGanador+0xf4>)
 800063c:	f002 ff0a 	bl	8003454 <iprintf>
    printf("\r\n  $$$$$$$$~$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     $$$$~~~~~~~~");
 8000640:	4826      	ldr	r0, [pc, #152]	; (80006dc <ImprimirMensajeGanador+0xf8>)
 8000642:	f002 ff07 	bl	8003454 <iprintf>
    printf("\r\n ~~~~       $$$$    ~$$$$$$$$$$$$$$$$$$$$$$$$$$$$~      o$$$");
 8000646:	4826      	ldr	r0, [pc, #152]	; (80006e0 <ImprimirMensajeGanador+0xfc>)
 8000648:	f002 ff04 	bl	8003454 <iprintf>
    printf("\r\n            ~$$$o     ~~~$$$$$$$$$$$$$$$$$$~$$~         $$$");
 800064c:	4825      	ldr	r0, [pc, #148]	; (80006e4 <ImprimirMensajeGanador+0x100>)
 800064e:	f002 ff01 	bl	8003454 <iprintf>
    printf("\r\n              $$$o          ~$$~~$$$$$$~~~~           o$$$");
 8000652:	4825      	ldr	r0, [pc, #148]	; (80006e8 <ImprimirMensajeGanador+0x104>)
 8000654:	f002 fefe 	bl	8003454 <iprintf>
    printf("\r\n               $$$$o                                o$$$~");
 8000658:	4824      	ldr	r0, [pc, #144]	; (80006ec <ImprimirMensajeGanador+0x108>)
 800065a:	f002 fefb 	bl	8003454 <iprintf>
    printf("\r\n                ~$$$$o      o$$$$$$o~$$$$o        o$$$$");
 800065e:	4824      	ldr	r0, [pc, #144]	; (80006f0 <ImprimirMensajeGanador+0x10c>)
 8000660:	f002 fef8 	bl	8003454 <iprintf>
    printf("\r\n                  ~$$$$$oo     ~~$$$$o$$$$$o   o$$$$~~");
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <ImprimirMensajeGanador+0x110>)
 8000666:	f002 fef5 	bl	8003454 <iprintf>
    printf("\r\n                     ~~$$$$$oooo  ~$$$o$$$$$$$$$~~~");
 800066a:	4823      	ldr	r0, [pc, #140]	; (80006f8 <ImprimirMensajeGanador+0x114>)
 800066c:	f002 fef2 	bl	8003454 <iprintf>
    printf("\r\n                        ~~$$$$$$$oo $$$$$$$$$$");
 8000670:	4822      	ldr	r0, [pc, #136]	; (80006fc <ImprimirMensajeGanador+0x118>)
 8000672:	f002 feef 	bl	8003454 <iprintf>
    printf("\r\n                                ~~~~$$$$$$$$$$$");
 8000676:	4822      	ldr	r0, [pc, #136]	; (8000700 <ImprimirMensajeGanador+0x11c>)
 8000678:	f002 feec 	bl	8003454 <iprintf>
    printf("\r\n                                    $$$$$$$$$$$$");
 800067c:	4821      	ldr	r0, [pc, #132]	; (8000704 <ImprimirMensajeGanador+0x120>)
 800067e:	f002 fee9 	bl	8003454 <iprintf>
    printf("\r\n                                     $$$$$$$$$$~");
 8000682:	4821      	ldr	r0, [pc, #132]	; (8000708 <ImprimirMensajeGanador+0x124>)
 8000684:	f002 fee6 	bl	8003454 <iprintf>
    printf("\r\n                                      ~$$$~~  ");
 8000688:	4820      	ldr	r0, [pc, #128]	; (800070c <ImprimirMensajeGanador+0x128>)
 800068a:	f002 fee3 	bl	8003454 <iprintf>
    printf("\r\n");
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <ImprimirMensajeGanador+0xc0>)
 8000690:	f002 ff66 	bl	8003560 <puts>
    printf("\r\n               ¡¡¡ Felicidades %s, adivinaste el numero !!!", nombre);
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <ImprimirMensajeGanador+0x12c>)
 8000698:	f002 fedc 	bl	8003454 <iprintf>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	080052a8 	.word	0x080052a8
 80006a8:	080052ac 	.word	0x080052ac
 80006ac:	080052e0 	.word	0x080052e0
 80006b0:	08005314 	.word	0x08005314
 80006b4:	08005360 	.word	0x08005360
 80006b8:	080053ac 	.word	0x080053ac
 80006bc:	080053f8 	.word	0x080053f8
 80006c0:	08005444 	.word	0x08005444
 80006c4:	08005490 	.word	0x08005490
 80006c8:	080054d8 	.word	0x080054d8
 80006cc:	08005520 	.word	0x08005520
 80006d0:	0800556c 	.word	0x0800556c
 80006d4:	080055b8 	.word	0x080055b8
 80006d8:	08005604 	.word	0x08005604
 80006dc:	08005654 	.word	0x08005654
 80006e0:	0800569c 	.word	0x0800569c
 80006e4:	080056dc 	.word	0x080056dc
 80006e8:	0800571c 	.word	0x0800571c
 80006ec:	0800575c 	.word	0x0800575c
 80006f0:	08005798 	.word	0x08005798
 80006f4:	080057d4 	.word	0x080057d4
 80006f8:	08005810 	.word	0x08005810
 80006fc:	08005848 	.word	0x08005848
 8000700:	0800587c 	.word	0x0800587c
 8000704:	080058b0 	.word	0x080058b0
 8000708:	080058e4 	.word	0x080058e4
 800070c:	08005918 	.word	0x08005918
 8000710:	0800594c 	.word	0x0800594c

08000714 <ImprimirMensajeNoGanador>:

/**
 *
 */
void ImprimirMensajeNoGanador(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    printf("\r\n");
 8000718:	4817      	ldr	r0, [pc, #92]	; (8000778 <ImprimirMensajeNoGanador+0x64>)
 800071a:	f002 ff21 	bl	8003560 <puts>
    printf("\r\n       ###########");
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <ImprimirMensajeNoGanador+0x68>)
 8000720:	f002 fe98 	bl	8003454 <iprintf>
    printf("\r\n      ##         ##");
 8000724:	4816      	ldr	r0, [pc, #88]	; (8000780 <ImprimirMensajeNoGanador+0x6c>)
 8000726:	f002 fe95 	bl	8003454 <iprintf>
    printf("\r\n      #  ~~   ~~  #");
 800072a:	4816      	ldr	r0, [pc, #88]	; (8000784 <ImprimirMensajeNoGanador+0x70>)
 800072c:	f002 fe92 	bl	8003454 <iprintf>
    printf("\r\n      # (*)   (*) #");
 8000730:	4815      	ldr	r0, [pc, #84]	; (8000788 <ImprimirMensajeNoGanador+0x74>)
 8000732:	f002 fe8f 	bl	8003454 <iprintf>
    printf("\r\n      (     ^  '  )");
 8000736:	4815      	ldr	r0, [pc, #84]	; (800078c <ImprimirMensajeNoGanador+0x78>)
 8000738:	f002 fe8c 	bl	8003454 <iprintf>
    printf("\r\n       |         |");
 800073c:	4814      	ldr	r0, [pc, #80]	; (8000790 <ImprimirMensajeNoGanador+0x7c>)
 800073e:	f002 fe89 	bl	8003454 <iprintf>
    printf("\r\n       |  <===>  |");
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <ImprimirMensajeNoGanador+0x80>)
 8000744:	f002 fe86 	bl	8003454 <iprintf>
    printf("\r\n        \\       /");
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <ImprimirMensajeNoGanador+0x84>)
 800074a:	f002 fe83 	bl	8003454 <iprintf>
    printf("\r\n       /  -----  \\");
 800074e:	4813      	ldr	r0, [pc, #76]	; (800079c <ImprimirMensajeNoGanador+0x88>)
 8000750:	f002 fe80 	bl	8003454 <iprintf>
    printf("\r\n    ---    \\X/    ---");
 8000754:	4812      	ldr	r0, [pc, #72]	; (80007a0 <ImprimirMensajeNoGanador+0x8c>)
 8000756:	f002 fe7d 	bl	8003454 <iprintf>
    printf("\r\n   /       |x|       \\");
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <ImprimirMensajeNoGanador+0x90>)
 800075c:	f002 fe7a 	bl	8003454 <iprintf>
    printf("\r\n  |        |x|        |");
 8000760:	4811      	ldr	r0, [pc, #68]	; (80007a8 <ImprimirMensajeNoGanador+0x94>)
 8000762:	f002 fe77 	bl	8003454 <iprintf>
    printf("\r\n");
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <ImprimirMensajeNoGanador+0x64>)
 8000768:	f002 fefa 	bl	8003560 <puts>
    printf("\r\n  Lo siento, esta vez no hubo suerte !!!");
 800076c:	480f      	ldr	r0, [pc, #60]	; (80007ac <ImprimirMensajeNoGanador+0x98>)
 800076e:	f002 fe71 	bl	8003454 <iprintf>

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	080052a8 	.word	0x080052a8
 800077c:	08005990 	.word	0x08005990
 8000780:	080059a8 	.word	0x080059a8
 8000784:	080059c0 	.word	0x080059c0
 8000788:	080059d8 	.word	0x080059d8
 800078c:	080059f0 	.word	0x080059f0
 8000790:	08005a08 	.word	0x08005a08
 8000794:	08005a20 	.word	0x08005a20
 8000798:	08005a38 	.word	0x08005a38
 800079c:	08005a4c 	.word	0x08005a4c
 80007a0:	08005a64 	.word	0x08005a64
 80007a4:	08005a7c 	.word	0x08005a7c
 80007a8:	08005a98 	.word	0x08005a98
 80007ac:	08005ab4 	.word	0x08005ab4

080007b0 <ImprimirError>:

void ImprimirError (void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    printf("\r\n");
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <ImprimirError+0x34>)
 80007b6:	f002 fed3 	bl	8003560 <puts>
    printf("\r\n  _____    _____    _____    _____   _____ ");
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <ImprimirError+0x38>)
 80007bc:	f002 fe4a 	bl	8003454 <iprintf>
    printf("\r\n |  ___|  |  _  \\  |  _  \\  /     \\ |  _  \\");
 80007c0:	480a      	ldr	r0, [pc, #40]	; (80007ec <ImprimirError+0x3c>)
 80007c2:	f002 fe47 	bl	8003454 <iprintf>
    printf("\r\n |  ___|  |     /  |     / |   |  | |     /");
 80007c6:	480a      	ldr	r0, [pc, #40]	; (80007f0 <ImprimirError+0x40>)
 80007c8:	f002 fe44 	bl	8003454 <iprintf>
    printf("\r\n |_____|  |__|__\\  |__|__\\  \\____/  |__|__\\");
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <ImprimirError+0x44>)
 80007ce:	f002 fe41 	bl	8003454 <iprintf>
    printf("\r\n");
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <ImprimirError+0x34>)
 80007d4:	f002 fec4 	bl	8003560 <puts>
    printf("\r\nDato ingresado invalido !!!");
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <ImprimirError+0x48>)
 80007da:	f002 fe3b 	bl	8003454 <iprintf>

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	080052a8 	.word	0x080052a8
 80007e8:	08005ae0 	.word	0x08005ae0
 80007ec:	08005b10 	.word	0x08005b10
 80007f0:	08005b40 	.word	0x08005b40
 80007f4:	08005b70 	.word	0x08005b70
 80007f8:	08005ba0 	.word	0x08005ba0

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fc3e 	bl	8001082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f8c1 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f94b 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800080e:	f000 f919 	bl	8000a44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000812:	484a      	ldr	r0, [pc, #296]	; (800093c <main+0x140>)
 8000814:	f000 fa50 	bl	8000cb8 <RetargetInit>

  printf("\x1b[2J"); //Clear the screen
 8000818:	4849      	ldr	r0, [pc, #292]	; (8000940 <main+0x144>)
 800081a:	f002 fe1b 	bl	8003454 <iprintf>
  printf("\n\r***************************************************************");
 800081e:	4849      	ldr	r0, [pc, #292]	; (8000944 <main+0x148>)
 8000820:	f002 fe18 	bl	8003454 <iprintf>
  printf("\n\r* Universidad Escuela Colombiana de Ingenieria Julio Garavito *");
 8000824:	4848      	ldr	r0, [pc, #288]	; (8000948 <main+0x14c>)
 8000826:	f002 fe15 	bl	8003454 <iprintf>
  printf("\n\r* DMIC - Jose De La Hoz - 2022                                *");
 800082a:	4848      	ldr	r0, [pc, #288]	; (800094c <main+0x150>)
 800082c:	f002 fe12 	bl	8003454 <iprintf>
  printf("\n\r* Juego 'JUGUEMOS A LAS ADIVINANZAS'                          *");
 8000830:	4847      	ldr	r0, [pc, #284]	; (8000950 <main+0x154>)
 8000832:	f002 fe0f 	bl	8003454 <iprintf>
  printf("\n\r* Desarrollado para una tarjeta NUCLE0-F767ZI                 *");
 8000836:	4847      	ldr	r0, [pc, #284]	; (8000954 <main+0x158>)
 8000838:	f002 fe0c 	bl	8003454 <iprintf>
  printf("\n\r***************************************************************");
 800083c:	4841      	ldr	r0, [pc, #260]	; (8000944 <main+0x148>)
 800083e:	f002 fe09 	bl	8003454 <iprintf>
  printf("\r\n");
 8000842:	4845      	ldr	r0, [pc, #276]	; (8000958 <main+0x15c>)
 8000844:	f002 fe8c 	bl	8003560 <puts>
  printf("\n\rPara una mejor experiencia, habilite la opcion de eco local en su terminal");
 8000848:	4844      	ldr	r0, [pc, #272]	; (800095c <main+0x160>)
 800084a:	f002 fe03 	bl	8003454 <iprintf>
  printf("\r\n");
 800084e:	4842      	ldr	r0, [pc, #264]	; (8000958 <main+0x15c>)
 8000850:	f002 fe86 	bl	8003560 <puts>
  printf("\r\nIngrese su nombre: ");
 8000854:	4842      	ldr	r0, [pc, #264]	; (8000960 <main+0x164>)
 8000856:	f002 fdfd 	bl	8003454 <iprintf>
  scanf("%s", nombre);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	4840      	ldr	r0, [pc, #256]	; (8000964 <main+0x168>)
 8000862:	f002 fe85 	bl	8003570 <iscanf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      printf("\n\r");
 8000866:	4840      	ldr	r0, [pc, #256]	; (8000968 <main+0x16c>)
 8000868:	f002 fdf4 	bl	8003454 <iprintf>
      printf("\n\r***************************************************************");
 800086c:	4835      	ldr	r0, [pc, #212]	; (8000944 <main+0x148>)
 800086e:	f002 fdf1 	bl	8003454 <iprintf>
      printf("\r\n* %s, Juguemos a las ADIVINANZAS !!", nombre);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	483c      	ldr	r0, [pc, #240]	; (800096c <main+0x170>)
 800087a:	f002 fdeb 	bl	8003454 <iprintf>
      printf("\n\r***************************************************************");
 800087e:	4831      	ldr	r0, [pc, #196]	; (8000944 <main+0x148>)
 8000880:	f002 fde8 	bl	8003454 <iprintf>
      printf("\r\n");
 8000884:	4834      	ldr	r0, [pc, #208]	; (8000958 <main+0x15c>)
 8000886:	f002 fe6b 	bl	8003560 <puts>
      printf("\r\nIngrese un numero entre 1 y 5, presione enter: ");
 800088a:	4839      	ldr	r0, [pc, #228]	; (8000970 <main+0x174>)
 800088c:	f002 fde2 	bl	8003454 <iprintf>
      scanf("%s", buf);
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4833      	ldr	r0, [pc, #204]	; (8000964 <main+0x168>)
 8000896:	f002 fe6b 	bl	8003570 <iscanf>
      int numUsuario = atoi(buf);
 800089a:	463b      	mov	r3, r7
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fda2 	bl	80033e6 <atoi>
 80008a2:	62f8      	str	r0, [r7, #44]	; 0x2c

      if (numUsuario < 1 || numUsuario > 5) {
 80008a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	dd02      	ble.n	80008b0 <main+0xb4>
 80008aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ac:	2b05      	cmp	r3, #5
 80008ae:	dd07      	ble.n	80008c0 <main+0xc4>
          ImprimirError();
 80008b0:	f7ff ff7e 	bl	80007b0 <ImprimirError>
          HAL_GPIO_WritePin(LedGanador_GPIO_Port, LedGanador_Pin, GPIO_PIN_RESET); //Poner a 0 Led Ganador
 80008b4:	2200      	movs	r2, #0
 80008b6:	2101      	movs	r1, #1
 80008b8:	482e      	ldr	r0, [pc, #184]	; (8000974 <main+0x178>)
 80008ba:	f000 fed1 	bl	8001660 <HAL_GPIO_WritePin>
 80008be:	e03b      	b.n	8000938 <main+0x13c>
      } else {
          //uint32_t numSistema = (g_lfsrValue % 5) + 1;
          uint32_t ticks = HAL_GetTick();
 80008c0:	f000 fc30 	bl	8001124 <HAL_GetTick>
 80008c4:	62b8      	str	r0, [r7, #40]	; 0x28
          uint32_t numSistema = (ticks % 5) + 1;
 80008c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <main+0x17c>)
 80008ca:	fba3 2301 	umull	r2, r3, r3, r1
 80008ce:	089a      	lsrs	r2, r3, #2
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	1aca      	subs	r2, r1, r3
 80008d8:	1c53      	adds	r3, r2, #1
 80008da:	627b      	str	r3, [r7, #36]	; 0x24

          printf("\r\n");
 80008dc:	481e      	ldr	r0, [pc, #120]	; (8000958 <main+0x15c>)
 80008de:	f002 fe3f 	bl	8003560 <puts>
          printf("\r\nNumero de ticks: %u", (unsigned int)ticks);
 80008e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80008e4:	4825      	ldr	r0, [pc, #148]	; (800097c <main+0x180>)
 80008e6:	f002 fdb5 	bl	8003454 <iprintf>
          printf("\r\nNumero de usuario: %d", numUsuario);
 80008ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008ec:	4824      	ldr	r0, [pc, #144]	; (8000980 <main+0x184>)
 80008ee:	f002 fdb1 	bl	8003454 <iprintf>
          printf("\r\nNumero de sistema: %u", (unsigned int)numSistema);
 80008f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008f4:	4823      	ldr	r0, [pc, #140]	; (8000984 <main+0x188>)
 80008f6:	f002 fdad 	bl	8003454 <iprintf>
          printf("\r\n");
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <main+0x15c>)
 80008fc:	f002 fe30 	bl	8003560 <puts>
          //
          if (numUsuario == numSistema) {
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000904:	429a      	cmp	r2, r3
 8000906:	d110      	bne.n	800092a <main+0x12e>
              ImprimirMensajeGanador(nombre);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe69 	bl	80005e4 <ImprimirMensajeGanador>
              int sm = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
              printf("%c ",sm);
 8000916:	6a39      	ldr	r1, [r7, #32]
 8000918:	481b      	ldr	r0, [pc, #108]	; (8000988 <main+0x18c>)
 800091a:	f002 fd9b 	bl	8003454 <iprintf>
              HAL_GPIO_WritePin(LedGanador_GPIO_Port, LedGanador_Pin, GPIO_PIN_SET); //Poner a 1 Led Ganador
 800091e:	2201      	movs	r2, #1
 8000920:	2101      	movs	r1, #1
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <main+0x178>)
 8000924:	f000 fe9c 	bl	8001660 <HAL_GPIO_WritePin>
 8000928:	e79d      	b.n	8000866 <main+0x6a>
          } else {
              ImprimirMensajeNoGanador();
 800092a:	f7ff fef3 	bl	8000714 <ImprimirMensajeNoGanador>
              HAL_GPIO_WritePin(LedGanador_GPIO_Port, LedGanador_Pin, GPIO_PIN_RESET); //Poner a 0 Led Ganador
 800092e:	2200      	movs	r2, #0
 8000930:	2101      	movs	r1, #1
 8000932:	4810      	ldr	r0, [pc, #64]	; (8000974 <main+0x178>)
 8000934:	f000 fe94 	bl	8001660 <HAL_GPIO_WritePin>
  {
 8000938:	e795      	b.n	8000866 <main+0x6a>
 800093a:	bf00      	nop
 800093c:	2000008c 	.word	0x2000008c
 8000940:	08005bc0 	.word	0x08005bc0
 8000944:	08005bc8 	.word	0x08005bc8
 8000948:	08005c0c 	.word	0x08005c0c
 800094c:	08005c50 	.word	0x08005c50
 8000950:	08005c94 	.word	0x08005c94
 8000954:	08005cd8 	.word	0x08005cd8
 8000958:	08005d1c 	.word	0x08005d1c
 800095c:	08005d20 	.word	0x08005d20
 8000960:	08005d70 	.word	0x08005d70
 8000964:	08005d88 	.word	0x08005d88
 8000968:	08005d8c 	.word	0x08005d8c
 800096c:	08005d90 	.word	0x08005d90
 8000970:	08005db8 	.word	0x08005db8
 8000974:	40020400 	.word	0x40020400
 8000978:	cccccccd 	.word	0xcccccccd
 800097c:	08005dec 	.word	0x08005dec
 8000980:	08005e04 	.word	0x08005e04
 8000984:	08005e1c 	.word	0x08005e1c
 8000988:	08005e34 	.word	0x08005e34

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2234      	movs	r2, #52	; 0x34
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fd52 	bl	8003444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <SystemClock_Config+0xb0>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <SystemClock_Config+0xb0>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <SystemClock_Config+0xb0>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <SystemClock_Config+0xb4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <SystemClock_Config+0xb4>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <SystemClock_Config+0xb4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ec:	2310      	movs	r3, #16
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fe4b 	bl	8001694 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a04:	f000 f952 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 f8e3 	bl	8001bf0 <HAL_RCC_ClockConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000a30:	f000 f93c 	bl	8000cac <Error_Handler>
  }
}
 8000a34:	bf00      	nop
 8000a36:	3750      	adds	r7, #80	; 0x50
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_USART3_UART_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a88:	f001 fefe 	bl	8002888 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f90b 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	; 0x30
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b77      	ldr	r3, [pc, #476]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a76      	ldr	r2, [pc, #472]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b74      	ldr	r3, [pc, #464]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	4b71      	ldr	r3, [pc, #452]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a70      	ldr	r2, [pc, #448]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b6e      	ldr	r3, [pc, #440]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b6b      	ldr	r3, [pc, #428]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a6a      	ldr	r2, [pc, #424]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b68      	ldr	r3, [pc, #416]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b65      	ldr	r3, [pc, #404]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a64      	ldr	r2, [pc, #400]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b62      	ldr	r3, [pc, #392]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a5e      	ldr	r2, [pc, #376]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b5c      	ldr	r3, [pc, #368]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b32:	4b59      	ldr	r3, [pc, #356]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a58      	ldr	r2, [pc, #352]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b56      	ldr	r3, [pc, #344]	; (8000c98 <MX_GPIO_Init+0x1f4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedGanador_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b50:	4852      	ldr	r0, [pc, #328]	; (8000c9c <MX_GPIO_Init+0x1f8>)
 8000b52:	f000 fd85 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2140      	movs	r1, #64	; 0x40
 8000b5a:	4851      	ldr	r0, [pc, #324]	; (8000ca0 <MX_GPIO_Init+0x1fc>)
 8000b5c:	f000 fd80 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	484b      	ldr	r0, [pc, #300]	; (8000ca4 <MX_GPIO_Init+0x200>)
 8000b78:	f000 fbc6 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b7c:	2332      	movs	r3, #50	; 0x32
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4843      	ldr	r0, [pc, #268]	; (8000ca4 <MX_GPIO_Init+0x200>)
 8000b98:	f000 fbb6 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b9c:	2386      	movs	r3, #134	; 0x86
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bac:	230b      	movs	r3, #11
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	483c      	ldr	r0, [pc, #240]	; (8000ca8 <MX_GPIO_Init+0x204>)
 8000bb8:	f000 fba6 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedGanador_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LedGanador_Pin|LD3_Pin|LD2_Pin;
 8000bbc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4831      	ldr	r0, [pc, #196]	; (8000c9c <MX_GPIO_Init+0x1f8>)
 8000bd6:	f000 fb97 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bec:	230b      	movs	r3, #11
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4829      	ldr	r0, [pc, #164]	; (8000c9c <MX_GPIO_Init+0x1f8>)
 8000bf8:	f000 fb86 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bfc:	2340      	movs	r3, #64	; 0x40
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <MX_GPIO_Init+0x1fc>)
 8000c14:	f000 fb78 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <MX_GPIO_Init+0x1fc>)
 8000c2c:	f000 fb6c 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c30:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c42:	230a      	movs	r3, #10
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <MX_GPIO_Init+0x204>)
 8000c4e:	f000 fb5b 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <MX_GPIO_Init+0x204>)
 8000c68:	f000 fb4e 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_GPIO_Init+0x1fc>)
 8000c8a:	f000 fb3d 	bl	8001308 <HAL_GPIO_Init>

}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	; 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	40021800 	.word	0x40021800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020000 	.word	0x40020000

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <Error_Handler+0x8>
	...

08000cb8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <RetargetInit+0x28>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <RetargetInit+0x2c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6898      	ldr	r0, [r3, #8]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	2202      	movs	r2, #2
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f002 fc65 	bl	80035a0 <setvbuf>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000114 	.word	0x20000114
 8000ce4:	2000000c 	.word	0x2000000c

08000ce8 <_isatty>:

int _isatty(int fd) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db04      	blt.n	8000d00 <_isatty+0x18>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	dc01      	bgt.n	8000d00 <_isatty+0x18>
    return 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e005      	b.n	8000d0c <_isatty+0x24>

  errno = EBADF;
 8000d00:	f002 fb76 	bl	80033f0 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2209      	movs	r2, #9
 8000d08:	601a      	str	r2, [r3, #0]
  return 0;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_write>:

int _write(int fd, char* ptr, int len) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d002      	beq.n	8000d2c <_write+0x18>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d111      	bne.n	8000d50 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <_write+0x54>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	f001 fdf3 	bl	8002924 <HAL_UART_Transmit>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d42:	7dfb      	ldrb	r3, [r7, #23]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <_write+0x38>
      return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	e008      	b.n	8000d5e <_write+0x4a>
    else
      return EIO;
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	e006      	b.n	8000d5e <_write+0x4a>
  }
  errno = EBADF;
 8000d50:	f002 fb4e 	bl	80033f0 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2209      	movs	r2, #9
 8000d58:	601a      	str	r2, [r3, #0]
  return -1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000114 	.word	0x20000114

08000d6c <_close>:

int _close(int fd) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db04      	blt.n	8000d84 <_close+0x18>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	dc01      	bgt.n	8000d84 <_close+0x18>
    return 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e006      	b.n	8000d92 <_close+0x26>

  errno = EBADF;
 8000d84:	f002 fb34 	bl	80033f0 <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2209      	movs	r2, #9
 8000d8c:	601a      	str	r2, [r3, #0]
  return -1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000da6:	f002 fb23 	bl	80033f0 <__errno>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2209      	movs	r2, #9
 8000dae:	601a      	str	r2, [r3, #0]
  return -1;
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_read>:

int _read(int fd, char* ptr, int len) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d110      	bne.n	8000df0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <_read+0x4c>)
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	f001 fe26 	bl	8002a2a <HAL_UART_Receive>
 8000dde:	4603      	mov	r3, r0
 8000de0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <_read+0x30>
      return 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e008      	b.n	8000dfe <_read+0x42>
    else
      return EIO;
 8000dec:	2305      	movs	r3, #5
 8000dee:	e006      	b.n	8000dfe <_read+0x42>
  }
  errno = EBADF;
 8000df0:	f002 fafe 	bl	80033f0 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2209      	movs	r2, #9
 8000df8:	601a      	str	r2, [r3, #0]
  return -1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000114 	.word	0x20000114

08000e0c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db08      	blt.n	8000e2e <_fstat+0x22>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	dc05      	bgt.n	8000e2e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e28:	605a      	str	r2, [r3, #4]
    return 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e005      	b.n	8000e3a <_fstat+0x2e>
  }

  errno = EBADF;
 8000e2e:	f002 fadf 	bl	80033f0 <__errno>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2209      	movs	r2, #9
 8000e36:	601a      	str	r2, [r3, #0]
  return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_MspInit+0x44>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_MspInit+0x44>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x44>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0ae      	sub	sp, #184	; 0xb8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2290      	movs	r2, #144	; 0x90
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f002 fac9 	bl	8003444 <memset>
  if(huart->Instance==USART3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a22      	ldr	r2, [pc, #136]	; (8000f40 <HAL_UART_MspInit+0xb4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d13c      	bne.n	8000f36 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 f8b4 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ed6:	f7ff fee9 	bl	8000cac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_UART_MspInit+0xb8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f24:	2307      	movs	r3, #7
 8000f26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_UART_MspInit+0xbc>)
 8000f32:	f000 f9e9 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	37b8      	adds	r7, #184	; 0xb8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40004800 	.word	0x40004800
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020c00 	.word	0x40020c00

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f8b0 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f002 fa0e 	bl	80033f0 <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20080000 	.word	0x20080000
 8001000:	00000400 	.word	0x00000400
 8001004:	20000118 	.word	0x20000118
 8001008:	20000130 	.word	0x20000130

0800100c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800104c:	4c0b      	ldr	r4, [pc, #44]	; (800107c <LoopFillZerobss+0x26>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105a:	f7ff ffd7 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f002 f9cd 	bl	80033fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fbcb 	bl	80007fc <main>
  bx  lr    
 8001066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001074:	08006024 	.word	0x08006024
  ldr r2, =_sbss
 8001078:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800107c:	20000130 	.word	0x20000130

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>

08001082 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001086:	2003      	movs	r0, #3
 8001088:	f000 f90a 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108c:	2000      	movs	r0, #0
 800108e:	f000 f805 	bl	800109c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001092:	f7ff fed7 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f917 	bl	80012ee <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f8ed 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	2000011c 	.word	0x2000011c

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000011c 	.word	0x2000011c

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <__NVIC_SetPriorityGrouping+0x40>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	4313      	orrs	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x40>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	05fa0000 	.word	0x05fa0000

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff47 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff5c 	bl	8001184 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff8e 	bl	80011f4 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffb0 	bl	800125c <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	e175      	b.n	8001614 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 8164 	bne.w	800160e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d005      	beq.n	800135e <HAL_GPIO_Init+0x56>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d130      	bne.n	80013c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2203      	movs	r2, #3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001394:	2201      	movs	r2, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 0201 	and.w	r2, r3, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d017      	beq.n	80013fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	69b9      	ldr	r1, [r7, #24]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80be 	beq.w	800160e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_GPIO_Init+0x324>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a65      	ldr	r2, [pc, #404]	; (800162c <HAL_GPIO_Init+0x324>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_GPIO_Init+0x324>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014aa:	4a61      	ldr	r2, [pc, #388]	; (8001630 <HAL_GPIO_Init+0x328>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_GPIO_Init+0x32c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d037      	beq.n	8001546 <HAL_GPIO_Init+0x23e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a57      	ldr	r2, [pc, #348]	; (8001638 <HAL_GPIO_Init+0x330>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d031      	beq.n	8001542 <HAL_GPIO_Init+0x23a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a56      	ldr	r2, [pc, #344]	; (800163c <HAL_GPIO_Init+0x334>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d02b      	beq.n	800153e <HAL_GPIO_Init+0x236>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a55      	ldr	r2, [pc, #340]	; (8001640 <HAL_GPIO_Init+0x338>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d025      	beq.n	800153a <HAL_GPIO_Init+0x232>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a54      	ldr	r2, [pc, #336]	; (8001644 <HAL_GPIO_Init+0x33c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d01f      	beq.n	8001536 <HAL_GPIO_Init+0x22e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a53      	ldr	r2, [pc, #332]	; (8001648 <HAL_GPIO_Init+0x340>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d019      	beq.n	8001532 <HAL_GPIO_Init+0x22a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a52      	ldr	r2, [pc, #328]	; (800164c <HAL_GPIO_Init+0x344>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0x226>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a51      	ldr	r2, [pc, #324]	; (8001650 <HAL_GPIO_Init+0x348>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00d      	beq.n	800152a <HAL_GPIO_Init+0x222>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a50      	ldr	r2, [pc, #320]	; (8001654 <HAL_GPIO_Init+0x34c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d007      	beq.n	8001526 <HAL_GPIO_Init+0x21e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4f      	ldr	r2, [pc, #316]	; (8001658 <HAL_GPIO_Init+0x350>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_GPIO_Init+0x21a>
 800151e:	2309      	movs	r3, #9
 8001520:	e012      	b.n	8001548 <HAL_GPIO_Init+0x240>
 8001522:	230a      	movs	r3, #10
 8001524:	e010      	b.n	8001548 <HAL_GPIO_Init+0x240>
 8001526:	2308      	movs	r3, #8
 8001528:	e00e      	b.n	8001548 <HAL_GPIO_Init+0x240>
 800152a:	2307      	movs	r3, #7
 800152c:	e00c      	b.n	8001548 <HAL_GPIO_Init+0x240>
 800152e:	2306      	movs	r3, #6
 8001530:	e00a      	b.n	8001548 <HAL_GPIO_Init+0x240>
 8001532:	2305      	movs	r3, #5
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x240>
 8001536:	2304      	movs	r3, #4
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x240>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x240>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x240>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x240>
 8001546:	2300      	movs	r3, #0
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <HAL_GPIO_Init+0x328>)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_GPIO_Init+0x354>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a34      	ldr	r2, [pc, #208]	; (800165c <HAL_GPIO_Init+0x354>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_GPIO_Init+0x354>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a29      	ldr	r2, [pc, #164]	; (800165c <HAL_GPIO_Init+0x354>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ba:	4b28      	ldr	r3, [pc, #160]	; (800165c <HAL_GPIO_Init+0x354>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015de:	4a1f      	ldr	r2, [pc, #124]	; (800165c <HAL_GPIO_Init+0x354>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_GPIO_Init+0x354>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_GPIO_Init+0x354>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	f67f ae86 	bls.w	8001328 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40021400 	.word	0x40021400
 800164c:	40021800 	.word	0x40021800
 8001650:	40021c00 	.word	0x40021c00
 8001654:	40022000 	.word	0x40022000
 8001658:	40022400 	.word	0x40022400
 800165c:	40013c00 	.word	0x40013c00

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800167c:	e003      	b.n	8001686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	619a      	str	r2, [r3, #24]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e29b      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8087 	beq.w	80017c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b8:	4b96      	ldr	r3, [pc, #600]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d00c      	beq.n	80016de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c4:	4b93      	ldr	r3, [pc, #588]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d112      	bne.n	80016f6 <HAL_RCC_OscConfig+0x62>
 80016d0:	4b90      	ldr	r3, [pc, #576]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016dc:	d10b      	bne.n	80016f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016de:	4b8d      	ldr	r3, [pc, #564]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d06c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x130>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d168      	bne.n	80017c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e275      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x7a>
 8001700:	4b84      	ldr	r3, [pc, #528]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a83      	ldr	r2, [pc, #524]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e02e      	b.n	800176c <HAL_RCC_OscConfig+0xd8>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x9c>
 8001716:	4b7f      	ldr	r3, [pc, #508]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a7e      	ldr	r2, [pc, #504]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 800171c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7b      	ldr	r2, [pc, #492]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e01d      	b.n	800176c <HAL_RCC_OscConfig+0xd8>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0xc0>
 800173a:	4b76      	ldr	r3, [pc, #472]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a75      	ldr	r2, [pc, #468]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b73      	ldr	r3, [pc, #460]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a72      	ldr	r2, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0xd8>
 8001754:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a6e      	ldr	r2, [pc, #440]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6b      	ldr	r2, [pc, #428]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fcd6 	bl	8001124 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fcd2 	bl	8001124 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e229      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b61      	ldr	r3, [pc, #388]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0xe8>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fcc2 	bl	8001124 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fcbe 	bl	8001124 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e215      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	4b57      	ldr	r3, [pc, #348]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x110>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d069      	beq.n	80018a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d2:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017de:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d11c      	bne.n	8001824 <HAL_RCC_OscConfig+0x190>
 80017ea:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x17a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e1e9      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	493d      	ldr	r1, [pc, #244]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	e040      	b.n	80018a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d023      	beq.n	8001874 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a38      	ldr	r2, [pc, #224]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fc74 	bl	8001124 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fc70 	bl	8001124 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1c7      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4929      	ldr	r1, [pc, #164]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
 8001872:	e018      	b.n	80018a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a26      	ldr	r2, [pc, #152]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fc50 	bl	8001124 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff fc4c 	bl	8001124 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1a3      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d038      	beq.n	8001924 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d019      	beq.n	80018ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80018bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff fc2d 	bl	8001124 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fc29 	bl	8001124 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e180      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80018e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x23a>
 80018ec:	e01a      	b.n	8001924 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80018f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff fc13 	bl	8001124 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff fc0f 	bl	8001124 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d903      	bls.n	8001918 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e166      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
 8001914:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 800191a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a4 	beq.w	8001a7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001932:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10d      	bne.n	800195a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a88      	ldr	r2, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b86      	ldr	r3, [pc, #536]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195a:	4b83      	ldr	r3, [pc, #524]	; (8001b68 <HAL_RCC_OscConfig+0x4d4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001966:	4b80      	ldr	r3, [pc, #512]	; (8001b68 <HAL_RCC_OscConfig+0x4d4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a7f      	ldr	r2, [pc, #508]	; (8001b68 <HAL_RCC_OscConfig+0x4d4>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fbd7 	bl	8001124 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fbd3 	bl	8001124 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b64      	cmp	r3, #100	; 0x64
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e12a      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198c:	4b76      	ldr	r3, [pc, #472]	; (8001b68 <HAL_RCC_OscConfig+0x4d4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x31a>
 80019a0:	4b70      	ldr	r3, [pc, #448]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	4a6f      	ldr	r2, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6713      	str	r3, [r2, #112]	; 0x70
 80019ac:	e02d      	b.n	8001a0a <HAL_RCC_OscConfig+0x376>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x33c>
 80019b6:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6713      	str	r3, [r2, #112]	; 0x70
 80019c2:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	4a67      	ldr	r2, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019c8:	f023 0304 	bic.w	r3, r3, #4
 80019cc:	6713      	str	r3, [r2, #112]	; 0x70
 80019ce:	e01c      	b.n	8001a0a <HAL_RCC_OscConfig+0x376>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d10c      	bne.n	80019f2 <HAL_RCC_OscConfig+0x35e>
 80019d8:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	4a61      	ldr	r2, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	6713      	str	r3, [r2, #112]	; 0x70
 80019e4:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	4a5e      	ldr	r2, [pc, #376]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6713      	str	r3, [r2, #112]	; 0x70
 80019f0:	e00b      	b.n	8001a0a <HAL_RCC_OscConfig+0x376>
 80019f2:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a5b      	ldr	r2, [pc, #364]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
 80019fe:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d015      	beq.n	8001a3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff fb87 	bl	8001124 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff fb83 	bl	8001124 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0d8      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ee      	beq.n	8001a1a <HAL_RCC_OscConfig+0x386>
 8001a3c:	e014      	b.n	8001a68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fb71 	bl	8001124 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7ff fb6d 	bl	8001124 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0c2      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ee      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d105      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80ae 	beq.w	8001be0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d06d      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d14b      	bne.n	8001b30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a98:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a31      	ldr	r2, [pc, #196]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fb3e 	bl	8001124 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff fb3a 	bl	8001124 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e091      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	041b      	lsls	r3, r3, #16
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	061b      	lsls	r3, r3, #24
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	071b      	lsls	r3, r3, #28
 8001af6:	491b      	ldr	r1, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fb0c 	bl	8001124 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff fb08 	bl	8001124 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e05f      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x47c>
 8001b2e:	e057      	b.n	8001be0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff faf2 	bl	8001124 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff faee 	bl	8001124 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e045      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_RCC_OscConfig+0x4d0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4b0>
 8001b62:	e03d      	b.n	8001be0 <HAL_RCC_OscConfig+0x54c>
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_RCC_OscConfig+0x558>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d030      	beq.n	8001bdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d129      	bne.n	8001bdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d122      	bne.n	8001bdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ba2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d119      	bne.n	8001bdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d10f      	bne.n	8001bdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0d0      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b6a      	ldr	r3, [pc, #424]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d910      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 020f 	bic.w	r2, r3, #15
 8001c1e:	4965      	ldr	r1, [pc, #404]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c68:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	494d      	ldr	r1, [pc, #308]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d040      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d115      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e073      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e06b      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4936      	ldr	r1, [pc, #216]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce4:	f7ff fa1e 	bl	8001124 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff fa1a 	bl	8001124 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e053      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d210      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 020f 	bic.w	r2, r3, #15
 8001d2a:	4922      	ldr	r1, [pc, #136]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4916      	ldr	r1, [pc, #88]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490e      	ldr	r1, [pc, #56]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d82:	f000 f821 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490a      	ldr	r1, [pc, #40]	; (8001dbc <HAL_RCC_ClockConfig+0x1cc>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_ClockConfig+0x1d4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f97a 	bl	800109c <HAL_InitTick>

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08005e44 	.word	0x08005e44
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dcc:	b094      	sub	sp, #80	; 0x50
 8001dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd8:	2300      	movs	r3, #0
 8001dda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de0:	4b79      	ldr	r3, [pc, #484]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d00d      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x40>
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	f200 80e1 	bhi.w	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x34>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfa:	e0db      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e00:	e0db      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e02:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e06:	e0d8      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e10:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e12:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	2200      	movs	r2, #0
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
 8001e36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	0159      	lsls	r1, r3, #5
 8001e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4c:	0150      	lsls	r0, r2, #5
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4621      	mov	r1, r4
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	6139      	str	r1, [r7, #16]
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e6c:	4659      	mov	r1, fp
 8001e6e:	018b      	lsls	r3, r1, #6
 8001e70:	4651      	mov	r1, sl
 8001e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e76:	4651      	mov	r1, sl
 8001e78:	018a      	lsls	r2, r1, #6
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e80:	4659      	mov	r1, fp
 8001e82:	eb63 0901 	sbc.w	r9, r3, r1
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e9a:	4690      	mov	r8, r2
 8001e9c:	4699      	mov	r9, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	eb18 0303 	adds.w	r3, r8, r3
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	eb49 0303 	adc.w	r3, r9, r3
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	028b      	lsls	r3, r1, #10
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	028a      	lsls	r2, r1, #10
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ed8:	f7fe fa02 	bl	80002e0 <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ee4:	e058      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	099b      	lsrs	r3, r3, #6
 8001eec:	2200      	movs	r2, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
 8001efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f00:	4642      	mov	r2, r8
 8001f02:	464b      	mov	r3, r9
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f12:	0150      	lsls	r0, r2, #5
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4641      	mov	r1, r8
 8001f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f1e:	4649      	mov	r1, r9
 8001f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f38:	ebb2 040a 	subs.w	r4, r2, sl
 8001f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	00eb      	lsls	r3, r5, #3
 8001f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4e:	00e2      	lsls	r2, r4, #3
 8001f50:	4614      	mov	r4, r2
 8001f52:	461d      	mov	r5, r3
 8001f54:	4643      	mov	r3, r8
 8001f56:	18e3      	adds	r3, r4, r3
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	eb45 0303 	adc.w	r3, r5, r3
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	028b      	lsls	r3, r1, #10
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f78:	4621      	mov	r1, r4
 8001f7a:	028a      	lsls	r2, r1, #10
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	61fa      	str	r2, [r7, #28]
 8001f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f8c:	f7fe f9a8 	bl	80002e0 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001fa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fb2:	e002      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3750      	adds	r7, #80	; 0x50
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	00f42400 	.word	0x00f42400

08001fd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a9b      	lsrs	r3, r3, #10
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	; (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	08005e54 	.word	0x08005e54

08002010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002014:	f7ff ffdc 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0b5b      	lsrs	r3, r3, #13
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4903      	ldr	r1, [pc, #12]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	08005e54 	.word	0x08005e54

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002060:	4b69      	ldr	r3, [pc, #420]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a68      	ldr	r2, [pc, #416]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800206a:	6093      	str	r3, [r2, #8]
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	4964      	ldr	r1, [pc, #400]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d017      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002092:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	4959      	ldr	r1, [pc, #356]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020b0:	d101      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d017      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	494a      	ldr	r1, [pc, #296]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 808b 	beq.w	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	4a39      	ldr	r2, [pc, #228]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
 8002128:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a34      	ldr	r2, [pc, #208]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002140:	f7fe fff0 	bl	8001124 <HAL_GetTick>
 8002144:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7fe ffec 	bl	8001124 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e38f      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800215a:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002166:	4b28      	ldr	r3, [pc, #160]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d035      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d02e      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021a6:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d114      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe ffb4 	bl	8001124 <HAL_GetTick>
 80021bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7fe ffb0 	bl	8001124 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e351      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ee      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021ee:	d111      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021fe:	400b      	ands	r3, r1
 8002200:	4901      	ldr	r1, [pc, #4]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
 8002206:	e00b      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000
 8002210:	0ffffcff 	.word	0x0ffffcff
 8002214:	4bac      	ldr	r3, [pc, #688]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4aab      	ldr	r2, [pc, #684]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800221e:	6093      	str	r3, [r2, #8]
 8002220:	4ba9      	ldr	r3, [pc, #676]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002222:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	49a6      	ldr	r1, [pc, #664]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	4313      	orrs	r3, r2
 8002230:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800223e:	4ba2      	ldr	r3, [pc, #648]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002244:	4aa0      	ldr	r2, [pc, #640]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800224e:	4b9e      	ldr	r3, [pc, #632]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002250:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	499b      	ldr	r1, [pc, #620]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226c:	4b96      	ldr	r3, [pc, #600]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800227a:	4993      	ldr	r1, [pc, #588]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800228e:	4b8e      	ldr	r3, [pc, #568]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800229c:	498a      	ldr	r1, [pc, #552]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b0:	4b85      	ldr	r3, [pc, #532]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022be:	4982      	ldr	r1, [pc, #520]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022d2:	4b7d      	ldr	r3, [pc, #500]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4979      	ldr	r1, [pc, #484]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f4:	4b74      	ldr	r3, [pc, #464]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4971      	ldr	r1, [pc, #452]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002316:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	f023 020c 	bic.w	r2, r3, #12
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002324:	4968      	ldr	r1, [pc, #416]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002338:	4b63      	ldr	r3, [pc, #396]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	4960      	ldr	r1, [pc, #384]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800235a:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002368:	4957      	ldr	r1, [pc, #348]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800237c:	4b52      	ldr	r3, [pc, #328]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	494f      	ldr	r1, [pc, #316]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	4946      	ldr	r1, [pc, #280]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023c0:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	493e      	ldr	r1, [pc, #248]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023e2:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	4935      	ldr	r1, [pc, #212]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002412:	492d      	ldr	r1, [pc, #180]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002426:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002434:	4924      	ldr	r1, [pc, #144]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002444:	d101      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002474:	4914      	ldr	r1, [pc, #80]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00b      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002498:	490b      	ldr	r1, [pc, #44]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00f      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024bc:	4902      	ldr	r1, [pc, #8]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024c4:	e002      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024d8:	4b8a      	ldr	r3, [pc, #552]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	4986      	ldr	r1, [pc, #536]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80024fc:	4b81      	ldr	r3, [pc, #516]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002502:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800250c:	497d      	ldr	r1, [pc, #500]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d006      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80d6 	beq.w	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002528:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a75      	ldr	r2, [pc, #468]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002534:	f7fe fdf6 	bl	8001124 <HAL_GetTick>
 8002538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800253c:	f7fe fdf2 	bl	8001124 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e195      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254e:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d021      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11d      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800256e:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800257c:	4b61      	ldr	r3, [pc, #388]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002582:	0e1b      	lsrs	r3, r3, #24
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	019a      	lsls	r2, r3, #6
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	071b      	lsls	r3, r3, #28
 80025a2:	4958      	ldr	r1, [pc, #352]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02e      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d4:	d129      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025d6:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025e4:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ea:	0f1b      	lsrs	r3, r3, #28
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	019a      	lsls	r2, r3, #6
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	071b      	lsls	r3, r3, #28
 800260a:	493e      	ldr	r1, [pc, #248]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002612:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002618:	f023 021f 	bic.w	r2, r3, #31
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	3b01      	subs	r3, #1
 8002622:	4938      	ldr	r1, [pc, #224]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01d      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263c:	0e1b      	lsrs	r3, r3, #24
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264a:	0f1b      	lsrs	r3, r3, #28
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	019a      	lsls	r2, r3, #6
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	061b      	lsls	r3, r3, #24
 8002664:	431a      	orrs	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	071b      	lsls	r3, r3, #28
 800266a:	4926      	ldr	r1, [pc, #152]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d011      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	019a      	lsls	r2, r3, #6
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	071b      	lsls	r3, r3, #28
 800269a:	491a      	ldr	r1, [pc, #104]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ae:	f7fe fd39 	bl	8001124 <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026b6:	f7fe fd35 	bl	8001124 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	; 0x64
 80026c2:	d901      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e0d8      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f040 80ce 	bne.w	8002878 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a08      	ldr	r2, [pc, #32]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e8:	f7fe fd1c 	bl	8001124 <HAL_GetTick>
 80026ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026ee:	e00b      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026f0:	f7fe fd18 	bl	8001124 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d904      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0bb      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002714:	d0ec      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02e      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d12a      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800273e:	4b51      	ldr	r3, [pc, #324]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800274c:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	0f1b      	lsrs	r3, r3, #28
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	019a      	lsls	r2, r3, #6
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	071b      	lsls	r3, r3, #28
 8002772:	4944      	ldr	r1, [pc, #272]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002780:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	3b01      	subs	r3, #1
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	493d      	ldr	r1, [pc, #244]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d022      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a8:	d11d      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	0e1b      	lsrs	r3, r3, #24
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027b8:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	0f1b      	lsrs	r3, r3, #28
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	019a      	lsls	r2, r3, #6
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431a      	orrs	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	4929      	ldr	r1, [pc, #164]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d028      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	0e1b      	lsrs	r3, r3, #24
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	019a      	lsls	r2, r3, #6
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	431a      	orrs	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	071b      	lsls	r3, r3, #28
 8002826:	4917      	ldr	r1, [pc, #92]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	4911      	ldr	r1, [pc, #68]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fe fc68 	bl	8001124 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002858:	f7fe fc64 	bl	8001124 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e007      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002876:	d1ef      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e040      	b.n	800291c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe faee 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	; 0x24
 80028b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f974 	bl	8002bb4 <UART_SetConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fbcc 	bl	800307c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fc53 	bl	80031c0 <UART_CheckIdleState>
 800291a:	4603      	mov	r3, r0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002938:	2b20      	cmp	r3, #32
 800293a:	d171      	bne.n	8002a20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_UART_Transmit+0x24>
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e06a      	b.n	8002a22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2221      	movs	r2, #33	; 0x21
 8002958:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800295a:	f7fe fbe3 	bl	8001124 <HAL_GetTick>
 800295e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002978:	d108      	bne.n	800298c <HAL_UART_Transmit+0x68>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	e003      	b.n	8002994 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002994:	e02c      	b.n	80029f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fc5a 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e038      	b.n	8002a22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10b      	bne.n	80029ce <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	3302      	adds	r3, #2
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	e007      	b.n	80029de <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	3301      	adds	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1cc      	bne.n	8002996 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2140      	movs	r1, #64	; 0x40
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fc27 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e005      	b.n	8002a22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b08a      	sub	sp, #40	; 0x28
 8002a2e:	af02      	add	r7, sp, #8
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	f040 80b1 	bne.w	8002ba8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <HAL_UART_Receive+0x28>
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0a9      	b.n	8002baa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2222      	movs	r2, #34	; 0x22
 8002a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fb5a 	bl	8001124 <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	88fa      	ldrh	r2, [r7, #6]
 8002a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8a:	d10e      	bne.n	8002aaa <HAL_UART_Receive+0x80>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_UART_Receive+0x76>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a9e:	e02d      	b.n	8002afc <HAL_UART_Receive+0xd2>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	22ff      	movs	r2, #255	; 0xff
 8002aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aa8:	e028      	b.n	8002afc <HAL_UART_Receive+0xd2>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10d      	bne.n	8002ace <HAL_UART_Receive+0xa4>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d104      	bne.n	8002ac4 <HAL_UART_Receive+0x9a>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	22ff      	movs	r2, #255	; 0xff
 8002abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ac2:	e01b      	b.n	8002afc <HAL_UART_Receive+0xd2>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	227f      	movs	r2, #127	; 0x7f
 8002ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002acc:	e016      	b.n	8002afc <HAL_UART_Receive+0xd2>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad6:	d10d      	bne.n	8002af4 <HAL_UART_Receive+0xca>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <HAL_UART_Receive+0xc0>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	227f      	movs	r2, #127	; 0x7f
 8002ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ae8:	e008      	b.n	8002afc <HAL_UART_Receive+0xd2>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	223f      	movs	r2, #63	; 0x3f
 8002aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002af2:	e003      	b.n	8002afc <HAL_UART_Receive+0xd2>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b02:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0c:	d108      	bne.n	8002b20 <HAL_UART_Receive+0xf6>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d104      	bne.n	8002b20 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	e003      	b.n	8002b28 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b28:	e032      	b.n	8002b90 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2120      	movs	r1, #32
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fb90 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e032      	b.n	8002baa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	8a7b      	ldrh	r3, [r7, #18]
 8002b54:	4013      	ands	r3, r2
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	3302      	adds	r3, #2
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e00c      	b.n	8002b7e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	8a7b      	ldrh	r3, [r7, #18]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	4013      	ands	r3, r2
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1c6      	bne.n	8002b2a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4ba6      	ldr	r3, [pc, #664]	; (8002e78 <UART_SetConfig+0x2c4>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	6979      	ldr	r1, [r7, #20]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a94      	ldr	r2, [pc, #592]	; (8002e7c <UART_SetConfig+0x2c8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d120      	bne.n	8002c72 <UART_SetConfig+0xbe>
 8002c30:	4b93      	ldr	r3, [pc, #588]	; (8002e80 <UART_SetConfig+0x2cc>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d816      	bhi.n	8002c6c <UART_SetConfig+0xb8>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <UART_SetConfig+0x90>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c61 	.word	0x08002c61
 8002c4c:	08002c5b 	.word	0x08002c5b
 8002c50:	08002c67 	.word	0x08002c67
 8002c54:	2301      	movs	r3, #1
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	e150      	b.n	8002efc <UART_SetConfig+0x348>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	77fb      	strb	r3, [r7, #31]
 8002c5e:	e14d      	b.n	8002efc <UART_SetConfig+0x348>
 8002c60:	2304      	movs	r3, #4
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e14a      	b.n	8002efc <UART_SetConfig+0x348>
 8002c66:	2308      	movs	r3, #8
 8002c68:	77fb      	strb	r3, [r7, #31]
 8002c6a:	e147      	b.n	8002efc <UART_SetConfig+0x348>
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e144      	b.n	8002efc <UART_SetConfig+0x348>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a83      	ldr	r2, [pc, #524]	; (8002e84 <UART_SetConfig+0x2d0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d132      	bne.n	8002ce2 <UART_SetConfig+0x12e>
 8002c7c:	4b80      	ldr	r3, [pc, #512]	; (8002e80 <UART_SetConfig+0x2cc>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d828      	bhi.n	8002cdc <UART_SetConfig+0x128>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <UART_SetConfig+0xdc>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002cdd 	.word	0x08002cdd
 8002c98:	08002cdd 	.word	0x08002cdd
 8002c9c:	08002cdd 	.word	0x08002cdd
 8002ca0:	08002cd1 	.word	0x08002cd1
 8002ca4:	08002cdd 	.word	0x08002cdd
 8002ca8:	08002cdd 	.word	0x08002cdd
 8002cac:	08002cdd 	.word	0x08002cdd
 8002cb0:	08002ccb 	.word	0x08002ccb
 8002cb4:	08002cdd 	.word	0x08002cdd
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	08002cdd 	.word	0x08002cdd
 8002cc0:	08002cd7 	.word	0x08002cd7
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	77fb      	strb	r3, [r7, #31]
 8002cc8:	e118      	b.n	8002efc <UART_SetConfig+0x348>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	77fb      	strb	r3, [r7, #31]
 8002cce:	e115      	b.n	8002efc <UART_SetConfig+0x348>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	77fb      	strb	r3, [r7, #31]
 8002cd4:	e112      	b.n	8002efc <UART_SetConfig+0x348>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	77fb      	strb	r3, [r7, #31]
 8002cda:	e10f      	b.n	8002efc <UART_SetConfig+0x348>
 8002cdc:	2310      	movs	r3, #16
 8002cde:	77fb      	strb	r3, [r7, #31]
 8002ce0:	e10c      	b.n	8002efc <UART_SetConfig+0x348>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a68      	ldr	r2, [pc, #416]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d120      	bne.n	8002d2e <UART_SetConfig+0x17a>
 8002cec:	4b64      	ldr	r3, [pc, #400]	; (8002e80 <UART_SetConfig+0x2cc>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002cf6:	2b30      	cmp	r3, #48	; 0x30
 8002cf8:	d013      	beq.n	8002d22 <UART_SetConfig+0x16e>
 8002cfa:	2b30      	cmp	r3, #48	; 0x30
 8002cfc:	d814      	bhi.n	8002d28 <UART_SetConfig+0x174>
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d009      	beq.n	8002d16 <UART_SetConfig+0x162>
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d810      	bhi.n	8002d28 <UART_SetConfig+0x174>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <UART_SetConfig+0x15c>
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d006      	beq.n	8002d1c <UART_SetConfig+0x168>
 8002d0e:	e00b      	b.n	8002d28 <UART_SetConfig+0x174>
 8002d10:	2300      	movs	r3, #0
 8002d12:	77fb      	strb	r3, [r7, #31]
 8002d14:	e0f2      	b.n	8002efc <UART_SetConfig+0x348>
 8002d16:	2302      	movs	r3, #2
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	e0ef      	b.n	8002efc <UART_SetConfig+0x348>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e0ec      	b.n	8002efc <UART_SetConfig+0x348>
 8002d22:	2308      	movs	r3, #8
 8002d24:	77fb      	strb	r3, [r7, #31]
 8002d26:	e0e9      	b.n	8002efc <UART_SetConfig+0x348>
 8002d28:	2310      	movs	r3, #16
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e0e6      	b.n	8002efc <UART_SetConfig+0x348>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a56      	ldr	r2, [pc, #344]	; (8002e8c <UART_SetConfig+0x2d8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d120      	bne.n	8002d7a <UART_SetConfig+0x1c6>
 8002d38:	4b51      	ldr	r3, [pc, #324]	; (8002e80 <UART_SetConfig+0x2cc>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d42:	2bc0      	cmp	r3, #192	; 0xc0
 8002d44:	d013      	beq.n	8002d6e <UART_SetConfig+0x1ba>
 8002d46:	2bc0      	cmp	r3, #192	; 0xc0
 8002d48:	d814      	bhi.n	8002d74 <UART_SetConfig+0x1c0>
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d009      	beq.n	8002d62 <UART_SetConfig+0x1ae>
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d810      	bhi.n	8002d74 <UART_SetConfig+0x1c0>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <UART_SetConfig+0x1a8>
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d006      	beq.n	8002d68 <UART_SetConfig+0x1b4>
 8002d5a:	e00b      	b.n	8002d74 <UART_SetConfig+0x1c0>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	77fb      	strb	r3, [r7, #31]
 8002d60:	e0cc      	b.n	8002efc <UART_SetConfig+0x348>
 8002d62:	2302      	movs	r3, #2
 8002d64:	77fb      	strb	r3, [r7, #31]
 8002d66:	e0c9      	b.n	8002efc <UART_SetConfig+0x348>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e0c6      	b.n	8002efc <UART_SetConfig+0x348>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e0c3      	b.n	8002efc <UART_SetConfig+0x348>
 8002d74:	2310      	movs	r3, #16
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e0c0      	b.n	8002efc <UART_SetConfig+0x348>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a44      	ldr	r2, [pc, #272]	; (8002e90 <UART_SetConfig+0x2dc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d125      	bne.n	8002dd0 <UART_SetConfig+0x21c>
 8002d84:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <UART_SetConfig+0x2cc>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d92:	d017      	beq.n	8002dc4 <UART_SetConfig+0x210>
 8002d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d98:	d817      	bhi.n	8002dca <UART_SetConfig+0x216>
 8002d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d9e:	d00b      	beq.n	8002db8 <UART_SetConfig+0x204>
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d811      	bhi.n	8002dca <UART_SetConfig+0x216>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <UART_SetConfig+0x1fe>
 8002daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dae:	d006      	beq.n	8002dbe <UART_SetConfig+0x20a>
 8002db0:	e00b      	b.n	8002dca <UART_SetConfig+0x216>
 8002db2:	2300      	movs	r3, #0
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e0a1      	b.n	8002efc <UART_SetConfig+0x348>
 8002db8:	2302      	movs	r3, #2
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e09e      	b.n	8002efc <UART_SetConfig+0x348>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e09b      	b.n	8002efc <UART_SetConfig+0x348>
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e098      	b.n	8002efc <UART_SetConfig+0x348>
 8002dca:	2310      	movs	r3, #16
 8002dcc:	77fb      	strb	r3, [r7, #31]
 8002dce:	e095      	b.n	8002efc <UART_SetConfig+0x348>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <UART_SetConfig+0x2e0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d125      	bne.n	8002e26 <UART_SetConfig+0x272>
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <UART_SetConfig+0x2cc>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002de8:	d017      	beq.n	8002e1a <UART_SetConfig+0x266>
 8002dea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dee:	d817      	bhi.n	8002e20 <UART_SetConfig+0x26c>
 8002df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df4:	d00b      	beq.n	8002e0e <UART_SetConfig+0x25a>
 8002df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfa:	d811      	bhi.n	8002e20 <UART_SetConfig+0x26c>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <UART_SetConfig+0x254>
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	d006      	beq.n	8002e14 <UART_SetConfig+0x260>
 8002e06:	e00b      	b.n	8002e20 <UART_SetConfig+0x26c>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e076      	b.n	8002efc <UART_SetConfig+0x348>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	77fb      	strb	r3, [r7, #31]
 8002e12:	e073      	b.n	8002efc <UART_SetConfig+0x348>
 8002e14:	2304      	movs	r3, #4
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e070      	b.n	8002efc <UART_SetConfig+0x348>
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e06d      	b.n	8002efc <UART_SetConfig+0x348>
 8002e20:	2310      	movs	r3, #16
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	e06a      	b.n	8002efc <UART_SetConfig+0x348>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <UART_SetConfig+0x2e4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d138      	bne.n	8002ea2 <UART_SetConfig+0x2ee>
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <UART_SetConfig+0x2cc>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002e3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e3e:	d017      	beq.n	8002e70 <UART_SetConfig+0x2bc>
 8002e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e44:	d82a      	bhi.n	8002e9c <UART_SetConfig+0x2e8>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4a:	d00b      	beq.n	8002e64 <UART_SetConfig+0x2b0>
 8002e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e50:	d824      	bhi.n	8002e9c <UART_SetConfig+0x2e8>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <UART_SetConfig+0x2aa>
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	d006      	beq.n	8002e6a <UART_SetConfig+0x2b6>
 8002e5c:	e01e      	b.n	8002e9c <UART_SetConfig+0x2e8>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	77fb      	strb	r3, [r7, #31]
 8002e62:	e04b      	b.n	8002efc <UART_SetConfig+0x348>
 8002e64:	2302      	movs	r3, #2
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e048      	b.n	8002efc <UART_SetConfig+0x348>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	e045      	b.n	8002efc <UART_SetConfig+0x348>
 8002e70:	2308      	movs	r3, #8
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	e042      	b.n	8002efc <UART_SetConfig+0x348>
 8002e76:	bf00      	nop
 8002e78:	efff69f3 	.word	0xefff69f3
 8002e7c:	40011000 	.word	0x40011000
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40004400 	.word	0x40004400
 8002e88:	40004800 	.word	0x40004800
 8002e8c:	40004c00 	.word	0x40004c00
 8002e90:	40005000 	.word	0x40005000
 8002e94:	40011400 	.word	0x40011400
 8002e98:	40007800 	.word	0x40007800
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e02c      	b.n	8002efc <UART_SetConfig+0x348>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a72      	ldr	r2, [pc, #456]	; (8003070 <UART_SetConfig+0x4bc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d125      	bne.n	8002ef8 <UART_SetConfig+0x344>
 8002eac:	4b71      	ldr	r3, [pc, #452]	; (8003074 <UART_SetConfig+0x4c0>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002eb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002eba:	d017      	beq.n	8002eec <UART_SetConfig+0x338>
 8002ebc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ec0:	d817      	bhi.n	8002ef2 <UART_SetConfig+0x33e>
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	d00b      	beq.n	8002ee0 <UART_SetConfig+0x32c>
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ecc:	d811      	bhi.n	8002ef2 <UART_SetConfig+0x33e>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <UART_SetConfig+0x326>
 8002ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ed6:	d006      	beq.n	8002ee6 <UART_SetConfig+0x332>
 8002ed8:	e00b      	b.n	8002ef2 <UART_SetConfig+0x33e>
 8002eda:	2300      	movs	r3, #0
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	e00d      	b.n	8002efc <UART_SetConfig+0x348>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e00a      	b.n	8002efc <UART_SetConfig+0x348>
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e007      	b.n	8002efc <UART_SetConfig+0x348>
 8002eec:	2308      	movs	r3, #8
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e004      	b.n	8002efc <UART_SetConfig+0x348>
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	e001      	b.n	8002efc <UART_SetConfig+0x348>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f04:	d15b      	bne.n	8002fbe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002f06:	7ffb      	ldrb	r3, [r7, #31]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d828      	bhi.n	8002f5e <UART_SetConfig+0x3aa>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <UART_SetConfig+0x360>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	08002f41 	.word	0x08002f41
 8002f1c:	08002f49 	.word	0x08002f49
 8002f20:	08002f5f 	.word	0x08002f5f
 8002f24:	08002f4f 	.word	0x08002f4f
 8002f28:	08002f5f 	.word	0x08002f5f
 8002f2c:	08002f5f 	.word	0x08002f5f
 8002f30:	08002f5f 	.word	0x08002f5f
 8002f34:	08002f57 	.word	0x08002f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f38:	f7ff f856 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8002f3c:	61b8      	str	r0, [r7, #24]
        break;
 8002f3e:	e013      	b.n	8002f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f40:	f7ff f866 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8002f44:	61b8      	str	r0, [r7, #24]
        break;
 8002f46:	e00f      	b.n	8002f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <UART_SetConfig+0x4c4>)
 8002f4a:	61bb      	str	r3, [r7, #24]
        break;
 8002f4c:	e00c      	b.n	8002f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4e:	f7fe ff3b 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002f52:	61b8      	str	r0, [r7, #24]
        break;
 8002f54:	e008      	b.n	8002f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5a:	61bb      	str	r3, [r7, #24]
        break;
 8002f5c:	e004      	b.n	8002f68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	77bb      	strb	r3, [r7, #30]
        break;
 8002f66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d074      	beq.n	8003058 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	005a      	lsls	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	d916      	bls.n	8002fb8 <UART_SetConfig+0x404>
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f90:	d212      	bcs.n	8002fb8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	f023 030f 	bic.w	r3, r3, #15
 8002f9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	89fa      	ldrh	r2, [r7, #14]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e04f      	b.n	8003058 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	77bb      	strb	r3, [r7, #30]
 8002fbc:	e04c      	b.n	8003058 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d828      	bhi.n	8003016 <UART_SetConfig+0x462>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <UART_SetConfig+0x418>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08002ff1 	.word	0x08002ff1
 8002fd0:	08002ff9 	.word	0x08002ff9
 8002fd4:	08003001 	.word	0x08003001
 8002fd8:	08003017 	.word	0x08003017
 8002fdc:	08003007 	.word	0x08003007
 8002fe0:	08003017 	.word	0x08003017
 8002fe4:	08003017 	.word	0x08003017
 8002fe8:	08003017 	.word	0x08003017
 8002fec:	0800300f 	.word	0x0800300f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f7fe fffa 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	61b8      	str	r0, [r7, #24]
        break;
 8002ff6:	e013      	b.n	8003020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff8:	f7ff f80a 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	61b8      	str	r0, [r7, #24]
        break;
 8002ffe:	e00f      	b.n	8003020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <UART_SetConfig+0x4c4>)
 8003002:	61bb      	str	r3, [r7, #24]
        break;
 8003004:	e00c      	b.n	8003020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7fe fedf 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 800300a:	61b8      	str	r0, [r7, #24]
        break;
 800300c:	e008      	b.n	8003020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003012:	61bb      	str	r3, [r7, #24]
        break;
 8003014:	e004      	b.n	8003020 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	77bb      	strb	r3, [r7, #30]
        break;
 800301e:	bf00      	nop
    }

    if (pclk != 0U)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d018      	beq.n	8003058 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	085a      	lsrs	r2, r3, #1
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	441a      	add	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d909      	bls.n	8003054 <UART_SetConfig+0x4a0>
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003046:	d205      	bcs.n	8003054 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	e001      	b.n	8003058 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003064:	7fbb      	ldrb	r3, [r7, #30]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40007c00 	.word	0x40007c00
 8003074:	40023800 	.word	0x40023800
 8003078:	00f42400 	.word	0x00f42400

0800307c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01a      	beq.n	8003192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317a:	d10a      	bne.n	8003192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  }
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d0:	f7fd ffa8 	bl	8001124 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d10e      	bne.n	8003202 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f831 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e027      	b.n	8003252 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d10e      	bne.n	800322e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f81b 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e011      	b.n	8003252 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b09c      	sub	sp, #112	; 0x70
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326a:	e0a7      	b.n	80033bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	f000 80a3 	beq.w	80033bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7fd ff55 	bl	8001124 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <UART_WaitOnFlagUntilTimeout+0x32>
 8003286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003288:	2b00      	cmp	r3, #0
 800328a:	d13f      	bne.n	800330c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800329a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032a0:	667b      	str	r3, [r7, #100]	; 0x64
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e6      	bne.n	800328c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3308      	adds	r3, #8
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	663b      	str	r3, [r7, #96]	; 0x60
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3308      	adds	r3, #8
 80032dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032de:	64ba      	str	r2, [r7, #72]	; 0x48
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e6:	e841 2300 	strex	r3, r2, [r1]
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e5      	bne.n	80032be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e068      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d050      	beq.n	80033bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003328:	d148      	bne.n	80033bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003332:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003348:	66fb      	str	r3, [r7, #108]	; 0x6c
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
 8003354:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e6      	bne.n	8003334 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3308      	adds	r3, #8
 800336c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	613b      	str	r3, [r7, #16]
   return(result);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	66bb      	str	r3, [r7, #104]	; 0x68
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003386:	623a      	str	r2, [r7, #32]
 8003388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	69f9      	ldr	r1, [r7, #28]
 800338c:	6a3a      	ldr	r2, [r7, #32]
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	61bb      	str	r3, [r7, #24]
   return(result);
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e5      	bne.n	8003366 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e010      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	f43f af48 	beq.w	800326c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3770      	adds	r7, #112	; 0x70
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <atoi>:
 80033e6:	220a      	movs	r2, #10
 80033e8:	2100      	movs	r1, #0
 80033ea:	f000 ba23 	b.w	8003834 <strtol>
	...

080033f0 <__errno>:
 80033f0:	4b01      	ldr	r3, [pc, #4]	; (80033f8 <__errno+0x8>)
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	2000000c 	.word	0x2000000c

080033fc <__libc_init_array>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	4d0d      	ldr	r5, [pc, #52]	; (8003434 <__libc_init_array+0x38>)
 8003400:	4c0d      	ldr	r4, [pc, #52]	; (8003438 <__libc_init_array+0x3c>)
 8003402:	1b64      	subs	r4, r4, r5
 8003404:	10a4      	asrs	r4, r4, #2
 8003406:	2600      	movs	r6, #0
 8003408:	42a6      	cmp	r6, r4
 800340a:	d109      	bne.n	8003420 <__libc_init_array+0x24>
 800340c:	4d0b      	ldr	r5, [pc, #44]	; (800343c <__libc_init_array+0x40>)
 800340e:	4c0c      	ldr	r4, [pc, #48]	; (8003440 <__libc_init_array+0x44>)
 8003410:	f001 ff3e 	bl	8005290 <_init>
 8003414:	1b64      	subs	r4, r4, r5
 8003416:	10a4      	asrs	r4, r4, #2
 8003418:	2600      	movs	r6, #0
 800341a:	42a6      	cmp	r6, r4
 800341c:	d105      	bne.n	800342a <__libc_init_array+0x2e>
 800341e:	bd70      	pop	{r4, r5, r6, pc}
 8003420:	f855 3b04 	ldr.w	r3, [r5], #4
 8003424:	4798      	blx	r3
 8003426:	3601      	adds	r6, #1
 8003428:	e7ee      	b.n	8003408 <__libc_init_array+0xc>
 800342a:	f855 3b04 	ldr.w	r3, [r5], #4
 800342e:	4798      	blx	r3
 8003430:	3601      	adds	r6, #1
 8003432:	e7f2      	b.n	800341a <__libc_init_array+0x1e>
 8003434:	0800601c 	.word	0x0800601c
 8003438:	0800601c 	.word	0x0800601c
 800343c:	0800601c 	.word	0x0800601c
 8003440:	08006020 	.word	0x08006020

08003444 <memset>:
 8003444:	4402      	add	r2, r0
 8003446:	4603      	mov	r3, r0
 8003448:	4293      	cmp	r3, r2
 800344a:	d100      	bne.n	800344e <memset+0xa>
 800344c:	4770      	bx	lr
 800344e:	f803 1b01 	strb.w	r1, [r3], #1
 8003452:	e7f9      	b.n	8003448 <memset+0x4>

08003454 <iprintf>:
 8003454:	b40f      	push	{r0, r1, r2, r3}
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <iprintf+0x2c>)
 8003458:	b513      	push	{r0, r1, r4, lr}
 800345a:	681c      	ldr	r4, [r3, #0]
 800345c:	b124      	cbz	r4, 8003468 <iprintf+0x14>
 800345e:	69a3      	ldr	r3, [r4, #24]
 8003460:	b913      	cbnz	r3, 8003468 <iprintf+0x14>
 8003462:	4620      	mov	r0, r4
 8003464:	f000 fbdc 	bl	8003c20 <__sinit>
 8003468:	ab05      	add	r3, sp, #20
 800346a:	9a04      	ldr	r2, [sp, #16]
 800346c:	68a1      	ldr	r1, [r4, #8]
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	4620      	mov	r0, r4
 8003472:	f000 fe09 	bl	8004088 <_vfiprintf_r>
 8003476:	b002      	add	sp, #8
 8003478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800347c:	b004      	add	sp, #16
 800347e:	4770      	bx	lr
 8003480:	2000000c 	.word	0x2000000c

08003484 <_puts_r>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	460e      	mov	r6, r1
 8003488:	4605      	mov	r5, r0
 800348a:	b118      	cbz	r0, 8003494 <_puts_r+0x10>
 800348c:	6983      	ldr	r3, [r0, #24]
 800348e:	b90b      	cbnz	r3, 8003494 <_puts_r+0x10>
 8003490:	f000 fbc6 	bl	8003c20 <__sinit>
 8003494:	69ab      	ldr	r3, [r5, #24]
 8003496:	68ac      	ldr	r4, [r5, #8]
 8003498:	b913      	cbnz	r3, 80034a0 <_puts_r+0x1c>
 800349a:	4628      	mov	r0, r5
 800349c:	f000 fbc0 	bl	8003c20 <__sinit>
 80034a0:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <_puts_r+0xd0>)
 80034a2:	429c      	cmp	r4, r3
 80034a4:	d120      	bne.n	80034e8 <_puts_r+0x64>
 80034a6:	686c      	ldr	r4, [r5, #4]
 80034a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034aa:	07db      	lsls	r3, r3, #31
 80034ac:	d405      	bmi.n	80034ba <_puts_r+0x36>
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	0598      	lsls	r0, r3, #22
 80034b2:	d402      	bmi.n	80034ba <_puts_r+0x36>
 80034b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034b6:	f000 fc6e 	bl	8003d96 <__retarget_lock_acquire_recursive>
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	0719      	lsls	r1, r3, #28
 80034be:	d51d      	bpl.n	80034fc <_puts_r+0x78>
 80034c0:	6923      	ldr	r3, [r4, #16]
 80034c2:	b1db      	cbz	r3, 80034fc <_puts_r+0x78>
 80034c4:	3e01      	subs	r6, #1
 80034c6:	68a3      	ldr	r3, [r4, #8]
 80034c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60a3      	str	r3, [r4, #8]
 80034d0:	bb39      	cbnz	r1, 8003522 <_puts_r+0x9e>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da38      	bge.n	8003548 <_puts_r+0xc4>
 80034d6:	4622      	mov	r2, r4
 80034d8:	210a      	movs	r1, #10
 80034da:	4628      	mov	r0, r5
 80034dc:	f000 f9b4 	bl	8003848 <__swbuf_r>
 80034e0:	3001      	adds	r0, #1
 80034e2:	d011      	beq.n	8003508 <_puts_r+0x84>
 80034e4:	250a      	movs	r5, #10
 80034e6:	e011      	b.n	800350c <_puts_r+0x88>
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <_puts_r+0xd4>)
 80034ea:	429c      	cmp	r4, r3
 80034ec:	d101      	bne.n	80034f2 <_puts_r+0x6e>
 80034ee:	68ac      	ldr	r4, [r5, #8]
 80034f0:	e7da      	b.n	80034a8 <_puts_r+0x24>
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <_puts_r+0xd8>)
 80034f4:	429c      	cmp	r4, r3
 80034f6:	bf08      	it	eq
 80034f8:	68ec      	ldreq	r4, [r5, #12]
 80034fa:	e7d5      	b.n	80034a8 <_puts_r+0x24>
 80034fc:	4621      	mov	r1, r4
 80034fe:	4628      	mov	r0, r5
 8003500:	f000 f9f4 	bl	80038ec <__swsetup_r>
 8003504:	2800      	cmp	r0, #0
 8003506:	d0dd      	beq.n	80034c4 <_puts_r+0x40>
 8003508:	f04f 35ff 	mov.w	r5, #4294967295
 800350c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800350e:	07da      	lsls	r2, r3, #31
 8003510:	d405      	bmi.n	800351e <_puts_r+0x9a>
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	059b      	lsls	r3, r3, #22
 8003516:	d402      	bmi.n	800351e <_puts_r+0x9a>
 8003518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800351a:	f000 fc3d 	bl	8003d98 <__retarget_lock_release_recursive>
 800351e:	4628      	mov	r0, r5
 8003520:	bd70      	pop	{r4, r5, r6, pc}
 8003522:	2b00      	cmp	r3, #0
 8003524:	da04      	bge.n	8003530 <_puts_r+0xac>
 8003526:	69a2      	ldr	r2, [r4, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	dc06      	bgt.n	800353a <_puts_r+0xb6>
 800352c:	290a      	cmp	r1, #10
 800352e:	d004      	beq.n	800353a <_puts_r+0xb6>
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	6022      	str	r2, [r4, #0]
 8003536:	7019      	strb	r1, [r3, #0]
 8003538:	e7c5      	b.n	80034c6 <_puts_r+0x42>
 800353a:	4622      	mov	r2, r4
 800353c:	4628      	mov	r0, r5
 800353e:	f000 f983 	bl	8003848 <__swbuf_r>
 8003542:	3001      	adds	r0, #1
 8003544:	d1bf      	bne.n	80034c6 <_puts_r+0x42>
 8003546:	e7df      	b.n	8003508 <_puts_r+0x84>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	250a      	movs	r5, #10
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	6022      	str	r2, [r4, #0]
 8003550:	701d      	strb	r5, [r3, #0]
 8003552:	e7db      	b.n	800350c <_puts_r+0x88>
 8003554:	08005f84 	.word	0x08005f84
 8003558:	08005fa4 	.word	0x08005fa4
 800355c:	08005f64 	.word	0x08005f64

08003560 <puts>:
 8003560:	4b02      	ldr	r3, [pc, #8]	; (800356c <puts+0xc>)
 8003562:	4601      	mov	r1, r0
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	f7ff bf8d 	b.w	8003484 <_puts_r>
 800356a:	bf00      	nop
 800356c:	2000000c 	.word	0x2000000c

08003570 <iscanf>:
 8003570:	b40f      	push	{r0, r1, r2, r3}
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <iscanf+0x2c>)
 8003574:	b513      	push	{r0, r1, r4, lr}
 8003576:	681c      	ldr	r4, [r3, #0]
 8003578:	b124      	cbz	r4, 8003584 <iscanf+0x14>
 800357a:	69a3      	ldr	r3, [r4, #24]
 800357c:	b913      	cbnz	r3, 8003584 <iscanf+0x14>
 800357e:	4620      	mov	r0, r4
 8003580:	f000 fb4e 	bl	8003c20 <__sinit>
 8003584:	ab05      	add	r3, sp, #20
 8003586:	9a04      	ldr	r2, [sp, #16]
 8003588:	6861      	ldr	r1, [r4, #4]
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	4620      	mov	r0, r4
 800358e:	f001 f9e5 	bl	800495c <_vfiscanf_r>
 8003592:	b002      	add	sp, #8
 8003594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003598:	b004      	add	sp, #16
 800359a:	4770      	bx	lr
 800359c:	2000000c 	.word	0x2000000c

080035a0 <setvbuf>:
 80035a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035a4:	461d      	mov	r5, r3
 80035a6:	4b5d      	ldr	r3, [pc, #372]	; (800371c <setvbuf+0x17c>)
 80035a8:	681f      	ldr	r7, [r3, #0]
 80035aa:	4604      	mov	r4, r0
 80035ac:	460e      	mov	r6, r1
 80035ae:	4690      	mov	r8, r2
 80035b0:	b127      	cbz	r7, 80035bc <setvbuf+0x1c>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	b913      	cbnz	r3, 80035bc <setvbuf+0x1c>
 80035b6:	4638      	mov	r0, r7
 80035b8:	f000 fb32 	bl	8003c20 <__sinit>
 80035bc:	4b58      	ldr	r3, [pc, #352]	; (8003720 <setvbuf+0x180>)
 80035be:	429c      	cmp	r4, r3
 80035c0:	d167      	bne.n	8003692 <setvbuf+0xf2>
 80035c2:	687c      	ldr	r4, [r7, #4]
 80035c4:	f1b8 0f02 	cmp.w	r8, #2
 80035c8:	d006      	beq.n	80035d8 <setvbuf+0x38>
 80035ca:	f1b8 0f01 	cmp.w	r8, #1
 80035ce:	f200 809f 	bhi.w	8003710 <setvbuf+0x170>
 80035d2:	2d00      	cmp	r5, #0
 80035d4:	f2c0 809c 	blt.w	8003710 <setvbuf+0x170>
 80035d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035da:	07db      	lsls	r3, r3, #31
 80035dc:	d405      	bmi.n	80035ea <setvbuf+0x4a>
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	0598      	lsls	r0, r3, #22
 80035e2:	d402      	bmi.n	80035ea <setvbuf+0x4a>
 80035e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e6:	f000 fbd6 	bl	8003d96 <__retarget_lock_acquire_recursive>
 80035ea:	4621      	mov	r1, r4
 80035ec:	4638      	mov	r0, r7
 80035ee:	f000 fa71 	bl	8003ad4 <_fflush_r>
 80035f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035f4:	b141      	cbz	r1, 8003608 <setvbuf+0x68>
 80035f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035fa:	4299      	cmp	r1, r3
 80035fc:	d002      	beq.n	8003604 <setvbuf+0x64>
 80035fe:	4638      	mov	r0, r7
 8003600:	f000 fc38 	bl	8003e74 <_free_r>
 8003604:	2300      	movs	r3, #0
 8003606:	6363      	str	r3, [r4, #52]	; 0x34
 8003608:	2300      	movs	r3, #0
 800360a:	61a3      	str	r3, [r4, #24]
 800360c:	6063      	str	r3, [r4, #4]
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	0619      	lsls	r1, r3, #24
 8003612:	d503      	bpl.n	800361c <setvbuf+0x7c>
 8003614:	6921      	ldr	r1, [r4, #16]
 8003616:	4638      	mov	r0, r7
 8003618:	f000 fc2c 	bl	8003e74 <_free_r>
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003622:	f023 0303 	bic.w	r3, r3, #3
 8003626:	f1b8 0f02 	cmp.w	r8, #2
 800362a:	81a3      	strh	r3, [r4, #12]
 800362c:	d06c      	beq.n	8003708 <setvbuf+0x168>
 800362e:	ab01      	add	r3, sp, #4
 8003630:	466a      	mov	r2, sp
 8003632:	4621      	mov	r1, r4
 8003634:	4638      	mov	r0, r7
 8003636:	f000 fbb0 	bl	8003d9a <__swhatbuf_r>
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	4318      	orrs	r0, r3
 800363e:	81a0      	strh	r0, [r4, #12]
 8003640:	2d00      	cmp	r5, #0
 8003642:	d130      	bne.n	80036a6 <setvbuf+0x106>
 8003644:	9d00      	ldr	r5, [sp, #0]
 8003646:	4628      	mov	r0, r5
 8003648:	f000 fc0c 	bl	8003e64 <malloc>
 800364c:	4606      	mov	r6, r0
 800364e:	2800      	cmp	r0, #0
 8003650:	d155      	bne.n	80036fe <setvbuf+0x15e>
 8003652:	f8dd 9000 	ldr.w	r9, [sp]
 8003656:	45a9      	cmp	r9, r5
 8003658:	d14a      	bne.n	80036f0 <setvbuf+0x150>
 800365a:	f04f 35ff 	mov.w	r5, #4294967295
 800365e:	2200      	movs	r2, #0
 8003660:	60a2      	str	r2, [r4, #8]
 8003662:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003666:	6022      	str	r2, [r4, #0]
 8003668:	6122      	str	r2, [r4, #16]
 800366a:	2201      	movs	r2, #1
 800366c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003670:	6162      	str	r2, [r4, #20]
 8003672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	07d2      	lsls	r2, r2, #31
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	d405      	bmi.n	800368a <setvbuf+0xea>
 800367e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003682:	d102      	bne.n	800368a <setvbuf+0xea>
 8003684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003686:	f000 fb87 	bl	8003d98 <__retarget_lock_release_recursive>
 800368a:	4628      	mov	r0, r5
 800368c:	b003      	add	sp, #12
 800368e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <setvbuf+0x184>)
 8003694:	429c      	cmp	r4, r3
 8003696:	d101      	bne.n	800369c <setvbuf+0xfc>
 8003698:	68bc      	ldr	r4, [r7, #8]
 800369a:	e793      	b.n	80035c4 <setvbuf+0x24>
 800369c:	4b22      	ldr	r3, [pc, #136]	; (8003728 <setvbuf+0x188>)
 800369e:	429c      	cmp	r4, r3
 80036a0:	bf08      	it	eq
 80036a2:	68fc      	ldreq	r4, [r7, #12]
 80036a4:	e78e      	b.n	80035c4 <setvbuf+0x24>
 80036a6:	2e00      	cmp	r6, #0
 80036a8:	d0cd      	beq.n	8003646 <setvbuf+0xa6>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	b913      	cbnz	r3, 80036b4 <setvbuf+0x114>
 80036ae:	4638      	mov	r0, r7
 80036b0:	f000 fab6 	bl	8003c20 <__sinit>
 80036b4:	f1b8 0f01 	cmp.w	r8, #1
 80036b8:	bf08      	it	eq
 80036ba:	89a3      	ldrheq	r3, [r4, #12]
 80036bc:	6026      	str	r6, [r4, #0]
 80036be:	bf04      	itt	eq
 80036c0:	f043 0301 	orreq.w	r3, r3, #1
 80036c4:	81a3      	strheq	r3, [r4, #12]
 80036c6:	89a2      	ldrh	r2, [r4, #12]
 80036c8:	f012 0308 	ands.w	r3, r2, #8
 80036cc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80036d0:	d01c      	beq.n	800370c <setvbuf+0x16c>
 80036d2:	07d3      	lsls	r3, r2, #31
 80036d4:	bf41      	itttt	mi
 80036d6:	2300      	movmi	r3, #0
 80036d8:	426d      	negmi	r5, r5
 80036da:	60a3      	strmi	r3, [r4, #8]
 80036dc:	61a5      	strmi	r5, [r4, #24]
 80036de:	bf58      	it	pl
 80036e0:	60a5      	strpl	r5, [r4, #8]
 80036e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80036e4:	f015 0501 	ands.w	r5, r5, #1
 80036e8:	d115      	bne.n	8003716 <setvbuf+0x176>
 80036ea:	f412 7f00 	tst.w	r2, #512	; 0x200
 80036ee:	e7c8      	b.n	8003682 <setvbuf+0xe2>
 80036f0:	4648      	mov	r0, r9
 80036f2:	f000 fbb7 	bl	8003e64 <malloc>
 80036f6:	4606      	mov	r6, r0
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d0ae      	beq.n	800365a <setvbuf+0xba>
 80036fc:	464d      	mov	r5, r9
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	e7d0      	b.n	80036aa <setvbuf+0x10a>
 8003708:	2500      	movs	r5, #0
 800370a:	e7a8      	b.n	800365e <setvbuf+0xbe>
 800370c:	60a3      	str	r3, [r4, #8]
 800370e:	e7e8      	b.n	80036e2 <setvbuf+0x142>
 8003710:	f04f 35ff 	mov.w	r5, #4294967295
 8003714:	e7b9      	b.n	800368a <setvbuf+0xea>
 8003716:	2500      	movs	r5, #0
 8003718:	e7b7      	b.n	800368a <setvbuf+0xea>
 800371a:	bf00      	nop
 800371c:	2000000c 	.word	0x2000000c
 8003720:	08005f84 	.word	0x08005f84
 8003724:	08005fa4 	.word	0x08005fa4
 8003728:	08005f64 	.word	0x08005f64

0800372c <_strtol_l.constprop.0>:
 800372c:	2b01      	cmp	r3, #1
 800372e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003732:	d001      	beq.n	8003738 <_strtol_l.constprop.0+0xc>
 8003734:	2b24      	cmp	r3, #36	; 0x24
 8003736:	d906      	bls.n	8003746 <_strtol_l.constprop.0+0x1a>
 8003738:	f7ff fe5a 	bl	80033f0 <__errno>
 800373c:	2316      	movs	r3, #22
 800373e:	6003      	str	r3, [r0, #0]
 8003740:	2000      	movs	r0, #0
 8003742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003746:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800382c <_strtol_l.constprop.0+0x100>
 800374a:	460d      	mov	r5, r1
 800374c:	462e      	mov	r6, r5
 800374e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003752:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003756:	f017 0708 	ands.w	r7, r7, #8
 800375a:	d1f7      	bne.n	800374c <_strtol_l.constprop.0+0x20>
 800375c:	2c2d      	cmp	r4, #45	; 0x2d
 800375e:	d132      	bne.n	80037c6 <_strtol_l.constprop.0+0x9a>
 8003760:	782c      	ldrb	r4, [r5, #0]
 8003762:	2701      	movs	r7, #1
 8003764:	1cb5      	adds	r5, r6, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d05b      	beq.n	8003822 <_strtol_l.constprop.0+0xf6>
 800376a:	2b10      	cmp	r3, #16
 800376c:	d109      	bne.n	8003782 <_strtol_l.constprop.0+0x56>
 800376e:	2c30      	cmp	r4, #48	; 0x30
 8003770:	d107      	bne.n	8003782 <_strtol_l.constprop.0+0x56>
 8003772:	782c      	ldrb	r4, [r5, #0]
 8003774:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003778:	2c58      	cmp	r4, #88	; 0x58
 800377a:	d14d      	bne.n	8003818 <_strtol_l.constprop.0+0xec>
 800377c:	786c      	ldrb	r4, [r5, #1]
 800377e:	2310      	movs	r3, #16
 8003780:	3502      	adds	r5, #2
 8003782:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003786:	f108 38ff 	add.w	r8, r8, #4294967295
 800378a:	f04f 0c00 	mov.w	ip, #0
 800378e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003792:	4666      	mov	r6, ip
 8003794:	fb03 8a19 	mls	sl, r3, r9, r8
 8003798:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800379c:	f1be 0f09 	cmp.w	lr, #9
 80037a0:	d816      	bhi.n	80037d0 <_strtol_l.constprop.0+0xa4>
 80037a2:	4674      	mov	r4, lr
 80037a4:	42a3      	cmp	r3, r4
 80037a6:	dd24      	ble.n	80037f2 <_strtol_l.constprop.0+0xc6>
 80037a8:	f1bc 0f00 	cmp.w	ip, #0
 80037ac:	db1e      	blt.n	80037ec <_strtol_l.constprop.0+0xc0>
 80037ae:	45b1      	cmp	r9, r6
 80037b0:	d31c      	bcc.n	80037ec <_strtol_l.constprop.0+0xc0>
 80037b2:	d101      	bne.n	80037b8 <_strtol_l.constprop.0+0x8c>
 80037b4:	45a2      	cmp	sl, r4
 80037b6:	db19      	blt.n	80037ec <_strtol_l.constprop.0+0xc0>
 80037b8:	fb06 4603 	mla	r6, r6, r3, r4
 80037bc:	f04f 0c01 	mov.w	ip, #1
 80037c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80037c4:	e7e8      	b.n	8003798 <_strtol_l.constprop.0+0x6c>
 80037c6:	2c2b      	cmp	r4, #43	; 0x2b
 80037c8:	bf04      	itt	eq
 80037ca:	782c      	ldrbeq	r4, [r5, #0]
 80037cc:	1cb5      	addeq	r5, r6, #2
 80037ce:	e7ca      	b.n	8003766 <_strtol_l.constprop.0+0x3a>
 80037d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80037d4:	f1be 0f19 	cmp.w	lr, #25
 80037d8:	d801      	bhi.n	80037de <_strtol_l.constprop.0+0xb2>
 80037da:	3c37      	subs	r4, #55	; 0x37
 80037dc:	e7e2      	b.n	80037a4 <_strtol_l.constprop.0+0x78>
 80037de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80037e2:	f1be 0f19 	cmp.w	lr, #25
 80037e6:	d804      	bhi.n	80037f2 <_strtol_l.constprop.0+0xc6>
 80037e8:	3c57      	subs	r4, #87	; 0x57
 80037ea:	e7db      	b.n	80037a4 <_strtol_l.constprop.0+0x78>
 80037ec:	f04f 3cff 	mov.w	ip, #4294967295
 80037f0:	e7e6      	b.n	80037c0 <_strtol_l.constprop.0+0x94>
 80037f2:	f1bc 0f00 	cmp.w	ip, #0
 80037f6:	da05      	bge.n	8003804 <_strtol_l.constprop.0+0xd8>
 80037f8:	2322      	movs	r3, #34	; 0x22
 80037fa:	6003      	str	r3, [r0, #0]
 80037fc:	4646      	mov	r6, r8
 80037fe:	b942      	cbnz	r2, 8003812 <_strtol_l.constprop.0+0xe6>
 8003800:	4630      	mov	r0, r6
 8003802:	e79e      	b.n	8003742 <_strtol_l.constprop.0+0x16>
 8003804:	b107      	cbz	r7, 8003808 <_strtol_l.constprop.0+0xdc>
 8003806:	4276      	negs	r6, r6
 8003808:	2a00      	cmp	r2, #0
 800380a:	d0f9      	beq.n	8003800 <_strtol_l.constprop.0+0xd4>
 800380c:	f1bc 0f00 	cmp.w	ip, #0
 8003810:	d000      	beq.n	8003814 <_strtol_l.constprop.0+0xe8>
 8003812:	1e69      	subs	r1, r5, #1
 8003814:	6011      	str	r1, [r2, #0]
 8003816:	e7f3      	b.n	8003800 <_strtol_l.constprop.0+0xd4>
 8003818:	2430      	movs	r4, #48	; 0x30
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1b1      	bne.n	8003782 <_strtol_l.constprop.0+0x56>
 800381e:	2308      	movs	r3, #8
 8003820:	e7af      	b.n	8003782 <_strtol_l.constprop.0+0x56>
 8003822:	2c30      	cmp	r4, #48	; 0x30
 8003824:	d0a5      	beq.n	8003772 <_strtol_l.constprop.0+0x46>
 8003826:	230a      	movs	r3, #10
 8003828:	e7ab      	b.n	8003782 <_strtol_l.constprop.0+0x56>
 800382a:	bf00      	nop
 800382c:	08005e61 	.word	0x08005e61

08003830 <_strtol_r>:
 8003830:	f7ff bf7c 	b.w	800372c <_strtol_l.constprop.0>

08003834 <strtol>:
 8003834:	4613      	mov	r3, r2
 8003836:	460a      	mov	r2, r1
 8003838:	4601      	mov	r1, r0
 800383a:	4802      	ldr	r0, [pc, #8]	; (8003844 <strtol+0x10>)
 800383c:	6800      	ldr	r0, [r0, #0]
 800383e:	f7ff bf75 	b.w	800372c <_strtol_l.constprop.0>
 8003842:	bf00      	nop
 8003844:	2000000c 	.word	0x2000000c

08003848 <__swbuf_r>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	460e      	mov	r6, r1
 800384c:	4614      	mov	r4, r2
 800384e:	4605      	mov	r5, r0
 8003850:	b118      	cbz	r0, 800385a <__swbuf_r+0x12>
 8003852:	6983      	ldr	r3, [r0, #24]
 8003854:	b90b      	cbnz	r3, 800385a <__swbuf_r+0x12>
 8003856:	f000 f9e3 	bl	8003c20 <__sinit>
 800385a:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <__swbuf_r+0x98>)
 800385c:	429c      	cmp	r4, r3
 800385e:	d12b      	bne.n	80038b8 <__swbuf_r+0x70>
 8003860:	686c      	ldr	r4, [r5, #4]
 8003862:	69a3      	ldr	r3, [r4, #24]
 8003864:	60a3      	str	r3, [r4, #8]
 8003866:	89a3      	ldrh	r3, [r4, #12]
 8003868:	071a      	lsls	r2, r3, #28
 800386a:	d52f      	bpl.n	80038cc <__swbuf_r+0x84>
 800386c:	6923      	ldr	r3, [r4, #16]
 800386e:	b36b      	cbz	r3, 80038cc <__swbuf_r+0x84>
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	6820      	ldr	r0, [r4, #0]
 8003874:	1ac0      	subs	r0, r0, r3
 8003876:	6963      	ldr	r3, [r4, #20]
 8003878:	b2f6      	uxtb	r6, r6
 800387a:	4283      	cmp	r3, r0
 800387c:	4637      	mov	r7, r6
 800387e:	dc04      	bgt.n	800388a <__swbuf_r+0x42>
 8003880:	4621      	mov	r1, r4
 8003882:	4628      	mov	r0, r5
 8003884:	f000 f926 	bl	8003ad4 <_fflush_r>
 8003888:	bb30      	cbnz	r0, 80038d8 <__swbuf_r+0x90>
 800388a:	68a3      	ldr	r3, [r4, #8]
 800388c:	3b01      	subs	r3, #1
 800388e:	60a3      	str	r3, [r4, #8]
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	6022      	str	r2, [r4, #0]
 8003896:	701e      	strb	r6, [r3, #0]
 8003898:	6963      	ldr	r3, [r4, #20]
 800389a:	3001      	adds	r0, #1
 800389c:	4283      	cmp	r3, r0
 800389e:	d004      	beq.n	80038aa <__swbuf_r+0x62>
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	07db      	lsls	r3, r3, #31
 80038a4:	d506      	bpl.n	80038b4 <__swbuf_r+0x6c>
 80038a6:	2e0a      	cmp	r6, #10
 80038a8:	d104      	bne.n	80038b4 <__swbuf_r+0x6c>
 80038aa:	4621      	mov	r1, r4
 80038ac:	4628      	mov	r0, r5
 80038ae:	f000 f911 	bl	8003ad4 <_fflush_r>
 80038b2:	b988      	cbnz	r0, 80038d8 <__swbuf_r+0x90>
 80038b4:	4638      	mov	r0, r7
 80038b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <__swbuf_r+0x9c>)
 80038ba:	429c      	cmp	r4, r3
 80038bc:	d101      	bne.n	80038c2 <__swbuf_r+0x7a>
 80038be:	68ac      	ldr	r4, [r5, #8]
 80038c0:	e7cf      	b.n	8003862 <__swbuf_r+0x1a>
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <__swbuf_r+0xa0>)
 80038c4:	429c      	cmp	r4, r3
 80038c6:	bf08      	it	eq
 80038c8:	68ec      	ldreq	r4, [r5, #12]
 80038ca:	e7ca      	b.n	8003862 <__swbuf_r+0x1a>
 80038cc:	4621      	mov	r1, r4
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 f80c 	bl	80038ec <__swsetup_r>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d0cb      	beq.n	8003870 <__swbuf_r+0x28>
 80038d8:	f04f 37ff 	mov.w	r7, #4294967295
 80038dc:	e7ea      	b.n	80038b4 <__swbuf_r+0x6c>
 80038de:	bf00      	nop
 80038e0:	08005f84 	.word	0x08005f84
 80038e4:	08005fa4 	.word	0x08005fa4
 80038e8:	08005f64 	.word	0x08005f64

080038ec <__swsetup_r>:
 80038ec:	4b32      	ldr	r3, [pc, #200]	; (80039b8 <__swsetup_r+0xcc>)
 80038ee:	b570      	push	{r4, r5, r6, lr}
 80038f0:	681d      	ldr	r5, [r3, #0]
 80038f2:	4606      	mov	r6, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	b125      	cbz	r5, 8003902 <__swsetup_r+0x16>
 80038f8:	69ab      	ldr	r3, [r5, #24]
 80038fa:	b913      	cbnz	r3, 8003902 <__swsetup_r+0x16>
 80038fc:	4628      	mov	r0, r5
 80038fe:	f000 f98f 	bl	8003c20 <__sinit>
 8003902:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <__swsetup_r+0xd0>)
 8003904:	429c      	cmp	r4, r3
 8003906:	d10f      	bne.n	8003928 <__swsetup_r+0x3c>
 8003908:	686c      	ldr	r4, [r5, #4]
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003910:	0719      	lsls	r1, r3, #28
 8003912:	d42c      	bmi.n	800396e <__swsetup_r+0x82>
 8003914:	06dd      	lsls	r5, r3, #27
 8003916:	d411      	bmi.n	800393c <__swsetup_r+0x50>
 8003918:	2309      	movs	r3, #9
 800391a:	6033      	str	r3, [r6, #0]
 800391c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003920:	81a3      	strh	r3, [r4, #12]
 8003922:	f04f 30ff 	mov.w	r0, #4294967295
 8003926:	e03e      	b.n	80039a6 <__swsetup_r+0xba>
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <__swsetup_r+0xd4>)
 800392a:	429c      	cmp	r4, r3
 800392c:	d101      	bne.n	8003932 <__swsetup_r+0x46>
 800392e:	68ac      	ldr	r4, [r5, #8]
 8003930:	e7eb      	b.n	800390a <__swsetup_r+0x1e>
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <__swsetup_r+0xd8>)
 8003934:	429c      	cmp	r4, r3
 8003936:	bf08      	it	eq
 8003938:	68ec      	ldreq	r4, [r5, #12]
 800393a:	e7e6      	b.n	800390a <__swsetup_r+0x1e>
 800393c:	0758      	lsls	r0, r3, #29
 800393e:	d512      	bpl.n	8003966 <__swsetup_r+0x7a>
 8003940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003942:	b141      	cbz	r1, 8003956 <__swsetup_r+0x6a>
 8003944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003948:	4299      	cmp	r1, r3
 800394a:	d002      	beq.n	8003952 <__swsetup_r+0x66>
 800394c:	4630      	mov	r0, r6
 800394e:	f000 fa91 	bl	8003e74 <_free_r>
 8003952:	2300      	movs	r3, #0
 8003954:	6363      	str	r3, [r4, #52]	; 0x34
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800395c:	81a3      	strh	r3, [r4, #12]
 800395e:	2300      	movs	r3, #0
 8003960:	6063      	str	r3, [r4, #4]
 8003962:	6923      	ldr	r3, [r4, #16]
 8003964:	6023      	str	r3, [r4, #0]
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	81a3      	strh	r3, [r4, #12]
 800396e:	6923      	ldr	r3, [r4, #16]
 8003970:	b94b      	cbnz	r3, 8003986 <__swsetup_r+0x9a>
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397c:	d003      	beq.n	8003986 <__swsetup_r+0x9a>
 800397e:	4621      	mov	r1, r4
 8003980:	4630      	mov	r0, r6
 8003982:	f000 fa2f 	bl	8003de4 <__smakebuf_r>
 8003986:	89a0      	ldrh	r0, [r4, #12]
 8003988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800398c:	f010 0301 	ands.w	r3, r0, #1
 8003990:	d00a      	beq.n	80039a8 <__swsetup_r+0xbc>
 8003992:	2300      	movs	r3, #0
 8003994:	60a3      	str	r3, [r4, #8]
 8003996:	6963      	ldr	r3, [r4, #20]
 8003998:	425b      	negs	r3, r3
 800399a:	61a3      	str	r3, [r4, #24]
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	b943      	cbnz	r3, 80039b2 <__swsetup_r+0xc6>
 80039a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039a4:	d1ba      	bne.n	800391c <__swsetup_r+0x30>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	0781      	lsls	r1, r0, #30
 80039aa:	bf58      	it	pl
 80039ac:	6963      	ldrpl	r3, [r4, #20]
 80039ae:	60a3      	str	r3, [r4, #8]
 80039b0:	e7f4      	b.n	800399c <__swsetup_r+0xb0>
 80039b2:	2000      	movs	r0, #0
 80039b4:	e7f7      	b.n	80039a6 <__swsetup_r+0xba>
 80039b6:	bf00      	nop
 80039b8:	2000000c 	.word	0x2000000c
 80039bc:	08005f84 	.word	0x08005f84
 80039c0:	08005fa4 	.word	0x08005fa4
 80039c4:	08005f64 	.word	0x08005f64

080039c8 <__sflush_r>:
 80039c8:	898a      	ldrh	r2, [r1, #12]
 80039ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ce:	4605      	mov	r5, r0
 80039d0:	0710      	lsls	r0, r2, #28
 80039d2:	460c      	mov	r4, r1
 80039d4:	d458      	bmi.n	8003a88 <__sflush_r+0xc0>
 80039d6:	684b      	ldr	r3, [r1, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	dc05      	bgt.n	80039e8 <__sflush_r+0x20>
 80039dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	dc02      	bgt.n	80039e8 <__sflush_r+0x20>
 80039e2:	2000      	movs	r0, #0
 80039e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039ea:	2e00      	cmp	r6, #0
 80039ec:	d0f9      	beq.n	80039e2 <__sflush_r+0x1a>
 80039ee:	2300      	movs	r3, #0
 80039f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039f4:	682f      	ldr	r7, [r5, #0]
 80039f6:	602b      	str	r3, [r5, #0]
 80039f8:	d032      	beq.n	8003a60 <__sflush_r+0x98>
 80039fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	075a      	lsls	r2, r3, #29
 8003a00:	d505      	bpl.n	8003a0e <__sflush_r+0x46>
 8003a02:	6863      	ldr	r3, [r4, #4]
 8003a04:	1ac0      	subs	r0, r0, r3
 8003a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a08:	b10b      	cbz	r3, 8003a0e <__sflush_r+0x46>
 8003a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a0c:	1ac0      	subs	r0, r0, r3
 8003a0e:	2300      	movs	r3, #0
 8003a10:	4602      	mov	r2, r0
 8003a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a14:	6a21      	ldr	r1, [r4, #32]
 8003a16:	4628      	mov	r0, r5
 8003a18:	47b0      	blx	r6
 8003a1a:	1c43      	adds	r3, r0, #1
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	d106      	bne.n	8003a2e <__sflush_r+0x66>
 8003a20:	6829      	ldr	r1, [r5, #0]
 8003a22:	291d      	cmp	r1, #29
 8003a24:	d82c      	bhi.n	8003a80 <__sflush_r+0xb8>
 8003a26:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <__sflush_r+0x108>)
 8003a28:	40ca      	lsrs	r2, r1
 8003a2a:	07d6      	lsls	r6, r2, #31
 8003a2c:	d528      	bpl.n	8003a80 <__sflush_r+0xb8>
 8003a2e:	2200      	movs	r2, #0
 8003a30:	6062      	str	r2, [r4, #4]
 8003a32:	04d9      	lsls	r1, r3, #19
 8003a34:	6922      	ldr	r2, [r4, #16]
 8003a36:	6022      	str	r2, [r4, #0]
 8003a38:	d504      	bpl.n	8003a44 <__sflush_r+0x7c>
 8003a3a:	1c42      	adds	r2, r0, #1
 8003a3c:	d101      	bne.n	8003a42 <__sflush_r+0x7a>
 8003a3e:	682b      	ldr	r3, [r5, #0]
 8003a40:	b903      	cbnz	r3, 8003a44 <__sflush_r+0x7c>
 8003a42:	6560      	str	r0, [r4, #84]	; 0x54
 8003a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a46:	602f      	str	r7, [r5, #0]
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d0ca      	beq.n	80039e2 <__sflush_r+0x1a>
 8003a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a50:	4299      	cmp	r1, r3
 8003a52:	d002      	beq.n	8003a5a <__sflush_r+0x92>
 8003a54:	4628      	mov	r0, r5
 8003a56:	f000 fa0d 	bl	8003e74 <_free_r>
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8003a5e:	e7c1      	b.n	80039e4 <__sflush_r+0x1c>
 8003a60:	6a21      	ldr	r1, [r4, #32]
 8003a62:	2301      	movs	r3, #1
 8003a64:	4628      	mov	r0, r5
 8003a66:	47b0      	blx	r6
 8003a68:	1c41      	adds	r1, r0, #1
 8003a6a:	d1c7      	bne.n	80039fc <__sflush_r+0x34>
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0c4      	beq.n	80039fc <__sflush_r+0x34>
 8003a72:	2b1d      	cmp	r3, #29
 8003a74:	d001      	beq.n	8003a7a <__sflush_r+0xb2>
 8003a76:	2b16      	cmp	r3, #22
 8003a78:	d101      	bne.n	8003a7e <__sflush_r+0xb6>
 8003a7a:	602f      	str	r7, [r5, #0]
 8003a7c:	e7b1      	b.n	80039e2 <__sflush_r+0x1a>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a84:	81a3      	strh	r3, [r4, #12]
 8003a86:	e7ad      	b.n	80039e4 <__sflush_r+0x1c>
 8003a88:	690f      	ldr	r7, [r1, #16]
 8003a8a:	2f00      	cmp	r7, #0
 8003a8c:	d0a9      	beq.n	80039e2 <__sflush_r+0x1a>
 8003a8e:	0793      	lsls	r3, r2, #30
 8003a90:	680e      	ldr	r6, [r1, #0]
 8003a92:	bf08      	it	eq
 8003a94:	694b      	ldreq	r3, [r1, #20]
 8003a96:	600f      	str	r7, [r1, #0]
 8003a98:	bf18      	it	ne
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	eba6 0807 	sub.w	r8, r6, r7
 8003aa0:	608b      	str	r3, [r1, #8]
 8003aa2:	f1b8 0f00 	cmp.w	r8, #0
 8003aa6:	dd9c      	ble.n	80039e2 <__sflush_r+0x1a>
 8003aa8:	6a21      	ldr	r1, [r4, #32]
 8003aaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003aac:	4643      	mov	r3, r8
 8003aae:	463a      	mov	r2, r7
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	47b0      	blx	r6
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	dc06      	bgt.n	8003ac6 <__sflush_r+0xfe>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003abe:	81a3      	strh	r3, [r4, #12]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	e78e      	b.n	80039e4 <__sflush_r+0x1c>
 8003ac6:	4407      	add	r7, r0
 8003ac8:	eba8 0800 	sub.w	r8, r8, r0
 8003acc:	e7e9      	b.n	8003aa2 <__sflush_r+0xda>
 8003ace:	bf00      	nop
 8003ad0:	20400001 	.word	0x20400001

08003ad4 <_fflush_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	690b      	ldr	r3, [r1, #16]
 8003ad8:	4605      	mov	r5, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	b913      	cbnz	r3, 8003ae4 <_fflush_r+0x10>
 8003ade:	2500      	movs	r5, #0
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	b118      	cbz	r0, 8003aee <_fflush_r+0x1a>
 8003ae6:	6983      	ldr	r3, [r0, #24]
 8003ae8:	b90b      	cbnz	r3, 8003aee <_fflush_r+0x1a>
 8003aea:	f000 f899 	bl	8003c20 <__sinit>
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <_fflush_r+0x6c>)
 8003af0:	429c      	cmp	r4, r3
 8003af2:	d11b      	bne.n	8003b2c <_fflush_r+0x58>
 8003af4:	686c      	ldr	r4, [r5, #4]
 8003af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ef      	beq.n	8003ade <_fflush_r+0xa>
 8003afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b00:	07d0      	lsls	r0, r2, #31
 8003b02:	d404      	bmi.n	8003b0e <_fflush_r+0x3a>
 8003b04:	0599      	lsls	r1, r3, #22
 8003b06:	d402      	bmi.n	8003b0e <_fflush_r+0x3a>
 8003b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b0a:	f000 f944 	bl	8003d96 <__retarget_lock_acquire_recursive>
 8003b0e:	4628      	mov	r0, r5
 8003b10:	4621      	mov	r1, r4
 8003b12:	f7ff ff59 	bl	80039c8 <__sflush_r>
 8003b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b18:	07da      	lsls	r2, r3, #31
 8003b1a:	4605      	mov	r5, r0
 8003b1c:	d4e0      	bmi.n	8003ae0 <_fflush_r+0xc>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	059b      	lsls	r3, r3, #22
 8003b22:	d4dd      	bmi.n	8003ae0 <_fflush_r+0xc>
 8003b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b26:	f000 f937 	bl	8003d98 <__retarget_lock_release_recursive>
 8003b2a:	e7d9      	b.n	8003ae0 <_fflush_r+0xc>
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <_fflush_r+0x70>)
 8003b2e:	429c      	cmp	r4, r3
 8003b30:	d101      	bne.n	8003b36 <_fflush_r+0x62>
 8003b32:	68ac      	ldr	r4, [r5, #8]
 8003b34:	e7df      	b.n	8003af6 <_fflush_r+0x22>
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <_fflush_r+0x74>)
 8003b38:	429c      	cmp	r4, r3
 8003b3a:	bf08      	it	eq
 8003b3c:	68ec      	ldreq	r4, [r5, #12]
 8003b3e:	e7da      	b.n	8003af6 <_fflush_r+0x22>
 8003b40:	08005f84 	.word	0x08005f84
 8003b44:	08005fa4 	.word	0x08005fa4
 8003b48:	08005f64 	.word	0x08005f64

08003b4c <fflush>:
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	b920      	cbnz	r0, 8003b5a <fflush+0xe>
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <fflush+0x18>)
 8003b52:	4905      	ldr	r1, [pc, #20]	; (8003b68 <fflush+0x1c>)
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	f000 b8fe 	b.w	8003d56 <_fwalk_reent>
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <fflush+0x20>)
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	f7ff bfb9 	b.w	8003ad4 <_fflush_r>
 8003b62:	bf00      	nop
 8003b64:	08005e5c 	.word	0x08005e5c
 8003b68:	08003ad5 	.word	0x08003ad5
 8003b6c:	2000000c 	.word	0x2000000c

08003b70 <std>:
 8003b70:	2300      	movs	r3, #0
 8003b72:	b510      	push	{r4, lr}
 8003b74:	4604      	mov	r4, r0
 8003b76:	e9c0 3300 	strd	r3, r3, [r0]
 8003b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b7e:	6083      	str	r3, [r0, #8]
 8003b80:	8181      	strh	r1, [r0, #12]
 8003b82:	6643      	str	r3, [r0, #100]	; 0x64
 8003b84:	81c2      	strh	r2, [r0, #14]
 8003b86:	6183      	str	r3, [r0, #24]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	305c      	adds	r0, #92	; 0x5c
 8003b8e:	f7ff fc59 	bl	8003444 <memset>
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <std+0x38>)
 8003b94:	6263      	str	r3, [r4, #36]	; 0x24
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <std+0x3c>)
 8003b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <std+0x40>)
 8003b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b9e:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <std+0x44>)
 8003ba0:	6224      	str	r4, [r4, #32]
 8003ba2:	6323      	str	r3, [r4, #48]	; 0x30
 8003ba4:	bd10      	pop	{r4, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08004e09 	.word	0x08004e09
 8003bac:	08004e2b 	.word	0x08004e2b
 8003bb0:	08004e63 	.word	0x08004e63
 8003bb4:	08004e87 	.word	0x08004e87

08003bb8 <_cleanup_r>:
 8003bb8:	4901      	ldr	r1, [pc, #4]	; (8003bc0 <_cleanup_r+0x8>)
 8003bba:	f000 b8cc 	b.w	8003d56 <_fwalk_reent>
 8003bbe:	bf00      	nop
 8003bc0:	08003ad5 	.word	0x08003ad5

08003bc4 <__sfmoreglue>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	2268      	movs	r2, #104	; 0x68
 8003bc8:	1e4d      	subs	r5, r1, #1
 8003bca:	4355      	muls	r5, r2
 8003bcc:	460e      	mov	r6, r1
 8003bce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bd2:	f000 f9bb 	bl	8003f4c <_malloc_r>
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	b140      	cbz	r0, 8003bec <__sfmoreglue+0x28>
 8003bda:	2100      	movs	r1, #0
 8003bdc:	e9c0 1600 	strd	r1, r6, [r0]
 8003be0:	300c      	adds	r0, #12
 8003be2:	60a0      	str	r0, [r4, #8]
 8003be4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003be8:	f7ff fc2c 	bl	8003444 <memset>
 8003bec:	4620      	mov	r0, r4
 8003bee:	bd70      	pop	{r4, r5, r6, pc}

08003bf0 <__sfp_lock_acquire>:
 8003bf0:	4801      	ldr	r0, [pc, #4]	; (8003bf8 <__sfp_lock_acquire+0x8>)
 8003bf2:	f000 b8d0 	b.w	8003d96 <__retarget_lock_acquire_recursive>
 8003bf6:	bf00      	nop
 8003bf8:	20000121 	.word	0x20000121

08003bfc <__sfp_lock_release>:
 8003bfc:	4801      	ldr	r0, [pc, #4]	; (8003c04 <__sfp_lock_release+0x8>)
 8003bfe:	f000 b8cb 	b.w	8003d98 <__retarget_lock_release_recursive>
 8003c02:	bf00      	nop
 8003c04:	20000121 	.word	0x20000121

08003c08 <__sinit_lock_acquire>:
 8003c08:	4801      	ldr	r0, [pc, #4]	; (8003c10 <__sinit_lock_acquire+0x8>)
 8003c0a:	f000 b8c4 	b.w	8003d96 <__retarget_lock_acquire_recursive>
 8003c0e:	bf00      	nop
 8003c10:	20000122 	.word	0x20000122

08003c14 <__sinit_lock_release>:
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <__sinit_lock_release+0x8>)
 8003c16:	f000 b8bf 	b.w	8003d98 <__retarget_lock_release_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	20000122 	.word	0x20000122

08003c20 <__sinit>:
 8003c20:	b510      	push	{r4, lr}
 8003c22:	4604      	mov	r4, r0
 8003c24:	f7ff fff0 	bl	8003c08 <__sinit_lock_acquire>
 8003c28:	69a3      	ldr	r3, [r4, #24]
 8003c2a:	b11b      	cbz	r3, 8003c34 <__sinit+0x14>
 8003c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c30:	f7ff bff0 	b.w	8003c14 <__sinit_lock_release>
 8003c34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c38:	6523      	str	r3, [r4, #80]	; 0x50
 8003c3a:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <__sinit+0x68>)
 8003c3c:	4a13      	ldr	r2, [pc, #76]	; (8003c8c <__sinit+0x6c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c42:	42a3      	cmp	r3, r4
 8003c44:	bf04      	itt	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	61a3      	streq	r3, [r4, #24]
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f000 f820 	bl	8003c90 <__sfp>
 8003c50:	6060      	str	r0, [r4, #4]
 8003c52:	4620      	mov	r0, r4
 8003c54:	f000 f81c 	bl	8003c90 <__sfp>
 8003c58:	60a0      	str	r0, [r4, #8]
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 f818 	bl	8003c90 <__sfp>
 8003c60:	2200      	movs	r2, #0
 8003c62:	60e0      	str	r0, [r4, #12]
 8003c64:	2104      	movs	r1, #4
 8003c66:	6860      	ldr	r0, [r4, #4]
 8003c68:	f7ff ff82 	bl	8003b70 <std>
 8003c6c:	68a0      	ldr	r0, [r4, #8]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	2109      	movs	r1, #9
 8003c72:	f7ff ff7d 	bl	8003b70 <std>
 8003c76:	68e0      	ldr	r0, [r4, #12]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	2112      	movs	r1, #18
 8003c7c:	f7ff ff78 	bl	8003b70 <std>
 8003c80:	2301      	movs	r3, #1
 8003c82:	61a3      	str	r3, [r4, #24]
 8003c84:	e7d2      	b.n	8003c2c <__sinit+0xc>
 8003c86:	bf00      	nop
 8003c88:	08005e5c 	.word	0x08005e5c
 8003c8c:	08003bb9 	.word	0x08003bb9

08003c90 <__sfp>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	4607      	mov	r7, r0
 8003c94:	f7ff ffac 	bl	8003bf0 <__sfp_lock_acquire>
 8003c98:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <__sfp+0x84>)
 8003c9a:	681e      	ldr	r6, [r3, #0]
 8003c9c:	69b3      	ldr	r3, [r6, #24]
 8003c9e:	b913      	cbnz	r3, 8003ca6 <__sfp+0x16>
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f7ff ffbd 	bl	8003c20 <__sinit>
 8003ca6:	3648      	adds	r6, #72	; 0x48
 8003ca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	d503      	bpl.n	8003cb8 <__sfp+0x28>
 8003cb0:	6833      	ldr	r3, [r6, #0]
 8003cb2:	b30b      	cbz	r3, 8003cf8 <__sfp+0x68>
 8003cb4:	6836      	ldr	r6, [r6, #0]
 8003cb6:	e7f7      	b.n	8003ca8 <__sfp+0x18>
 8003cb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cbc:	b9d5      	cbnz	r5, 8003cf4 <__sfp+0x64>
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <__sfp+0x88>)
 8003cc0:	60e3      	str	r3, [r4, #12]
 8003cc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cc6:	6665      	str	r5, [r4, #100]	; 0x64
 8003cc8:	f000 f864 	bl	8003d94 <__retarget_lock_init_recursive>
 8003ccc:	f7ff ff96 	bl	8003bfc <__sfp_lock_release>
 8003cd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003cd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003cd8:	6025      	str	r5, [r4, #0]
 8003cda:	61a5      	str	r5, [r4, #24]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	4629      	mov	r1, r5
 8003ce0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ce4:	f7ff fbae 	bl	8003444 <memset>
 8003ce8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003cec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf4:	3468      	adds	r4, #104	; 0x68
 8003cf6:	e7d9      	b.n	8003cac <__sfp+0x1c>
 8003cf8:	2104      	movs	r1, #4
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	f7ff ff62 	bl	8003bc4 <__sfmoreglue>
 8003d00:	4604      	mov	r4, r0
 8003d02:	6030      	str	r0, [r6, #0]
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d1d5      	bne.n	8003cb4 <__sfp+0x24>
 8003d08:	f7ff ff78 	bl	8003bfc <__sfp_lock_release>
 8003d0c:	230c      	movs	r3, #12
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	e7ee      	b.n	8003cf0 <__sfp+0x60>
 8003d12:	bf00      	nop
 8003d14:	08005e5c 	.word	0x08005e5c
 8003d18:	ffff0001 	.word	0xffff0001

08003d1c <_fwalk>:
 8003d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d20:	460f      	mov	r7, r1
 8003d22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d26:	2600      	movs	r6, #0
 8003d28:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8003d2c:	f1b8 0801 	subs.w	r8, r8, #1
 8003d30:	d505      	bpl.n	8003d3e <_fwalk+0x22>
 8003d32:	6824      	ldr	r4, [r4, #0]
 8003d34:	2c00      	cmp	r4, #0
 8003d36:	d1f7      	bne.n	8003d28 <_fwalk+0xc>
 8003d38:	4630      	mov	r0, r6
 8003d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d3e:	89ab      	ldrh	r3, [r5, #12]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d906      	bls.n	8003d52 <_fwalk+0x36>
 8003d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	d002      	beq.n	8003d52 <_fwalk+0x36>
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	47b8      	blx	r7
 8003d50:	4306      	orrs	r6, r0
 8003d52:	3568      	adds	r5, #104	; 0x68
 8003d54:	e7ea      	b.n	8003d2c <_fwalk+0x10>

08003d56 <_fwalk_reent>:
 8003d56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	4688      	mov	r8, r1
 8003d5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d62:	2700      	movs	r7, #0
 8003d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d68:	f1b9 0901 	subs.w	r9, r9, #1
 8003d6c:	d505      	bpl.n	8003d7a <_fwalk_reent+0x24>
 8003d6e:	6824      	ldr	r4, [r4, #0]
 8003d70:	2c00      	cmp	r4, #0
 8003d72:	d1f7      	bne.n	8003d64 <_fwalk_reent+0xe>
 8003d74:	4638      	mov	r0, r7
 8003d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d7a:	89ab      	ldrh	r3, [r5, #12]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d907      	bls.n	8003d90 <_fwalk_reent+0x3a>
 8003d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d84:	3301      	adds	r3, #1
 8003d86:	d003      	beq.n	8003d90 <_fwalk_reent+0x3a>
 8003d88:	4629      	mov	r1, r5
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	47c0      	blx	r8
 8003d8e:	4307      	orrs	r7, r0
 8003d90:	3568      	adds	r5, #104	; 0x68
 8003d92:	e7e9      	b.n	8003d68 <_fwalk_reent+0x12>

08003d94 <__retarget_lock_init_recursive>:
 8003d94:	4770      	bx	lr

08003d96 <__retarget_lock_acquire_recursive>:
 8003d96:	4770      	bx	lr

08003d98 <__retarget_lock_release_recursive>:
 8003d98:	4770      	bx	lr

08003d9a <__swhatbuf_r>:
 8003d9a:	b570      	push	{r4, r5, r6, lr}
 8003d9c:	460e      	mov	r6, r1
 8003d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da2:	2900      	cmp	r1, #0
 8003da4:	b096      	sub	sp, #88	; 0x58
 8003da6:	4614      	mov	r4, r2
 8003da8:	461d      	mov	r5, r3
 8003daa:	da08      	bge.n	8003dbe <__swhatbuf_r+0x24>
 8003dac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	602a      	str	r2, [r5, #0]
 8003db4:	061a      	lsls	r2, r3, #24
 8003db6:	d410      	bmi.n	8003dda <__swhatbuf_r+0x40>
 8003db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dbc:	e00e      	b.n	8003ddc <__swhatbuf_r+0x42>
 8003dbe:	466a      	mov	r2, sp
 8003dc0:	f001 f9ce 	bl	8005160 <_fstat_r>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	dbf1      	blt.n	8003dac <__swhatbuf_r+0x12>
 8003dc8:	9a01      	ldr	r2, [sp, #4]
 8003dca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003dce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003dd2:	425a      	negs	r2, r3
 8003dd4:	415a      	adcs	r2, r3
 8003dd6:	602a      	str	r2, [r5, #0]
 8003dd8:	e7ee      	b.n	8003db8 <__swhatbuf_r+0x1e>
 8003dda:	2340      	movs	r3, #64	; 0x40
 8003ddc:	2000      	movs	r0, #0
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	b016      	add	sp, #88	; 0x58
 8003de2:	bd70      	pop	{r4, r5, r6, pc}

08003de4 <__smakebuf_r>:
 8003de4:	898b      	ldrh	r3, [r1, #12]
 8003de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003de8:	079d      	lsls	r5, r3, #30
 8003dea:	4606      	mov	r6, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	d507      	bpl.n	8003e00 <__smakebuf_r+0x1c>
 8003df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	2301      	movs	r3, #1
 8003dfa:	6163      	str	r3, [r4, #20]
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	ab01      	add	r3, sp, #4
 8003e02:	466a      	mov	r2, sp
 8003e04:	f7ff ffc9 	bl	8003d9a <__swhatbuf_r>
 8003e08:	9900      	ldr	r1, [sp, #0]
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f000 f89d 	bl	8003f4c <_malloc_r>
 8003e12:	b948      	cbnz	r0, 8003e28 <__smakebuf_r+0x44>
 8003e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e18:	059a      	lsls	r2, r3, #22
 8003e1a:	d4ef      	bmi.n	8003dfc <__smakebuf_r+0x18>
 8003e1c:	f023 0303 	bic.w	r3, r3, #3
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	e7e3      	b.n	8003df0 <__smakebuf_r+0xc>
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <__smakebuf_r+0x7c>)
 8003e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	6020      	str	r0, [r4, #0]
 8003e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e34:	81a3      	strh	r3, [r4, #12]
 8003e36:	9b00      	ldr	r3, [sp, #0]
 8003e38:	6163      	str	r3, [r4, #20]
 8003e3a:	9b01      	ldr	r3, [sp, #4]
 8003e3c:	6120      	str	r0, [r4, #16]
 8003e3e:	b15b      	cbz	r3, 8003e58 <__smakebuf_r+0x74>
 8003e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e44:	4630      	mov	r0, r6
 8003e46:	f001 f99d 	bl	8005184 <_isatty_r>
 8003e4a:	b128      	cbz	r0, 8003e58 <__smakebuf_r+0x74>
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	81a3      	strh	r3, [r4, #12]
 8003e58:	89a0      	ldrh	r0, [r4, #12]
 8003e5a:	4305      	orrs	r5, r0
 8003e5c:	81a5      	strh	r5, [r4, #12]
 8003e5e:	e7cd      	b.n	8003dfc <__smakebuf_r+0x18>
 8003e60:	08003bb9 	.word	0x08003bb9

08003e64 <malloc>:
 8003e64:	4b02      	ldr	r3, [pc, #8]	; (8003e70 <malloc+0xc>)
 8003e66:	4601      	mov	r1, r0
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	f000 b86f 	b.w	8003f4c <_malloc_r>
 8003e6e:	bf00      	nop
 8003e70:	2000000c 	.word	0x2000000c

08003e74 <_free_r>:
 8003e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e76:	2900      	cmp	r1, #0
 8003e78:	d044      	beq.n	8003f04 <_free_r+0x90>
 8003e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e7e:	9001      	str	r0, [sp, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f1a1 0404 	sub.w	r4, r1, #4
 8003e86:	bfb8      	it	lt
 8003e88:	18e4      	addlt	r4, r4, r3
 8003e8a:	f001 f9ab 	bl	80051e4 <__malloc_lock>
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <_free_r+0x94>)
 8003e90:	9801      	ldr	r0, [sp, #4]
 8003e92:	6813      	ldr	r3, [r2, #0]
 8003e94:	b933      	cbnz	r3, 8003ea4 <_free_r+0x30>
 8003e96:	6063      	str	r3, [r4, #4]
 8003e98:	6014      	str	r4, [r2, #0]
 8003e9a:	b003      	add	sp, #12
 8003e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ea0:	f001 b9a6 	b.w	80051f0 <__malloc_unlock>
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	d908      	bls.n	8003eba <_free_r+0x46>
 8003ea8:	6825      	ldr	r5, [r4, #0]
 8003eaa:	1961      	adds	r1, r4, r5
 8003eac:	428b      	cmp	r3, r1
 8003eae:	bf01      	itttt	eq
 8003eb0:	6819      	ldreq	r1, [r3, #0]
 8003eb2:	685b      	ldreq	r3, [r3, #4]
 8003eb4:	1949      	addeq	r1, r1, r5
 8003eb6:	6021      	streq	r1, [r4, #0]
 8003eb8:	e7ed      	b.n	8003e96 <_free_r+0x22>
 8003eba:	461a      	mov	r2, r3
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	b10b      	cbz	r3, 8003ec4 <_free_r+0x50>
 8003ec0:	42a3      	cmp	r3, r4
 8003ec2:	d9fa      	bls.n	8003eba <_free_r+0x46>
 8003ec4:	6811      	ldr	r1, [r2, #0]
 8003ec6:	1855      	adds	r5, r2, r1
 8003ec8:	42a5      	cmp	r5, r4
 8003eca:	d10b      	bne.n	8003ee4 <_free_r+0x70>
 8003ecc:	6824      	ldr	r4, [r4, #0]
 8003ece:	4421      	add	r1, r4
 8003ed0:	1854      	adds	r4, r2, r1
 8003ed2:	42a3      	cmp	r3, r4
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	d1e0      	bne.n	8003e9a <_free_r+0x26>
 8003ed8:	681c      	ldr	r4, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	6053      	str	r3, [r2, #4]
 8003ede:	4421      	add	r1, r4
 8003ee0:	6011      	str	r1, [r2, #0]
 8003ee2:	e7da      	b.n	8003e9a <_free_r+0x26>
 8003ee4:	d902      	bls.n	8003eec <_free_r+0x78>
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	6003      	str	r3, [r0, #0]
 8003eea:	e7d6      	b.n	8003e9a <_free_r+0x26>
 8003eec:	6825      	ldr	r5, [r4, #0]
 8003eee:	1961      	adds	r1, r4, r5
 8003ef0:	428b      	cmp	r3, r1
 8003ef2:	bf04      	itt	eq
 8003ef4:	6819      	ldreq	r1, [r3, #0]
 8003ef6:	685b      	ldreq	r3, [r3, #4]
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	bf04      	itt	eq
 8003efc:	1949      	addeq	r1, r1, r5
 8003efe:	6021      	streq	r1, [r4, #0]
 8003f00:	6054      	str	r4, [r2, #4]
 8003f02:	e7ca      	b.n	8003e9a <_free_r+0x26>
 8003f04:	b003      	add	sp, #12
 8003f06:	bd30      	pop	{r4, r5, pc}
 8003f08:	20000124 	.word	0x20000124

08003f0c <sbrk_aligned>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	4e0e      	ldr	r6, [pc, #56]	; (8003f48 <sbrk_aligned+0x3c>)
 8003f10:	460c      	mov	r4, r1
 8003f12:	6831      	ldr	r1, [r6, #0]
 8003f14:	4605      	mov	r5, r0
 8003f16:	b911      	cbnz	r1, 8003f1e <sbrk_aligned+0x12>
 8003f18:	f000 ff2e 	bl	8004d78 <_sbrk_r>
 8003f1c:	6030      	str	r0, [r6, #0]
 8003f1e:	4621      	mov	r1, r4
 8003f20:	4628      	mov	r0, r5
 8003f22:	f000 ff29 	bl	8004d78 <_sbrk_r>
 8003f26:	1c43      	adds	r3, r0, #1
 8003f28:	d00a      	beq.n	8003f40 <sbrk_aligned+0x34>
 8003f2a:	1cc4      	adds	r4, r0, #3
 8003f2c:	f024 0403 	bic.w	r4, r4, #3
 8003f30:	42a0      	cmp	r0, r4
 8003f32:	d007      	beq.n	8003f44 <sbrk_aligned+0x38>
 8003f34:	1a21      	subs	r1, r4, r0
 8003f36:	4628      	mov	r0, r5
 8003f38:	f000 ff1e 	bl	8004d78 <_sbrk_r>
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d101      	bne.n	8003f44 <sbrk_aligned+0x38>
 8003f40:	f04f 34ff 	mov.w	r4, #4294967295
 8003f44:	4620      	mov	r0, r4
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	20000128 	.word	0x20000128

08003f4c <_malloc_r>:
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f50:	1ccd      	adds	r5, r1, #3
 8003f52:	f025 0503 	bic.w	r5, r5, #3
 8003f56:	3508      	adds	r5, #8
 8003f58:	2d0c      	cmp	r5, #12
 8003f5a:	bf38      	it	cc
 8003f5c:	250c      	movcc	r5, #12
 8003f5e:	2d00      	cmp	r5, #0
 8003f60:	4607      	mov	r7, r0
 8003f62:	db01      	blt.n	8003f68 <_malloc_r+0x1c>
 8003f64:	42a9      	cmp	r1, r5
 8003f66:	d905      	bls.n	8003f74 <_malloc_r+0x28>
 8003f68:	230c      	movs	r3, #12
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	2600      	movs	r6, #0
 8003f6e:	4630      	mov	r0, r6
 8003f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f74:	4e2e      	ldr	r6, [pc, #184]	; (8004030 <_malloc_r+0xe4>)
 8003f76:	f001 f935 	bl	80051e4 <__malloc_lock>
 8003f7a:	6833      	ldr	r3, [r6, #0]
 8003f7c:	461c      	mov	r4, r3
 8003f7e:	bb34      	cbnz	r4, 8003fce <_malloc_r+0x82>
 8003f80:	4629      	mov	r1, r5
 8003f82:	4638      	mov	r0, r7
 8003f84:	f7ff ffc2 	bl	8003f0c <sbrk_aligned>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	d14d      	bne.n	800402a <_malloc_r+0xde>
 8003f8e:	6834      	ldr	r4, [r6, #0]
 8003f90:	4626      	mov	r6, r4
 8003f92:	2e00      	cmp	r6, #0
 8003f94:	d140      	bne.n	8004018 <_malloc_r+0xcc>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	4631      	mov	r1, r6
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	eb04 0803 	add.w	r8, r4, r3
 8003fa0:	f000 feea 	bl	8004d78 <_sbrk_r>
 8003fa4:	4580      	cmp	r8, r0
 8003fa6:	d13a      	bne.n	800401e <_malloc_r+0xd2>
 8003fa8:	6821      	ldr	r1, [r4, #0]
 8003faa:	3503      	adds	r5, #3
 8003fac:	1a6d      	subs	r5, r5, r1
 8003fae:	f025 0503 	bic.w	r5, r5, #3
 8003fb2:	3508      	adds	r5, #8
 8003fb4:	2d0c      	cmp	r5, #12
 8003fb6:	bf38      	it	cc
 8003fb8:	250c      	movcc	r5, #12
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	f7ff ffa5 	bl	8003f0c <sbrk_aligned>
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d02b      	beq.n	800401e <_malloc_r+0xd2>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	442b      	add	r3, r5
 8003fca:	6023      	str	r3, [r4, #0]
 8003fcc:	e00e      	b.n	8003fec <_malloc_r+0xa0>
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	1b52      	subs	r2, r2, r5
 8003fd2:	d41e      	bmi.n	8004012 <_malloc_r+0xc6>
 8003fd4:	2a0b      	cmp	r2, #11
 8003fd6:	d916      	bls.n	8004006 <_malloc_r+0xba>
 8003fd8:	1961      	adds	r1, r4, r5
 8003fda:	42a3      	cmp	r3, r4
 8003fdc:	6025      	str	r5, [r4, #0]
 8003fde:	bf18      	it	ne
 8003fe0:	6059      	strne	r1, [r3, #4]
 8003fe2:	6863      	ldr	r3, [r4, #4]
 8003fe4:	bf08      	it	eq
 8003fe6:	6031      	streq	r1, [r6, #0]
 8003fe8:	5162      	str	r2, [r4, r5]
 8003fea:	604b      	str	r3, [r1, #4]
 8003fec:	4638      	mov	r0, r7
 8003fee:	f104 060b 	add.w	r6, r4, #11
 8003ff2:	f001 f8fd 	bl	80051f0 <__malloc_unlock>
 8003ff6:	f026 0607 	bic.w	r6, r6, #7
 8003ffa:	1d23      	adds	r3, r4, #4
 8003ffc:	1af2      	subs	r2, r6, r3
 8003ffe:	d0b6      	beq.n	8003f6e <_malloc_r+0x22>
 8004000:	1b9b      	subs	r3, r3, r6
 8004002:	50a3      	str	r3, [r4, r2]
 8004004:	e7b3      	b.n	8003f6e <_malloc_r+0x22>
 8004006:	6862      	ldr	r2, [r4, #4]
 8004008:	42a3      	cmp	r3, r4
 800400a:	bf0c      	ite	eq
 800400c:	6032      	streq	r2, [r6, #0]
 800400e:	605a      	strne	r2, [r3, #4]
 8004010:	e7ec      	b.n	8003fec <_malloc_r+0xa0>
 8004012:	4623      	mov	r3, r4
 8004014:	6864      	ldr	r4, [r4, #4]
 8004016:	e7b2      	b.n	8003f7e <_malloc_r+0x32>
 8004018:	4634      	mov	r4, r6
 800401a:	6876      	ldr	r6, [r6, #4]
 800401c:	e7b9      	b.n	8003f92 <_malloc_r+0x46>
 800401e:	230c      	movs	r3, #12
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4638      	mov	r0, r7
 8004024:	f001 f8e4 	bl	80051f0 <__malloc_unlock>
 8004028:	e7a1      	b.n	8003f6e <_malloc_r+0x22>
 800402a:	6025      	str	r5, [r4, #0]
 800402c:	e7de      	b.n	8003fec <_malloc_r+0xa0>
 800402e:	bf00      	nop
 8004030:	20000124 	.word	0x20000124

08004034 <__sfputc_r>:
 8004034:	6893      	ldr	r3, [r2, #8]
 8004036:	3b01      	subs	r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	b410      	push	{r4}
 800403c:	6093      	str	r3, [r2, #8]
 800403e:	da08      	bge.n	8004052 <__sfputc_r+0x1e>
 8004040:	6994      	ldr	r4, [r2, #24]
 8004042:	42a3      	cmp	r3, r4
 8004044:	db01      	blt.n	800404a <__sfputc_r+0x16>
 8004046:	290a      	cmp	r1, #10
 8004048:	d103      	bne.n	8004052 <__sfputc_r+0x1e>
 800404a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800404e:	f7ff bbfb 	b.w	8003848 <__swbuf_r>
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	1c58      	adds	r0, r3, #1
 8004056:	6010      	str	r0, [r2, #0]
 8004058:	7019      	strb	r1, [r3, #0]
 800405a:	4608      	mov	r0, r1
 800405c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004060:	4770      	bx	lr

08004062 <__sfputs_r>:
 8004062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004064:	4606      	mov	r6, r0
 8004066:	460f      	mov	r7, r1
 8004068:	4614      	mov	r4, r2
 800406a:	18d5      	adds	r5, r2, r3
 800406c:	42ac      	cmp	r4, r5
 800406e:	d101      	bne.n	8004074 <__sfputs_r+0x12>
 8004070:	2000      	movs	r0, #0
 8004072:	e007      	b.n	8004084 <__sfputs_r+0x22>
 8004074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004078:	463a      	mov	r2, r7
 800407a:	4630      	mov	r0, r6
 800407c:	f7ff ffda 	bl	8004034 <__sfputc_r>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d1f3      	bne.n	800406c <__sfputs_r+0xa>
 8004084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004088 <_vfiprintf_r>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	460d      	mov	r5, r1
 800408e:	b09d      	sub	sp, #116	; 0x74
 8004090:	4614      	mov	r4, r2
 8004092:	4698      	mov	r8, r3
 8004094:	4606      	mov	r6, r0
 8004096:	b118      	cbz	r0, 80040a0 <_vfiprintf_r+0x18>
 8004098:	6983      	ldr	r3, [r0, #24]
 800409a:	b90b      	cbnz	r3, 80040a0 <_vfiprintf_r+0x18>
 800409c:	f7ff fdc0 	bl	8003c20 <__sinit>
 80040a0:	4b89      	ldr	r3, [pc, #548]	; (80042c8 <_vfiprintf_r+0x240>)
 80040a2:	429d      	cmp	r5, r3
 80040a4:	d11b      	bne.n	80040de <_vfiprintf_r+0x56>
 80040a6:	6875      	ldr	r5, [r6, #4]
 80040a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040aa:	07d9      	lsls	r1, r3, #31
 80040ac:	d405      	bmi.n	80040ba <_vfiprintf_r+0x32>
 80040ae:	89ab      	ldrh	r3, [r5, #12]
 80040b0:	059a      	lsls	r2, r3, #22
 80040b2:	d402      	bmi.n	80040ba <_vfiprintf_r+0x32>
 80040b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040b6:	f7ff fe6e 	bl	8003d96 <__retarget_lock_acquire_recursive>
 80040ba:	89ab      	ldrh	r3, [r5, #12]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	d501      	bpl.n	80040c4 <_vfiprintf_r+0x3c>
 80040c0:	692b      	ldr	r3, [r5, #16]
 80040c2:	b9eb      	cbnz	r3, 8004100 <_vfiprintf_r+0x78>
 80040c4:	4629      	mov	r1, r5
 80040c6:	4630      	mov	r0, r6
 80040c8:	f7ff fc10 	bl	80038ec <__swsetup_r>
 80040cc:	b1c0      	cbz	r0, 8004100 <_vfiprintf_r+0x78>
 80040ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040d0:	07dc      	lsls	r4, r3, #31
 80040d2:	d50e      	bpl.n	80040f2 <_vfiprintf_r+0x6a>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	b01d      	add	sp, #116	; 0x74
 80040da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040de:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <_vfiprintf_r+0x244>)
 80040e0:	429d      	cmp	r5, r3
 80040e2:	d101      	bne.n	80040e8 <_vfiprintf_r+0x60>
 80040e4:	68b5      	ldr	r5, [r6, #8]
 80040e6:	e7df      	b.n	80040a8 <_vfiprintf_r+0x20>
 80040e8:	4b79      	ldr	r3, [pc, #484]	; (80042d0 <_vfiprintf_r+0x248>)
 80040ea:	429d      	cmp	r5, r3
 80040ec:	bf08      	it	eq
 80040ee:	68f5      	ldreq	r5, [r6, #12]
 80040f0:	e7da      	b.n	80040a8 <_vfiprintf_r+0x20>
 80040f2:	89ab      	ldrh	r3, [r5, #12]
 80040f4:	0598      	lsls	r0, r3, #22
 80040f6:	d4ed      	bmi.n	80040d4 <_vfiprintf_r+0x4c>
 80040f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040fa:	f7ff fe4d 	bl	8003d98 <__retarget_lock_release_recursive>
 80040fe:	e7e9      	b.n	80040d4 <_vfiprintf_r+0x4c>
 8004100:	2300      	movs	r3, #0
 8004102:	9309      	str	r3, [sp, #36]	; 0x24
 8004104:	2320      	movs	r3, #32
 8004106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800410a:	f8cd 800c 	str.w	r8, [sp, #12]
 800410e:	2330      	movs	r3, #48	; 0x30
 8004110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042d4 <_vfiprintf_r+0x24c>
 8004114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004118:	f04f 0901 	mov.w	r9, #1
 800411c:	4623      	mov	r3, r4
 800411e:	469a      	mov	sl, r3
 8004120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004124:	b10a      	cbz	r2, 800412a <_vfiprintf_r+0xa2>
 8004126:	2a25      	cmp	r2, #37	; 0x25
 8004128:	d1f9      	bne.n	800411e <_vfiprintf_r+0x96>
 800412a:	ebba 0b04 	subs.w	fp, sl, r4
 800412e:	d00b      	beq.n	8004148 <_vfiprintf_r+0xc0>
 8004130:	465b      	mov	r3, fp
 8004132:	4622      	mov	r2, r4
 8004134:	4629      	mov	r1, r5
 8004136:	4630      	mov	r0, r6
 8004138:	f7ff ff93 	bl	8004062 <__sfputs_r>
 800413c:	3001      	adds	r0, #1
 800413e:	f000 80aa 	beq.w	8004296 <_vfiprintf_r+0x20e>
 8004142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004144:	445a      	add	r2, fp
 8004146:	9209      	str	r2, [sp, #36]	; 0x24
 8004148:	f89a 3000 	ldrb.w	r3, [sl]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80a2 	beq.w	8004296 <_vfiprintf_r+0x20e>
 8004152:	2300      	movs	r3, #0
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800415c:	f10a 0a01 	add.w	sl, sl, #1
 8004160:	9304      	str	r3, [sp, #16]
 8004162:	9307      	str	r3, [sp, #28]
 8004164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004168:	931a      	str	r3, [sp, #104]	; 0x68
 800416a:	4654      	mov	r4, sl
 800416c:	2205      	movs	r2, #5
 800416e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004172:	4858      	ldr	r0, [pc, #352]	; (80042d4 <_vfiprintf_r+0x24c>)
 8004174:	f7fc f864 	bl	8000240 <memchr>
 8004178:	9a04      	ldr	r2, [sp, #16]
 800417a:	b9d8      	cbnz	r0, 80041b4 <_vfiprintf_r+0x12c>
 800417c:	06d1      	lsls	r1, r2, #27
 800417e:	bf44      	itt	mi
 8004180:	2320      	movmi	r3, #32
 8004182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004186:	0713      	lsls	r3, r2, #28
 8004188:	bf44      	itt	mi
 800418a:	232b      	movmi	r3, #43	; 0x2b
 800418c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004190:	f89a 3000 	ldrb.w	r3, [sl]
 8004194:	2b2a      	cmp	r3, #42	; 0x2a
 8004196:	d015      	beq.n	80041c4 <_vfiprintf_r+0x13c>
 8004198:	9a07      	ldr	r2, [sp, #28]
 800419a:	4654      	mov	r4, sl
 800419c:	2000      	movs	r0, #0
 800419e:	f04f 0c0a 	mov.w	ip, #10
 80041a2:	4621      	mov	r1, r4
 80041a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041a8:	3b30      	subs	r3, #48	; 0x30
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	d94e      	bls.n	800424c <_vfiprintf_r+0x1c4>
 80041ae:	b1b0      	cbz	r0, 80041de <_vfiprintf_r+0x156>
 80041b0:	9207      	str	r2, [sp, #28]
 80041b2:	e014      	b.n	80041de <_vfiprintf_r+0x156>
 80041b4:	eba0 0308 	sub.w	r3, r0, r8
 80041b8:	fa09 f303 	lsl.w	r3, r9, r3
 80041bc:	4313      	orrs	r3, r2
 80041be:	9304      	str	r3, [sp, #16]
 80041c0:	46a2      	mov	sl, r4
 80041c2:	e7d2      	b.n	800416a <_vfiprintf_r+0xe2>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	1d19      	adds	r1, r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	9103      	str	r1, [sp, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bfbb      	ittet	lt
 80041d0:	425b      	neglt	r3, r3
 80041d2:	f042 0202 	orrlt.w	r2, r2, #2
 80041d6:	9307      	strge	r3, [sp, #28]
 80041d8:	9307      	strlt	r3, [sp, #28]
 80041da:	bfb8      	it	lt
 80041dc:	9204      	strlt	r2, [sp, #16]
 80041de:	7823      	ldrb	r3, [r4, #0]
 80041e0:	2b2e      	cmp	r3, #46	; 0x2e
 80041e2:	d10c      	bne.n	80041fe <_vfiprintf_r+0x176>
 80041e4:	7863      	ldrb	r3, [r4, #1]
 80041e6:	2b2a      	cmp	r3, #42	; 0x2a
 80041e8:	d135      	bne.n	8004256 <_vfiprintf_r+0x1ce>
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	1d1a      	adds	r2, r3, #4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	9203      	str	r2, [sp, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bfb8      	it	lt
 80041f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80041fa:	3402      	adds	r4, #2
 80041fc:	9305      	str	r3, [sp, #20]
 80041fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042e4 <_vfiprintf_r+0x25c>
 8004202:	7821      	ldrb	r1, [r4, #0]
 8004204:	2203      	movs	r2, #3
 8004206:	4650      	mov	r0, sl
 8004208:	f7fc f81a 	bl	8000240 <memchr>
 800420c:	b140      	cbz	r0, 8004220 <_vfiprintf_r+0x198>
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	eba0 000a 	sub.w	r0, r0, sl
 8004214:	fa03 f000 	lsl.w	r0, r3, r0
 8004218:	9b04      	ldr	r3, [sp, #16]
 800421a:	4303      	orrs	r3, r0
 800421c:	3401      	adds	r4, #1
 800421e:	9304      	str	r3, [sp, #16]
 8004220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004224:	482c      	ldr	r0, [pc, #176]	; (80042d8 <_vfiprintf_r+0x250>)
 8004226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800422a:	2206      	movs	r2, #6
 800422c:	f7fc f808 	bl	8000240 <memchr>
 8004230:	2800      	cmp	r0, #0
 8004232:	d03f      	beq.n	80042b4 <_vfiprintf_r+0x22c>
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <_vfiprintf_r+0x254>)
 8004236:	bb1b      	cbnz	r3, 8004280 <_vfiprintf_r+0x1f8>
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	3307      	adds	r3, #7
 800423c:	f023 0307 	bic.w	r3, r3, #7
 8004240:	3308      	adds	r3, #8
 8004242:	9303      	str	r3, [sp, #12]
 8004244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004246:	443b      	add	r3, r7
 8004248:	9309      	str	r3, [sp, #36]	; 0x24
 800424a:	e767      	b.n	800411c <_vfiprintf_r+0x94>
 800424c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004250:	460c      	mov	r4, r1
 8004252:	2001      	movs	r0, #1
 8004254:	e7a5      	b.n	80041a2 <_vfiprintf_r+0x11a>
 8004256:	2300      	movs	r3, #0
 8004258:	3401      	adds	r4, #1
 800425a:	9305      	str	r3, [sp, #20]
 800425c:	4619      	mov	r1, r3
 800425e:	f04f 0c0a 	mov.w	ip, #10
 8004262:	4620      	mov	r0, r4
 8004264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004268:	3a30      	subs	r2, #48	; 0x30
 800426a:	2a09      	cmp	r2, #9
 800426c:	d903      	bls.n	8004276 <_vfiprintf_r+0x1ee>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0c5      	beq.n	80041fe <_vfiprintf_r+0x176>
 8004272:	9105      	str	r1, [sp, #20]
 8004274:	e7c3      	b.n	80041fe <_vfiprintf_r+0x176>
 8004276:	fb0c 2101 	mla	r1, ip, r1, r2
 800427a:	4604      	mov	r4, r0
 800427c:	2301      	movs	r3, #1
 800427e:	e7f0      	b.n	8004262 <_vfiprintf_r+0x1da>
 8004280:	ab03      	add	r3, sp, #12
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	462a      	mov	r2, r5
 8004286:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <_vfiprintf_r+0x258>)
 8004288:	a904      	add	r1, sp, #16
 800428a:	4630      	mov	r0, r6
 800428c:	f3af 8000 	nop.w
 8004290:	4607      	mov	r7, r0
 8004292:	1c78      	adds	r0, r7, #1
 8004294:	d1d6      	bne.n	8004244 <_vfiprintf_r+0x1bc>
 8004296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004298:	07d9      	lsls	r1, r3, #31
 800429a:	d405      	bmi.n	80042a8 <_vfiprintf_r+0x220>
 800429c:	89ab      	ldrh	r3, [r5, #12]
 800429e:	059a      	lsls	r2, r3, #22
 80042a0:	d402      	bmi.n	80042a8 <_vfiprintf_r+0x220>
 80042a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042a4:	f7ff fd78 	bl	8003d98 <__retarget_lock_release_recursive>
 80042a8:	89ab      	ldrh	r3, [r5, #12]
 80042aa:	065b      	lsls	r3, r3, #25
 80042ac:	f53f af12 	bmi.w	80040d4 <_vfiprintf_r+0x4c>
 80042b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042b2:	e711      	b.n	80040d8 <_vfiprintf_r+0x50>
 80042b4:	ab03      	add	r3, sp, #12
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	462a      	mov	r2, r5
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <_vfiprintf_r+0x258>)
 80042bc:	a904      	add	r1, sp, #16
 80042be:	4630      	mov	r0, r6
 80042c0:	f000 f880 	bl	80043c4 <_printf_i>
 80042c4:	e7e4      	b.n	8004290 <_vfiprintf_r+0x208>
 80042c6:	bf00      	nop
 80042c8:	08005f84 	.word	0x08005f84
 80042cc:	08005fa4 	.word	0x08005fa4
 80042d0:	08005f64 	.word	0x08005f64
 80042d4:	08005fc4 	.word	0x08005fc4
 80042d8:	08005fce 	.word	0x08005fce
 80042dc:	00000000 	.word	0x00000000
 80042e0:	08004063 	.word	0x08004063
 80042e4:	08005fca 	.word	0x08005fca

080042e8 <_printf_common>:
 80042e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	4616      	mov	r6, r2
 80042ee:	4699      	mov	r9, r3
 80042f0:	688a      	ldr	r2, [r1, #8]
 80042f2:	690b      	ldr	r3, [r1, #16]
 80042f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bfb8      	it	lt
 80042fc:	4613      	movlt	r3, r2
 80042fe:	6033      	str	r3, [r6, #0]
 8004300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004304:	4607      	mov	r7, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b10a      	cbz	r2, 800430e <_printf_common+0x26>
 800430a:	3301      	adds	r3, #1
 800430c:	6033      	str	r3, [r6, #0]
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	0699      	lsls	r1, r3, #26
 8004312:	bf42      	ittt	mi
 8004314:	6833      	ldrmi	r3, [r6, #0]
 8004316:	3302      	addmi	r3, #2
 8004318:	6033      	strmi	r3, [r6, #0]
 800431a:	6825      	ldr	r5, [r4, #0]
 800431c:	f015 0506 	ands.w	r5, r5, #6
 8004320:	d106      	bne.n	8004330 <_printf_common+0x48>
 8004322:	f104 0a19 	add.w	sl, r4, #25
 8004326:	68e3      	ldr	r3, [r4, #12]
 8004328:	6832      	ldr	r2, [r6, #0]
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	42ab      	cmp	r3, r5
 800432e:	dc26      	bgt.n	800437e <_printf_common+0x96>
 8004330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004334:	1e13      	subs	r3, r2, #0
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	bf18      	it	ne
 800433a:	2301      	movne	r3, #1
 800433c:	0692      	lsls	r2, r2, #26
 800433e:	d42b      	bmi.n	8004398 <_printf_common+0xb0>
 8004340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004344:	4649      	mov	r1, r9
 8004346:	4638      	mov	r0, r7
 8004348:	47c0      	blx	r8
 800434a:	3001      	adds	r0, #1
 800434c:	d01e      	beq.n	800438c <_printf_common+0xa4>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	68e5      	ldr	r5, [r4, #12]
 8004352:	6832      	ldr	r2, [r6, #0]
 8004354:	f003 0306 	and.w	r3, r3, #6
 8004358:	2b04      	cmp	r3, #4
 800435a:	bf08      	it	eq
 800435c:	1aad      	subeq	r5, r5, r2
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	6922      	ldr	r2, [r4, #16]
 8004362:	bf0c      	ite	eq
 8004364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004368:	2500      	movne	r5, #0
 800436a:	4293      	cmp	r3, r2
 800436c:	bfc4      	itt	gt
 800436e:	1a9b      	subgt	r3, r3, r2
 8004370:	18ed      	addgt	r5, r5, r3
 8004372:	2600      	movs	r6, #0
 8004374:	341a      	adds	r4, #26
 8004376:	42b5      	cmp	r5, r6
 8004378:	d11a      	bne.n	80043b0 <_printf_common+0xc8>
 800437a:	2000      	movs	r0, #0
 800437c:	e008      	b.n	8004390 <_printf_common+0xa8>
 800437e:	2301      	movs	r3, #1
 8004380:	4652      	mov	r2, sl
 8004382:	4649      	mov	r1, r9
 8004384:	4638      	mov	r0, r7
 8004386:	47c0      	blx	r8
 8004388:	3001      	adds	r0, #1
 800438a:	d103      	bne.n	8004394 <_printf_common+0xac>
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004394:	3501      	adds	r5, #1
 8004396:	e7c6      	b.n	8004326 <_printf_common+0x3e>
 8004398:	18e1      	adds	r1, r4, r3
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	2030      	movs	r0, #48	; 0x30
 800439e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043a2:	4422      	add	r2, r4
 80043a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ac:	3302      	adds	r3, #2
 80043ae:	e7c7      	b.n	8004340 <_printf_common+0x58>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4622      	mov	r2, r4
 80043b4:	4649      	mov	r1, r9
 80043b6:	4638      	mov	r0, r7
 80043b8:	47c0      	blx	r8
 80043ba:	3001      	adds	r0, #1
 80043bc:	d0e6      	beq.n	800438c <_printf_common+0xa4>
 80043be:	3601      	adds	r6, #1
 80043c0:	e7d9      	b.n	8004376 <_printf_common+0x8e>
	...

080043c4 <_printf_i>:
 80043c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	7e0f      	ldrb	r7, [r1, #24]
 80043ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043cc:	2f78      	cmp	r7, #120	; 0x78
 80043ce:	4691      	mov	r9, r2
 80043d0:	4680      	mov	r8, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	469a      	mov	sl, r3
 80043d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043da:	d807      	bhi.n	80043ec <_printf_i+0x28>
 80043dc:	2f62      	cmp	r7, #98	; 0x62
 80043de:	d80a      	bhi.n	80043f6 <_printf_i+0x32>
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	f000 80d8 	beq.w	8004596 <_printf_i+0x1d2>
 80043e6:	2f58      	cmp	r7, #88	; 0x58
 80043e8:	f000 80a3 	beq.w	8004532 <_printf_i+0x16e>
 80043ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043f4:	e03a      	b.n	800446c <_printf_i+0xa8>
 80043f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043fa:	2b15      	cmp	r3, #21
 80043fc:	d8f6      	bhi.n	80043ec <_printf_i+0x28>
 80043fe:	a101      	add	r1, pc, #4	; (adr r1, 8004404 <_printf_i+0x40>)
 8004400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004404:	0800445d 	.word	0x0800445d
 8004408:	08004471 	.word	0x08004471
 800440c:	080043ed 	.word	0x080043ed
 8004410:	080043ed 	.word	0x080043ed
 8004414:	080043ed 	.word	0x080043ed
 8004418:	080043ed 	.word	0x080043ed
 800441c:	08004471 	.word	0x08004471
 8004420:	080043ed 	.word	0x080043ed
 8004424:	080043ed 	.word	0x080043ed
 8004428:	080043ed 	.word	0x080043ed
 800442c:	080043ed 	.word	0x080043ed
 8004430:	0800457d 	.word	0x0800457d
 8004434:	080044a1 	.word	0x080044a1
 8004438:	0800455f 	.word	0x0800455f
 800443c:	080043ed 	.word	0x080043ed
 8004440:	080043ed 	.word	0x080043ed
 8004444:	0800459f 	.word	0x0800459f
 8004448:	080043ed 	.word	0x080043ed
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080043ed 	.word	0x080043ed
 8004454:	080043ed 	.word	0x080043ed
 8004458:	08004567 	.word	0x08004567
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	602a      	str	r2, [r5, #0]
 8004464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800446c:	2301      	movs	r3, #1
 800446e:	e0a3      	b.n	80045b8 <_printf_i+0x1f4>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	6829      	ldr	r1, [r5, #0]
 8004474:	0606      	lsls	r6, r0, #24
 8004476:	f101 0304 	add.w	r3, r1, #4
 800447a:	d50a      	bpl.n	8004492 <_printf_i+0xce>
 800447c:	680e      	ldr	r6, [r1, #0]
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	2e00      	cmp	r6, #0
 8004482:	da03      	bge.n	800448c <_printf_i+0xc8>
 8004484:	232d      	movs	r3, #45	; 0x2d
 8004486:	4276      	negs	r6, r6
 8004488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448c:	485e      	ldr	r0, [pc, #376]	; (8004608 <_printf_i+0x244>)
 800448e:	230a      	movs	r3, #10
 8004490:	e019      	b.n	80044c6 <_printf_i+0x102>
 8004492:	680e      	ldr	r6, [r1, #0]
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	f010 0f40 	tst.w	r0, #64	; 0x40
 800449a:	bf18      	it	ne
 800449c:	b236      	sxthne	r6, r6
 800449e:	e7ef      	b.n	8004480 <_printf_i+0xbc>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	6820      	ldr	r0, [r4, #0]
 80044a4:	1d19      	adds	r1, r3, #4
 80044a6:	6029      	str	r1, [r5, #0]
 80044a8:	0601      	lsls	r1, r0, #24
 80044aa:	d501      	bpl.n	80044b0 <_printf_i+0xec>
 80044ac:	681e      	ldr	r6, [r3, #0]
 80044ae:	e002      	b.n	80044b6 <_printf_i+0xf2>
 80044b0:	0646      	lsls	r6, r0, #25
 80044b2:	d5fb      	bpl.n	80044ac <_printf_i+0xe8>
 80044b4:	881e      	ldrh	r6, [r3, #0]
 80044b6:	4854      	ldr	r0, [pc, #336]	; (8004608 <_printf_i+0x244>)
 80044b8:	2f6f      	cmp	r7, #111	; 0x6f
 80044ba:	bf0c      	ite	eq
 80044bc:	2308      	moveq	r3, #8
 80044be:	230a      	movne	r3, #10
 80044c0:	2100      	movs	r1, #0
 80044c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044c6:	6865      	ldr	r5, [r4, #4]
 80044c8:	60a5      	str	r5, [r4, #8]
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	bfa2      	ittt	ge
 80044ce:	6821      	ldrge	r1, [r4, #0]
 80044d0:	f021 0104 	bicge.w	r1, r1, #4
 80044d4:	6021      	strge	r1, [r4, #0]
 80044d6:	b90e      	cbnz	r6, 80044dc <_printf_i+0x118>
 80044d8:	2d00      	cmp	r5, #0
 80044da:	d04d      	beq.n	8004578 <_printf_i+0x1b4>
 80044dc:	4615      	mov	r5, r2
 80044de:	fbb6 f1f3 	udiv	r1, r6, r3
 80044e2:	fb03 6711 	mls	r7, r3, r1, r6
 80044e6:	5dc7      	ldrb	r7, [r0, r7]
 80044e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044ec:	4637      	mov	r7, r6
 80044ee:	42bb      	cmp	r3, r7
 80044f0:	460e      	mov	r6, r1
 80044f2:	d9f4      	bls.n	80044de <_printf_i+0x11a>
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d10b      	bne.n	8004510 <_printf_i+0x14c>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	07de      	lsls	r6, r3, #31
 80044fc:	d508      	bpl.n	8004510 <_printf_i+0x14c>
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	6861      	ldr	r1, [r4, #4]
 8004502:	4299      	cmp	r1, r3
 8004504:	bfde      	ittt	le
 8004506:	2330      	movle	r3, #48	; 0x30
 8004508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800450c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004510:	1b52      	subs	r2, r2, r5
 8004512:	6122      	str	r2, [r4, #16]
 8004514:	f8cd a000 	str.w	sl, [sp]
 8004518:	464b      	mov	r3, r9
 800451a:	aa03      	add	r2, sp, #12
 800451c:	4621      	mov	r1, r4
 800451e:	4640      	mov	r0, r8
 8004520:	f7ff fee2 	bl	80042e8 <_printf_common>
 8004524:	3001      	adds	r0, #1
 8004526:	d14c      	bne.n	80045c2 <_printf_i+0x1fe>
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	b004      	add	sp, #16
 800452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004532:	4835      	ldr	r0, [pc, #212]	; (8004608 <_printf_i+0x244>)
 8004534:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004538:	6829      	ldr	r1, [r5, #0]
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004540:	6029      	str	r1, [r5, #0]
 8004542:	061d      	lsls	r5, r3, #24
 8004544:	d514      	bpl.n	8004570 <_printf_i+0x1ac>
 8004546:	07df      	lsls	r7, r3, #31
 8004548:	bf44      	itt	mi
 800454a:	f043 0320 	orrmi.w	r3, r3, #32
 800454e:	6023      	strmi	r3, [r4, #0]
 8004550:	b91e      	cbnz	r6, 800455a <_printf_i+0x196>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	f023 0320 	bic.w	r3, r3, #32
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	2310      	movs	r3, #16
 800455c:	e7b0      	b.n	80044c0 <_printf_i+0xfc>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f043 0320 	orr.w	r3, r3, #32
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	2378      	movs	r3, #120	; 0x78
 8004568:	4828      	ldr	r0, [pc, #160]	; (800460c <_printf_i+0x248>)
 800456a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800456e:	e7e3      	b.n	8004538 <_printf_i+0x174>
 8004570:	0659      	lsls	r1, r3, #25
 8004572:	bf48      	it	mi
 8004574:	b2b6      	uxthmi	r6, r6
 8004576:	e7e6      	b.n	8004546 <_printf_i+0x182>
 8004578:	4615      	mov	r5, r2
 800457a:	e7bb      	b.n	80044f4 <_printf_i+0x130>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	6826      	ldr	r6, [r4, #0]
 8004580:	6961      	ldr	r1, [r4, #20]
 8004582:	1d18      	adds	r0, r3, #4
 8004584:	6028      	str	r0, [r5, #0]
 8004586:	0635      	lsls	r5, r6, #24
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	d501      	bpl.n	8004590 <_printf_i+0x1cc>
 800458c:	6019      	str	r1, [r3, #0]
 800458e:	e002      	b.n	8004596 <_printf_i+0x1d2>
 8004590:	0670      	lsls	r0, r6, #25
 8004592:	d5fb      	bpl.n	800458c <_printf_i+0x1c8>
 8004594:	8019      	strh	r1, [r3, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	4615      	mov	r5, r2
 800459c:	e7ba      	b.n	8004514 <_printf_i+0x150>
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	602a      	str	r2, [r5, #0]
 80045a4:	681d      	ldr	r5, [r3, #0]
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7fb fe48 	bl	8000240 <memchr>
 80045b0:	b108      	cbz	r0, 80045b6 <_printf_i+0x1f2>
 80045b2:	1b40      	subs	r0, r0, r5
 80045b4:	6060      	str	r0, [r4, #4]
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	2300      	movs	r3, #0
 80045bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c0:	e7a8      	b.n	8004514 <_printf_i+0x150>
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	462a      	mov	r2, r5
 80045c6:	4649      	mov	r1, r9
 80045c8:	4640      	mov	r0, r8
 80045ca:	47d0      	blx	sl
 80045cc:	3001      	adds	r0, #1
 80045ce:	d0ab      	beq.n	8004528 <_printf_i+0x164>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	079b      	lsls	r3, r3, #30
 80045d4:	d413      	bmi.n	80045fe <_printf_i+0x23a>
 80045d6:	68e0      	ldr	r0, [r4, #12]
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	4298      	cmp	r0, r3
 80045dc:	bfb8      	it	lt
 80045de:	4618      	movlt	r0, r3
 80045e0:	e7a4      	b.n	800452c <_printf_i+0x168>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4632      	mov	r2, r6
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d09b      	beq.n	8004528 <_printf_i+0x164>
 80045f0:	3501      	adds	r5, #1
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	9903      	ldr	r1, [sp, #12]
 80045f6:	1a5b      	subs	r3, r3, r1
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	dcf2      	bgt.n	80045e2 <_printf_i+0x21e>
 80045fc:	e7eb      	b.n	80045d6 <_printf_i+0x212>
 80045fe:	2500      	movs	r5, #0
 8004600:	f104 0619 	add.w	r6, r4, #25
 8004604:	e7f5      	b.n	80045f2 <_printf_i+0x22e>
 8004606:	bf00      	nop
 8004608:	08005fd5 	.word	0x08005fd5
 800460c:	08005fe6 	.word	0x08005fe6

08004610 <__svfiscanf_r>:
 8004610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	461d      	mov	r5, r3
 8004616:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004618:	07df      	lsls	r7, r3, #31
 800461a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800461e:	4606      	mov	r6, r0
 8004620:	460c      	mov	r4, r1
 8004622:	4692      	mov	sl, r2
 8004624:	d405      	bmi.n	8004632 <__svfiscanf_r+0x22>
 8004626:	898b      	ldrh	r3, [r1, #12]
 8004628:	0598      	lsls	r0, r3, #22
 800462a:	d402      	bmi.n	8004632 <__svfiscanf_r+0x22>
 800462c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800462e:	f7ff fbb2 	bl	8003d96 <__retarget_lock_acquire_recursive>
 8004632:	2300      	movs	r3, #0
 8004634:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8004638:	4ba6      	ldr	r3, [pc, #664]	; (80048d4 <__svfiscanf_r+0x2c4>)
 800463a:	93a0      	str	r3, [sp, #640]	; 0x280
 800463c:	f10d 0804 	add.w	r8, sp, #4
 8004640:	4ba5      	ldr	r3, [pc, #660]	; (80048d8 <__svfiscanf_r+0x2c8>)
 8004642:	4fa6      	ldr	r7, [pc, #664]	; (80048dc <__svfiscanf_r+0x2cc>)
 8004644:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80048e0 <__svfiscanf_r+0x2d0>
 8004648:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800464c:	93a1      	str	r3, [sp, #644]	; 0x284
 800464e:	9500      	str	r5, [sp, #0]
 8004650:	f89a 3000 	ldrb.w	r3, [sl]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8173 	beq.w	8004940 <__svfiscanf_r+0x330>
 800465a:	5dd9      	ldrb	r1, [r3, r7]
 800465c:	f011 0108 	ands.w	r1, r1, #8
 8004660:	f10a 0501 	add.w	r5, sl, #1
 8004664:	d019      	beq.n	800469a <__svfiscanf_r+0x8a>
 8004666:	6863      	ldr	r3, [r4, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	dd0f      	ble.n	800468c <__svfiscanf_r+0x7c>
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	5cba      	ldrb	r2, [r7, r2]
 8004672:	0711      	lsls	r1, r2, #28
 8004674:	d401      	bmi.n	800467a <__svfiscanf_r+0x6a>
 8004676:	46aa      	mov	sl, r5
 8004678:	e7ea      	b.n	8004650 <__svfiscanf_r+0x40>
 800467a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800467c:	3201      	adds	r2, #1
 800467e:	9245      	str	r2, [sp, #276]	; 0x114
 8004680:	6862      	ldr	r2, [r4, #4]
 8004682:	3301      	adds	r3, #1
 8004684:	3a01      	subs	r2, #1
 8004686:	6062      	str	r2, [r4, #4]
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	e7ec      	b.n	8004666 <__svfiscanf_r+0x56>
 800468c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800468e:	4621      	mov	r1, r4
 8004690:	4630      	mov	r0, r6
 8004692:	4798      	blx	r3
 8004694:	2800      	cmp	r0, #0
 8004696:	d0e9      	beq.n	800466c <__svfiscanf_r+0x5c>
 8004698:	e7ed      	b.n	8004676 <__svfiscanf_r+0x66>
 800469a:	2b25      	cmp	r3, #37	; 0x25
 800469c:	d012      	beq.n	80046c4 <__svfiscanf_r+0xb4>
 800469e:	469a      	mov	sl, r3
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f340 8095 	ble.w	80047d2 <__svfiscanf_r+0x1c2>
 80046a8:	6822      	ldr	r2, [r4, #0]
 80046aa:	7813      	ldrb	r3, [r2, #0]
 80046ac:	4553      	cmp	r3, sl
 80046ae:	f040 8147 	bne.w	8004940 <__svfiscanf_r+0x330>
 80046b2:	6863      	ldr	r3, [r4, #4]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	6063      	str	r3, [r4, #4]
 80046b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80046ba:	3201      	adds	r2, #1
 80046bc:	3301      	adds	r3, #1
 80046be:	6022      	str	r2, [r4, #0]
 80046c0:	9345      	str	r3, [sp, #276]	; 0x114
 80046c2:	e7d8      	b.n	8004676 <__svfiscanf_r+0x66>
 80046c4:	9141      	str	r1, [sp, #260]	; 0x104
 80046c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80046c8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80046cc:	2b2a      	cmp	r3, #42	; 0x2a
 80046ce:	bf02      	ittt	eq
 80046d0:	2310      	moveq	r3, #16
 80046d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80046d4:	f10a 0502 	addeq.w	r5, sl, #2
 80046d8:	220a      	movs	r2, #10
 80046da:	46aa      	mov	sl, r5
 80046dc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80046e0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80046e4:	2b09      	cmp	r3, #9
 80046e6:	d91e      	bls.n	8004726 <__svfiscanf_r+0x116>
 80046e8:	487d      	ldr	r0, [pc, #500]	; (80048e0 <__svfiscanf_r+0x2d0>)
 80046ea:	2203      	movs	r2, #3
 80046ec:	f7fb fda8 	bl	8000240 <memchr>
 80046f0:	b140      	cbz	r0, 8004704 <__svfiscanf_r+0xf4>
 80046f2:	2301      	movs	r3, #1
 80046f4:	eba0 0009 	sub.w	r0, r0, r9
 80046f8:	fa03 f000 	lsl.w	r0, r3, r0
 80046fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80046fe:	4318      	orrs	r0, r3
 8004700:	9041      	str	r0, [sp, #260]	; 0x104
 8004702:	4655      	mov	r5, sl
 8004704:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004708:	2b78      	cmp	r3, #120	; 0x78
 800470a:	d807      	bhi.n	800471c <__svfiscanf_r+0x10c>
 800470c:	2b57      	cmp	r3, #87	; 0x57
 800470e:	d811      	bhi.n	8004734 <__svfiscanf_r+0x124>
 8004710:	2b25      	cmp	r3, #37	; 0x25
 8004712:	d0c4      	beq.n	800469e <__svfiscanf_r+0x8e>
 8004714:	d858      	bhi.n	80047c8 <__svfiscanf_r+0x1b8>
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80c8 	beq.w	80048ac <__svfiscanf_r+0x29c>
 800471c:	2303      	movs	r3, #3
 800471e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004720:	230a      	movs	r3, #10
 8004722:	9342      	str	r3, [sp, #264]	; 0x108
 8004724:	e07c      	b.n	8004820 <__svfiscanf_r+0x210>
 8004726:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004728:	fb02 1103 	mla	r1, r2, r3, r1
 800472c:	3930      	subs	r1, #48	; 0x30
 800472e:	9143      	str	r1, [sp, #268]	; 0x10c
 8004730:	4655      	mov	r5, sl
 8004732:	e7d2      	b.n	80046da <__svfiscanf_r+0xca>
 8004734:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004738:	2a20      	cmp	r2, #32
 800473a:	d8ef      	bhi.n	800471c <__svfiscanf_r+0x10c>
 800473c:	a101      	add	r1, pc, #4	; (adr r1, 8004744 <__svfiscanf_r+0x134>)
 800473e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004742:	bf00      	nop
 8004744:	0800480b 	.word	0x0800480b
 8004748:	0800471d 	.word	0x0800471d
 800474c:	0800471d 	.word	0x0800471d
 8004750:	08004869 	.word	0x08004869
 8004754:	0800471d 	.word	0x0800471d
 8004758:	0800471d 	.word	0x0800471d
 800475c:	0800471d 	.word	0x0800471d
 8004760:	0800471d 	.word	0x0800471d
 8004764:	0800471d 	.word	0x0800471d
 8004768:	0800471d 	.word	0x0800471d
 800476c:	0800471d 	.word	0x0800471d
 8004770:	0800487f 	.word	0x0800487f
 8004774:	08004855 	.word	0x08004855
 8004778:	080047cf 	.word	0x080047cf
 800477c:	080047cf 	.word	0x080047cf
 8004780:	080047cf 	.word	0x080047cf
 8004784:	0800471d 	.word	0x0800471d
 8004788:	08004859 	.word	0x08004859
 800478c:	0800471d 	.word	0x0800471d
 8004790:	0800471d 	.word	0x0800471d
 8004794:	0800471d 	.word	0x0800471d
 8004798:	0800471d 	.word	0x0800471d
 800479c:	0800488f 	.word	0x0800488f
 80047a0:	08004861 	.word	0x08004861
 80047a4:	08004803 	.word	0x08004803
 80047a8:	0800471d 	.word	0x0800471d
 80047ac:	0800471d 	.word	0x0800471d
 80047b0:	0800488b 	.word	0x0800488b
 80047b4:	0800471d 	.word	0x0800471d
 80047b8:	08004855 	.word	0x08004855
 80047bc:	0800471d 	.word	0x0800471d
 80047c0:	0800471d 	.word	0x0800471d
 80047c4:	0800480b 	.word	0x0800480b
 80047c8:	3b45      	subs	r3, #69	; 0x45
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d8a6      	bhi.n	800471c <__svfiscanf_r+0x10c>
 80047ce:	2305      	movs	r3, #5
 80047d0:	e025      	b.n	800481e <__svfiscanf_r+0x20e>
 80047d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80047d4:	4621      	mov	r1, r4
 80047d6:	4630      	mov	r0, r6
 80047d8:	4798      	blx	r3
 80047da:	2800      	cmp	r0, #0
 80047dc:	f43f af64 	beq.w	80046a8 <__svfiscanf_r+0x98>
 80047e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047e2:	07da      	lsls	r2, r3, #31
 80047e4:	f140 80a4 	bpl.w	8004930 <__svfiscanf_r+0x320>
 80047e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d067      	beq.n	80048be <__svfiscanf_r+0x2ae>
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80047f4:	bf18      	it	ne
 80047f6:	f04f 30ff 	movne.w	r0, #4294967295
 80047fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80047fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004802:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004804:	f042 0220 	orr.w	r2, r2, #32
 8004808:	9241      	str	r2, [sp, #260]	; 0x104
 800480a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800480c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004810:	9241      	str	r2, [sp, #260]	; 0x104
 8004812:	2210      	movs	r2, #16
 8004814:	2b6f      	cmp	r3, #111	; 0x6f
 8004816:	9242      	str	r2, [sp, #264]	; 0x108
 8004818:	bf34      	ite	cc
 800481a:	2303      	movcc	r3, #3
 800481c:	2304      	movcs	r3, #4
 800481e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	dd4e      	ble.n	80048c4 <__svfiscanf_r+0x2b4>
 8004826:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004828:	065b      	lsls	r3, r3, #25
 800482a:	d404      	bmi.n	8004836 <__svfiscanf_r+0x226>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	5cba      	ldrb	r2, [r7, r2]
 8004832:	0710      	lsls	r0, r2, #28
 8004834:	d456      	bmi.n	80048e4 <__svfiscanf_r+0x2d4>
 8004836:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004838:	2b02      	cmp	r3, #2
 800483a:	dc65      	bgt.n	8004908 <__svfiscanf_r+0x2f8>
 800483c:	466b      	mov	r3, sp
 800483e:	4622      	mov	r2, r4
 8004840:	a941      	add	r1, sp, #260	; 0x104
 8004842:	4630      	mov	r0, r6
 8004844:	f000 f8b2 	bl	80049ac <_scanf_chars>
 8004848:	2801      	cmp	r0, #1
 800484a:	d079      	beq.n	8004940 <__svfiscanf_r+0x330>
 800484c:	2802      	cmp	r0, #2
 800484e:	f47f af12 	bne.w	8004676 <__svfiscanf_r+0x66>
 8004852:	e7c5      	b.n	80047e0 <__svfiscanf_r+0x1d0>
 8004854:	220a      	movs	r2, #10
 8004856:	e7dd      	b.n	8004814 <__svfiscanf_r+0x204>
 8004858:	2300      	movs	r3, #0
 800485a:	9342      	str	r3, [sp, #264]	; 0x108
 800485c:	2303      	movs	r3, #3
 800485e:	e7de      	b.n	800481e <__svfiscanf_r+0x20e>
 8004860:	2308      	movs	r3, #8
 8004862:	9342      	str	r3, [sp, #264]	; 0x108
 8004864:	2304      	movs	r3, #4
 8004866:	e7da      	b.n	800481e <__svfiscanf_r+0x20e>
 8004868:	4629      	mov	r1, r5
 800486a:	4640      	mov	r0, r8
 800486c:	f000 fa94 	bl	8004d98 <__sccl>
 8004870:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004876:	9341      	str	r3, [sp, #260]	; 0x104
 8004878:	4605      	mov	r5, r0
 800487a:	2301      	movs	r3, #1
 800487c:	e7cf      	b.n	800481e <__svfiscanf_r+0x20e>
 800487e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004884:	9341      	str	r3, [sp, #260]	; 0x104
 8004886:	2300      	movs	r3, #0
 8004888:	e7c9      	b.n	800481e <__svfiscanf_r+0x20e>
 800488a:	2302      	movs	r3, #2
 800488c:	e7c7      	b.n	800481e <__svfiscanf_r+0x20e>
 800488e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004890:	06c3      	lsls	r3, r0, #27
 8004892:	f53f aef0 	bmi.w	8004676 <__svfiscanf_r+0x66>
 8004896:	9b00      	ldr	r3, [sp, #0]
 8004898:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800489a:	1d19      	adds	r1, r3, #4
 800489c:	9100      	str	r1, [sp, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f010 0f01 	tst.w	r0, #1
 80048a4:	bf14      	ite	ne
 80048a6:	801a      	strhne	r2, [r3, #0]
 80048a8:	601a      	streq	r2, [r3, #0]
 80048aa:	e6e4      	b.n	8004676 <__svfiscanf_r+0x66>
 80048ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048ae:	07d8      	lsls	r0, r3, #31
 80048b0:	d405      	bmi.n	80048be <__svfiscanf_r+0x2ae>
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	0599      	lsls	r1, r3, #22
 80048b6:	d402      	bmi.n	80048be <__svfiscanf_r+0x2ae>
 80048b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ba:	f7ff fa6d 	bl	8003d98 <__retarget_lock_release_recursive>
 80048be:	f04f 30ff 	mov.w	r0, #4294967295
 80048c2:	e79a      	b.n	80047fa <__svfiscanf_r+0x1ea>
 80048c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80048c6:	4621      	mov	r1, r4
 80048c8:	4630      	mov	r0, r6
 80048ca:	4798      	blx	r3
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d0aa      	beq.n	8004826 <__svfiscanf_r+0x216>
 80048d0:	e786      	b.n	80047e0 <__svfiscanf_r+0x1d0>
 80048d2:	bf00      	nop
 80048d4:	08004fed 	.word	0x08004fed
 80048d8:	08004c65 	.word	0x08004c65
 80048dc:	08005e61 	.word	0x08005e61
 80048e0:	08005fca 	.word	0x08005fca
 80048e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80048e6:	3201      	adds	r2, #1
 80048e8:	9245      	str	r2, [sp, #276]	; 0x114
 80048ea:	6862      	ldr	r2, [r4, #4]
 80048ec:	3a01      	subs	r2, #1
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	6062      	str	r2, [r4, #4]
 80048f2:	dd02      	ble.n	80048fa <__svfiscanf_r+0x2ea>
 80048f4:	3301      	adds	r3, #1
 80048f6:	6023      	str	r3, [r4, #0]
 80048f8:	e798      	b.n	800482c <__svfiscanf_r+0x21c>
 80048fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80048fc:	4621      	mov	r1, r4
 80048fe:	4630      	mov	r0, r6
 8004900:	4798      	blx	r3
 8004902:	2800      	cmp	r0, #0
 8004904:	d092      	beq.n	800482c <__svfiscanf_r+0x21c>
 8004906:	e76b      	b.n	80047e0 <__svfiscanf_r+0x1d0>
 8004908:	2b04      	cmp	r3, #4
 800490a:	dc06      	bgt.n	800491a <__svfiscanf_r+0x30a>
 800490c:	466b      	mov	r3, sp
 800490e:	4622      	mov	r2, r4
 8004910:	a941      	add	r1, sp, #260	; 0x104
 8004912:	4630      	mov	r0, r6
 8004914:	f000 f8a4 	bl	8004a60 <_scanf_i>
 8004918:	e796      	b.n	8004848 <__svfiscanf_r+0x238>
 800491a:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <__svfiscanf_r+0x348>)
 800491c:	2b00      	cmp	r3, #0
 800491e:	f43f aeaa 	beq.w	8004676 <__svfiscanf_r+0x66>
 8004922:	466b      	mov	r3, sp
 8004924:	4622      	mov	r2, r4
 8004926:	a941      	add	r1, sp, #260	; 0x104
 8004928:	4630      	mov	r0, r6
 800492a:	f3af 8000 	nop.w
 800492e:	e78b      	b.n	8004848 <__svfiscanf_r+0x238>
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	0599      	lsls	r1, r3, #22
 8004934:	f53f af58 	bmi.w	80047e8 <__svfiscanf_r+0x1d8>
 8004938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800493a:	f7ff fa2d 	bl	8003d98 <__retarget_lock_release_recursive>
 800493e:	e753      	b.n	80047e8 <__svfiscanf_r+0x1d8>
 8004940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004942:	07da      	lsls	r2, r3, #31
 8004944:	d405      	bmi.n	8004952 <__svfiscanf_r+0x342>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	d402      	bmi.n	8004952 <__svfiscanf_r+0x342>
 800494c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800494e:	f7ff fa23 	bl	8003d98 <__retarget_lock_release_recursive>
 8004952:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004954:	e751      	b.n	80047fa <__svfiscanf_r+0x1ea>
 8004956:	bf00      	nop
 8004958:	00000000 	.word	0x00000000

0800495c <_vfiscanf_r>:
 800495c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800495e:	460c      	mov	r4, r1
 8004960:	4605      	mov	r5, r0
 8004962:	b138      	cbz	r0, 8004974 <_vfiscanf_r+0x18>
 8004964:	6981      	ldr	r1, [r0, #24]
 8004966:	b929      	cbnz	r1, 8004974 <_vfiscanf_r+0x18>
 8004968:	e9cd 2300 	strd	r2, r3, [sp]
 800496c:	f7ff f958 	bl	8003c20 <__sinit>
 8004970:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004974:	490a      	ldr	r1, [pc, #40]	; (80049a0 <_vfiscanf_r+0x44>)
 8004976:	428c      	cmp	r4, r1
 8004978:	d107      	bne.n	800498a <_vfiscanf_r+0x2e>
 800497a:	686c      	ldr	r4, [r5, #4]
 800497c:	4621      	mov	r1, r4
 800497e:	4628      	mov	r0, r5
 8004980:	b003      	add	sp, #12
 8004982:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004986:	f7ff be43 	b.w	8004610 <__svfiscanf_r>
 800498a:	4906      	ldr	r1, [pc, #24]	; (80049a4 <_vfiscanf_r+0x48>)
 800498c:	428c      	cmp	r4, r1
 800498e:	d101      	bne.n	8004994 <_vfiscanf_r+0x38>
 8004990:	68ac      	ldr	r4, [r5, #8]
 8004992:	e7f3      	b.n	800497c <_vfiscanf_r+0x20>
 8004994:	4904      	ldr	r1, [pc, #16]	; (80049a8 <_vfiscanf_r+0x4c>)
 8004996:	428c      	cmp	r4, r1
 8004998:	bf08      	it	eq
 800499a:	68ec      	ldreq	r4, [r5, #12]
 800499c:	e7ee      	b.n	800497c <_vfiscanf_r+0x20>
 800499e:	bf00      	nop
 80049a0:	08005f84 	.word	0x08005f84
 80049a4:	08005fa4 	.word	0x08005fa4
 80049a8:	08005f64 	.word	0x08005f64

080049ac <_scanf_chars>:
 80049ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b0:	4615      	mov	r5, r2
 80049b2:	688a      	ldr	r2, [r1, #8]
 80049b4:	4680      	mov	r8, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	b932      	cbnz	r2, 80049c8 <_scanf_chars+0x1c>
 80049ba:	698a      	ldr	r2, [r1, #24]
 80049bc:	2a00      	cmp	r2, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2201      	moveq	r2, #1
 80049c2:	f04f 32ff 	movne.w	r2, #4294967295
 80049c6:	608a      	str	r2, [r1, #8]
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004a5c <_scanf_chars+0xb0>
 80049ce:	06d1      	lsls	r1, r2, #27
 80049d0:	bf5f      	itttt	pl
 80049d2:	681a      	ldrpl	r2, [r3, #0]
 80049d4:	1d11      	addpl	r1, r2, #4
 80049d6:	6019      	strpl	r1, [r3, #0]
 80049d8:	6816      	ldrpl	r6, [r2, #0]
 80049da:	2700      	movs	r7, #0
 80049dc:	69a0      	ldr	r0, [r4, #24]
 80049de:	b188      	cbz	r0, 8004a04 <_scanf_chars+0x58>
 80049e0:	2801      	cmp	r0, #1
 80049e2:	d107      	bne.n	80049f4 <_scanf_chars+0x48>
 80049e4:	682a      	ldr	r2, [r5, #0]
 80049e6:	7811      	ldrb	r1, [r2, #0]
 80049e8:	6962      	ldr	r2, [r4, #20]
 80049ea:	5c52      	ldrb	r2, [r2, r1]
 80049ec:	b952      	cbnz	r2, 8004a04 <_scanf_chars+0x58>
 80049ee:	2f00      	cmp	r7, #0
 80049f0:	d031      	beq.n	8004a56 <_scanf_chars+0xaa>
 80049f2:	e022      	b.n	8004a3a <_scanf_chars+0x8e>
 80049f4:	2802      	cmp	r0, #2
 80049f6:	d120      	bne.n	8004a3a <_scanf_chars+0x8e>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004a00:	071b      	lsls	r3, r3, #28
 8004a02:	d41a      	bmi.n	8004a3a <_scanf_chars+0x8e>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	06da      	lsls	r2, r3, #27
 8004a08:	bf5e      	ittt	pl
 8004a0a:	682b      	ldrpl	r3, [r5, #0]
 8004a0c:	781b      	ldrbpl	r3, [r3, #0]
 8004a0e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004a12:	682a      	ldr	r2, [r5, #0]
 8004a14:	686b      	ldr	r3, [r5, #4]
 8004a16:	3201      	adds	r2, #1
 8004a18:	602a      	str	r2, [r5, #0]
 8004a1a:	68a2      	ldr	r2, [r4, #8]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	3a01      	subs	r2, #1
 8004a20:	606b      	str	r3, [r5, #4]
 8004a22:	3701      	adds	r7, #1
 8004a24:	60a2      	str	r2, [r4, #8]
 8004a26:	b142      	cbz	r2, 8004a3a <_scanf_chars+0x8e>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dcd7      	bgt.n	80049dc <_scanf_chars+0x30>
 8004a2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a30:	4629      	mov	r1, r5
 8004a32:	4640      	mov	r0, r8
 8004a34:	4798      	blx	r3
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d0d0      	beq.n	80049dc <_scanf_chars+0x30>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	f013 0310 	ands.w	r3, r3, #16
 8004a40:	d105      	bne.n	8004a4e <_scanf_chars+0xa2>
 8004a42:	68e2      	ldr	r2, [r4, #12]
 8004a44:	3201      	adds	r2, #1
 8004a46:	60e2      	str	r2, [r4, #12]
 8004a48:	69a2      	ldr	r2, [r4, #24]
 8004a4a:	b102      	cbz	r2, 8004a4e <_scanf_chars+0xa2>
 8004a4c:	7033      	strb	r3, [r6, #0]
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	443b      	add	r3, r7
 8004a52:	6123      	str	r3, [r4, #16]
 8004a54:	2000      	movs	r0, #0
 8004a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a5a:	bf00      	nop
 8004a5c:	08005e61 	.word	0x08005e61

08004a60 <_scanf_i>:
 8004a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	4698      	mov	r8, r3
 8004a66:	4b76      	ldr	r3, [pc, #472]	; (8004c40 <_scanf_i+0x1e0>)
 8004a68:	460c      	mov	r4, r1
 8004a6a:	4682      	mov	sl, r0
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a72:	b087      	sub	sp, #28
 8004a74:	ab03      	add	r3, sp, #12
 8004a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004a7a:	4b72      	ldr	r3, [pc, #456]	; (8004c44 <_scanf_i+0x1e4>)
 8004a7c:	69a1      	ldr	r1, [r4, #24]
 8004a7e:	4a72      	ldr	r2, [pc, #456]	; (8004c48 <_scanf_i+0x1e8>)
 8004a80:	2903      	cmp	r1, #3
 8004a82:	bf18      	it	ne
 8004a84:	461a      	movne	r2, r3
 8004a86:	68a3      	ldr	r3, [r4, #8]
 8004a88:	9201      	str	r2, [sp, #4]
 8004a8a:	1e5a      	subs	r2, r3, #1
 8004a8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004a90:	bf88      	it	hi
 8004a92:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004a96:	4627      	mov	r7, r4
 8004a98:	bf82      	ittt	hi
 8004a9a:	eb03 0905 	addhi.w	r9, r3, r5
 8004a9e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004aa2:	60a3      	strhi	r3, [r4, #8]
 8004aa4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004aa8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004aac:	bf98      	it	ls
 8004aae:	f04f 0900 	movls.w	r9, #0
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	463d      	mov	r5, r7
 8004ab6:	f04f 0b00 	mov.w	fp, #0
 8004aba:	6831      	ldr	r1, [r6, #0]
 8004abc:	ab03      	add	r3, sp, #12
 8004abe:	7809      	ldrb	r1, [r1, #0]
 8004ac0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f7fb fbbb 	bl	8000240 <memchr>
 8004aca:	b328      	cbz	r0, 8004b18 <_scanf_i+0xb8>
 8004acc:	f1bb 0f01 	cmp.w	fp, #1
 8004ad0:	d159      	bne.n	8004b86 <_scanf_i+0x126>
 8004ad2:	6862      	ldr	r2, [r4, #4]
 8004ad4:	b92a      	cbnz	r2, 8004ae2 <_scanf_i+0x82>
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	2308      	movs	r3, #8
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	6063      	str	r3, [r4, #4]
 8004ae0:	6022      	str	r2, [r4, #0]
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004ae8:	6022      	str	r2, [r4, #0]
 8004aea:	68a2      	ldr	r2, [r4, #8]
 8004aec:	1e51      	subs	r1, r2, #1
 8004aee:	60a1      	str	r1, [r4, #8]
 8004af0:	b192      	cbz	r2, 8004b18 <_scanf_i+0xb8>
 8004af2:	6832      	ldr	r2, [r6, #0]
 8004af4:	1c51      	adds	r1, r2, #1
 8004af6:	6031      	str	r1, [r6, #0]
 8004af8:	7812      	ldrb	r2, [r2, #0]
 8004afa:	f805 2b01 	strb.w	r2, [r5], #1
 8004afe:	6872      	ldr	r2, [r6, #4]
 8004b00:	3a01      	subs	r2, #1
 8004b02:	2a00      	cmp	r2, #0
 8004b04:	6072      	str	r2, [r6, #4]
 8004b06:	dc07      	bgt.n	8004b18 <_scanf_i+0xb8>
 8004b08:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004b0c:	4631      	mov	r1, r6
 8004b0e:	4650      	mov	r0, sl
 8004b10:	4790      	blx	r2
 8004b12:	2800      	cmp	r0, #0
 8004b14:	f040 8085 	bne.w	8004c22 <_scanf_i+0x1c2>
 8004b18:	f10b 0b01 	add.w	fp, fp, #1
 8004b1c:	f1bb 0f03 	cmp.w	fp, #3
 8004b20:	d1cb      	bne.n	8004aba <_scanf_i+0x5a>
 8004b22:	6863      	ldr	r3, [r4, #4]
 8004b24:	b90b      	cbnz	r3, 8004b2a <_scanf_i+0xca>
 8004b26:	230a      	movs	r3, #10
 8004b28:	6063      	str	r3, [r4, #4]
 8004b2a:	6863      	ldr	r3, [r4, #4]
 8004b2c:	4947      	ldr	r1, [pc, #284]	; (8004c4c <_scanf_i+0x1ec>)
 8004b2e:	6960      	ldr	r0, [r4, #20]
 8004b30:	1ac9      	subs	r1, r1, r3
 8004b32:	f000 f931 	bl	8004d98 <__sccl>
 8004b36:	f04f 0b00 	mov.w	fp, #0
 8004b3a:	68a3      	ldr	r3, [r4, #8]
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03d      	beq.n	8004bbe <_scanf_i+0x15e>
 8004b42:	6831      	ldr	r1, [r6, #0]
 8004b44:	6960      	ldr	r0, [r4, #20]
 8004b46:	f891 c000 	ldrb.w	ip, [r1]
 8004b4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d035      	beq.n	8004bbe <_scanf_i+0x15e>
 8004b52:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004b56:	d124      	bne.n	8004ba2 <_scanf_i+0x142>
 8004b58:	0510      	lsls	r0, r2, #20
 8004b5a:	d522      	bpl.n	8004ba2 <_scanf_i+0x142>
 8004b5c:	f10b 0b01 	add.w	fp, fp, #1
 8004b60:	f1b9 0f00 	cmp.w	r9, #0
 8004b64:	d003      	beq.n	8004b6e <_scanf_i+0x10e>
 8004b66:	3301      	adds	r3, #1
 8004b68:	f109 39ff 	add.w	r9, r9, #4294967295
 8004b6c:	60a3      	str	r3, [r4, #8]
 8004b6e:	6873      	ldr	r3, [r6, #4]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	6073      	str	r3, [r6, #4]
 8004b76:	dd1b      	ble.n	8004bb0 <_scanf_i+0x150>
 8004b78:	6833      	ldr	r3, [r6, #0]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	e7d9      	b.n	8004b3a <_scanf_i+0xda>
 8004b86:	f1bb 0f02 	cmp.w	fp, #2
 8004b8a:	d1ae      	bne.n	8004aea <_scanf_i+0x8a>
 8004b8c:	6822      	ldr	r2, [r4, #0]
 8004b8e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004b92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004b96:	d1bf      	bne.n	8004b18 <_scanf_i+0xb8>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	6063      	str	r3, [r4, #4]
 8004b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba0:	e7a2      	b.n	8004ae8 <_scanf_i+0x88>
 8004ba2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004ba6:	6022      	str	r2, [r4, #0]
 8004ba8:	780b      	ldrb	r3, [r1, #0]
 8004baa:	f805 3b01 	strb.w	r3, [r5], #1
 8004bae:	e7de      	b.n	8004b6e <_scanf_i+0x10e>
 8004bb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	4650      	mov	r0, sl
 8004bb8:	4798      	blx	r3
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d0df      	beq.n	8004b7e <_scanf_i+0x11e>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	05db      	lsls	r3, r3, #23
 8004bc2:	d50d      	bpl.n	8004be0 <_scanf_i+0x180>
 8004bc4:	42bd      	cmp	r5, r7
 8004bc6:	d909      	bls.n	8004bdc <_scanf_i+0x17c>
 8004bc8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004bcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	4650      	mov	r0, sl
 8004bd4:	4798      	blx	r3
 8004bd6:	f105 39ff 	add.w	r9, r5, #4294967295
 8004bda:	464d      	mov	r5, r9
 8004bdc:	42bd      	cmp	r5, r7
 8004bde:	d02d      	beq.n	8004c3c <_scanf_i+0x1dc>
 8004be0:	6822      	ldr	r2, [r4, #0]
 8004be2:	f012 0210 	ands.w	r2, r2, #16
 8004be6:	d113      	bne.n	8004c10 <_scanf_i+0x1b0>
 8004be8:	702a      	strb	r2, [r5, #0]
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	9e01      	ldr	r6, [sp, #4]
 8004bee:	4639      	mov	r1, r7
 8004bf0:	4650      	mov	r0, sl
 8004bf2:	47b0      	blx	r6
 8004bf4:	6821      	ldr	r1, [r4, #0]
 8004bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bfa:	f011 0f20 	tst.w	r1, #32
 8004bfe:	d013      	beq.n	8004c28 <_scanf_i+0x1c8>
 8004c00:	1d1a      	adds	r2, r3, #4
 8004c02:	f8c8 2000 	str.w	r2, [r8]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6018      	str	r0, [r3, #0]
 8004c0a:	68e3      	ldr	r3, [r4, #12]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60e3      	str	r3, [r4, #12]
 8004c10:	1bed      	subs	r5, r5, r7
 8004c12:	44ab      	add	fp, r5
 8004c14:	6925      	ldr	r5, [r4, #16]
 8004c16:	445d      	add	r5, fp
 8004c18:	6125      	str	r5, [r4, #16]
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	b007      	add	sp, #28
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	f04f 0b00 	mov.w	fp, #0
 8004c26:	e7ca      	b.n	8004bbe <_scanf_i+0x15e>
 8004c28:	1d1a      	adds	r2, r3, #4
 8004c2a:	f8c8 2000 	str.w	r2, [r8]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f011 0f01 	tst.w	r1, #1
 8004c34:	bf14      	ite	ne
 8004c36:	8018      	strhne	r0, [r3, #0]
 8004c38:	6018      	streq	r0, [r3, #0]
 8004c3a:	e7e6      	b.n	8004c0a <_scanf_i+0x1aa>
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	e7ed      	b.n	8004c1c <_scanf_i+0x1bc>
 8004c40:	08005e38 	.word	0x08005e38
 8004c44:	08004f75 	.word	0x08004f75
 8004c48:	08003831 	.word	0x08003831
 8004c4c:	08006010 	.word	0x08006010

08004c50 <lflush>:
 8004c50:	8983      	ldrh	r3, [r0, #12]
 8004c52:	f003 0309 	and.w	r3, r3, #9
 8004c56:	2b09      	cmp	r3, #9
 8004c58:	d101      	bne.n	8004c5e <lflush+0xe>
 8004c5a:	f7fe bf77 	b.w	8003b4c <fflush>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	4770      	bx	lr
	...

08004c64 <__srefill_r>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	460c      	mov	r4, r1
 8004c68:	4605      	mov	r5, r0
 8004c6a:	b118      	cbz	r0, 8004c74 <__srefill_r+0x10>
 8004c6c:	6983      	ldr	r3, [r0, #24]
 8004c6e:	b90b      	cbnz	r3, 8004c74 <__srefill_r+0x10>
 8004c70:	f7fe ffd6 	bl	8003c20 <__sinit>
 8004c74:	4b3b      	ldr	r3, [pc, #236]	; (8004d64 <__srefill_r+0x100>)
 8004c76:	429c      	cmp	r4, r3
 8004c78:	d10a      	bne.n	8004c90 <__srefill_r+0x2c>
 8004c7a:	686c      	ldr	r4, [r5, #4]
 8004c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c80:	2300      	movs	r3, #0
 8004c82:	6063      	str	r3, [r4, #4]
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	069e      	lsls	r6, r3, #26
 8004c88:	d50c      	bpl.n	8004ca4 <__srefill_r+0x40>
 8004c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8e:	e066      	b.n	8004d5e <__srefill_r+0xfa>
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <__srefill_r+0x104>)
 8004c92:	429c      	cmp	r4, r3
 8004c94:	d101      	bne.n	8004c9a <__srefill_r+0x36>
 8004c96:	68ac      	ldr	r4, [r5, #8]
 8004c98:	e7f0      	b.n	8004c7c <__srefill_r+0x18>
 8004c9a:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <__srefill_r+0x108>)
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	bf08      	it	eq
 8004ca0:	68ec      	ldreq	r4, [r5, #12]
 8004ca2:	e7eb      	b.n	8004c7c <__srefill_r+0x18>
 8004ca4:	0758      	lsls	r0, r3, #29
 8004ca6:	d448      	bmi.n	8004d3a <__srefill_r+0xd6>
 8004ca8:	06d9      	lsls	r1, r3, #27
 8004caa:	d405      	bmi.n	8004cb8 <__srefill_r+0x54>
 8004cac:	2309      	movs	r3, #9
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cb4:	81a3      	strh	r3, [r4, #12]
 8004cb6:	e7e8      	b.n	8004c8a <__srefill_r+0x26>
 8004cb8:	071a      	lsls	r2, r3, #28
 8004cba:	d50b      	bpl.n	8004cd4 <__srefill_r+0x70>
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7fe ff08 	bl	8003ad4 <_fflush_r>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d1e0      	bne.n	8004c8a <__srefill_r+0x26>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	60a0      	str	r0, [r4, #8]
 8004ccc:	f023 0308 	bic.w	r3, r3, #8
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	61a0      	str	r0, [r4, #24]
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	b91b      	cbnz	r3, 8004ce8 <__srefill_r+0x84>
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f7ff f87e 	bl	8003de4 <__smakebuf_r>
 8004ce8:	89a6      	ldrh	r6, [r4, #12]
 8004cea:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004cee:	07b3      	lsls	r3, r6, #30
 8004cf0:	d00f      	beq.n	8004d12 <__srefill_r+0xae>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <__srefill_r+0x10c>)
 8004cf8:	491e      	ldr	r1, [pc, #120]	; (8004d74 <__srefill_r+0x110>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	f006 0609 	and.w	r6, r6, #9
 8004d00:	f7ff f80c 	bl	8003d1c <_fwalk>
 8004d04:	2e09      	cmp	r6, #9
 8004d06:	81a7      	strh	r7, [r4, #12]
 8004d08:	d103      	bne.n	8004d12 <__srefill_r+0xae>
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f7fe fe5b 	bl	80039c8 <__sflush_r>
 8004d12:	6922      	ldr	r2, [r4, #16]
 8004d14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d16:	6963      	ldr	r3, [r4, #20]
 8004d18:	6a21      	ldr	r1, [r4, #32]
 8004d1a:	6022      	str	r2, [r4, #0]
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b0      	blx	r6
 8004d20:	2800      	cmp	r0, #0
 8004d22:	6060      	str	r0, [r4, #4]
 8004d24:	dc1c      	bgt.n	8004d60 <__srefill_r+0xfc>
 8004d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2a:	bf17      	itett	ne
 8004d2c:	2200      	movne	r2, #0
 8004d2e:	f043 0320 	orreq.w	r3, r3, #32
 8004d32:	6062      	strne	r2, [r4, #4]
 8004d34:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004d38:	e7bc      	b.n	8004cb4 <__srefill_r+0x50>
 8004d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	d0cd      	beq.n	8004cdc <__srefill_r+0x78>
 8004d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d002      	beq.n	8004d4e <__srefill_r+0xea>
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f7ff f893 	bl	8003e74 <_free_r>
 8004d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d50:	6063      	str	r3, [r4, #4]
 8004d52:	2000      	movs	r0, #0
 8004d54:	6360      	str	r0, [r4, #52]	; 0x34
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0c0      	beq.n	8004cdc <__srefill_r+0x78>
 8004d5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d60:	2000      	movs	r0, #0
 8004d62:	e7fc      	b.n	8004d5e <__srefill_r+0xfa>
 8004d64:	08005f84 	.word	0x08005f84
 8004d68:	08005fa4 	.word	0x08005fa4
 8004d6c:	08005f64 	.word	0x08005f64
 8004d70:	08005e5c 	.word	0x08005e5c
 8004d74:	08004c51 	.word	0x08004c51

08004d78 <_sbrk_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4d06      	ldr	r5, [pc, #24]	; (8004d94 <_sbrk_r+0x1c>)
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	f7fc f90c 	bl	8000fa0 <_sbrk>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_sbrk_r+0x1a>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_sbrk_r+0x1a>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	2000012c 	.word	0x2000012c

08004d98 <__sccl>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	780b      	ldrb	r3, [r1, #0]
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	2b5e      	cmp	r3, #94	; 0x5e
 8004da0:	bf0b      	itete	eq
 8004da2:	784b      	ldrbeq	r3, [r1, #1]
 8004da4:	1c48      	addne	r0, r1, #1
 8004da6:	1c88      	addeq	r0, r1, #2
 8004da8:	2200      	movne	r2, #0
 8004daa:	bf08      	it	eq
 8004dac:	2201      	moveq	r2, #1
 8004dae:	1e61      	subs	r1, r4, #1
 8004db0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004db4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004db8:	42a9      	cmp	r1, r5
 8004dba:	d1fb      	bne.n	8004db4 <__sccl+0x1c>
 8004dbc:	b90b      	cbnz	r3, 8004dc2 <__sccl+0x2a>
 8004dbe:	3801      	subs	r0, #1
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	f082 0201 	eor.w	r2, r2, #1
 8004dc6:	54e2      	strb	r2, [r4, r3]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004dd0:	292d      	cmp	r1, #45	; 0x2d
 8004dd2:	d006      	beq.n	8004de2 <__sccl+0x4a>
 8004dd4:	295d      	cmp	r1, #93	; 0x5d
 8004dd6:	d0f3      	beq.n	8004dc0 <__sccl+0x28>
 8004dd8:	b909      	cbnz	r1, 8004dde <__sccl+0x46>
 8004dda:	4628      	mov	r0, r5
 8004ddc:	e7f0      	b.n	8004dc0 <__sccl+0x28>
 8004dde:	460b      	mov	r3, r1
 8004de0:	e7f1      	b.n	8004dc6 <__sccl+0x2e>
 8004de2:	786e      	ldrb	r6, [r5, #1]
 8004de4:	2e5d      	cmp	r6, #93	; 0x5d
 8004de6:	d0fa      	beq.n	8004dde <__sccl+0x46>
 8004de8:	42b3      	cmp	r3, r6
 8004dea:	dcf8      	bgt.n	8004dde <__sccl+0x46>
 8004dec:	3502      	adds	r5, #2
 8004dee:	4619      	mov	r1, r3
 8004df0:	3101      	adds	r1, #1
 8004df2:	428e      	cmp	r6, r1
 8004df4:	5462      	strb	r2, [r4, r1]
 8004df6:	dcfb      	bgt.n	8004df0 <__sccl+0x58>
 8004df8:	1af1      	subs	r1, r6, r3
 8004dfa:	3901      	subs	r1, #1
 8004dfc:	1c58      	adds	r0, r3, #1
 8004dfe:	42b3      	cmp	r3, r6
 8004e00:	bfa8      	it	ge
 8004e02:	2100      	movge	r1, #0
 8004e04:	1843      	adds	r3, r0, r1
 8004e06:	e7e0      	b.n	8004dca <__sccl+0x32>

08004e08 <__sread>:
 8004e08:	b510      	push	{r4, lr}
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e10:	f000 fa24 	bl	800525c <_read_r>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	bfab      	itete	ge
 8004e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e1c:	181b      	addge	r3, r3, r0
 8004e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e22:	bfac      	ite	ge
 8004e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e26:	81a3      	strhlt	r3, [r4, #12]
 8004e28:	bd10      	pop	{r4, pc}

08004e2a <__swrite>:
 8004e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2e:	461f      	mov	r7, r3
 8004e30:	898b      	ldrh	r3, [r1, #12]
 8004e32:	05db      	lsls	r3, r3, #23
 8004e34:	4605      	mov	r5, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	4616      	mov	r6, r2
 8004e3a:	d505      	bpl.n	8004e48 <__swrite+0x1e>
 8004e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e40:	2302      	movs	r3, #2
 8004e42:	2200      	movs	r2, #0
 8004e44:	f000 f9ae 	bl	80051a4 <_lseek_r>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	4632      	mov	r2, r6
 8004e56:	463b      	mov	r3, r7
 8004e58:	4628      	mov	r0, r5
 8004e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5e:	f000 b95d 	b.w	800511c <_write_r>

08004e62 <__sseek>:
 8004e62:	b510      	push	{r4, lr}
 8004e64:	460c      	mov	r4, r1
 8004e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6a:	f000 f99b 	bl	80051a4 <_lseek_r>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	bf15      	itete	ne
 8004e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e7e:	81a3      	strheq	r3, [r4, #12]
 8004e80:	bf18      	it	ne
 8004e82:	81a3      	strhne	r3, [r4, #12]
 8004e84:	bd10      	pop	{r4, pc}

08004e86 <__sclose>:
 8004e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8a:	f000 b959 	b.w	8005140 <_close_r>
	...

08004e90 <_strtoul_l.constprop.0>:
 8004e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e94:	4f36      	ldr	r7, [pc, #216]	; (8004f70 <_strtoul_l.constprop.0+0xe0>)
 8004e96:	4686      	mov	lr, r0
 8004e98:	460d      	mov	r5, r1
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ea0:	5de6      	ldrb	r6, [r4, r7]
 8004ea2:	f016 0608 	ands.w	r6, r6, #8
 8004ea6:	d1f8      	bne.n	8004e9a <_strtoul_l.constprop.0+0xa>
 8004ea8:	2c2d      	cmp	r4, #45	; 0x2d
 8004eaa:	d12f      	bne.n	8004f0c <_strtoul_l.constprop.0+0x7c>
 8004eac:	782c      	ldrb	r4, [r5, #0]
 8004eae:	2601      	movs	r6, #1
 8004eb0:	1c85      	adds	r5, r0, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d057      	beq.n	8004f66 <_strtoul_l.constprop.0+0xd6>
 8004eb6:	2b10      	cmp	r3, #16
 8004eb8:	d109      	bne.n	8004ece <_strtoul_l.constprop.0+0x3e>
 8004eba:	2c30      	cmp	r4, #48	; 0x30
 8004ebc:	d107      	bne.n	8004ece <_strtoul_l.constprop.0+0x3e>
 8004ebe:	7828      	ldrb	r0, [r5, #0]
 8004ec0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004ec4:	2858      	cmp	r0, #88	; 0x58
 8004ec6:	d149      	bne.n	8004f5c <_strtoul_l.constprop.0+0xcc>
 8004ec8:	786c      	ldrb	r4, [r5, #1]
 8004eca:	2310      	movs	r3, #16
 8004ecc:	3502      	adds	r5, #2
 8004ece:	f04f 38ff 	mov.w	r8, #4294967295
 8004ed2:	2700      	movs	r7, #0
 8004ed4:	fbb8 f8f3 	udiv	r8, r8, r3
 8004ed8:	fb03 f908 	mul.w	r9, r3, r8
 8004edc:	ea6f 0909 	mvn.w	r9, r9
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004ee6:	f1bc 0f09 	cmp.w	ip, #9
 8004eea:	d814      	bhi.n	8004f16 <_strtoul_l.constprop.0+0x86>
 8004eec:	4664      	mov	r4, ip
 8004eee:	42a3      	cmp	r3, r4
 8004ef0:	dd22      	ble.n	8004f38 <_strtoul_l.constprop.0+0xa8>
 8004ef2:	2f00      	cmp	r7, #0
 8004ef4:	db1d      	blt.n	8004f32 <_strtoul_l.constprop.0+0xa2>
 8004ef6:	4580      	cmp	r8, r0
 8004ef8:	d31b      	bcc.n	8004f32 <_strtoul_l.constprop.0+0xa2>
 8004efa:	d101      	bne.n	8004f00 <_strtoul_l.constprop.0+0x70>
 8004efc:	45a1      	cmp	r9, r4
 8004efe:	db18      	blt.n	8004f32 <_strtoul_l.constprop.0+0xa2>
 8004f00:	fb00 4003 	mla	r0, r0, r3, r4
 8004f04:	2701      	movs	r7, #1
 8004f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f0a:	e7ea      	b.n	8004ee2 <_strtoul_l.constprop.0+0x52>
 8004f0c:	2c2b      	cmp	r4, #43	; 0x2b
 8004f0e:	bf04      	itt	eq
 8004f10:	782c      	ldrbeq	r4, [r5, #0]
 8004f12:	1c85      	addeq	r5, r0, #2
 8004f14:	e7cd      	b.n	8004eb2 <_strtoul_l.constprop.0+0x22>
 8004f16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004f1a:	f1bc 0f19 	cmp.w	ip, #25
 8004f1e:	d801      	bhi.n	8004f24 <_strtoul_l.constprop.0+0x94>
 8004f20:	3c37      	subs	r4, #55	; 0x37
 8004f22:	e7e4      	b.n	8004eee <_strtoul_l.constprop.0+0x5e>
 8004f24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004f28:	f1bc 0f19 	cmp.w	ip, #25
 8004f2c:	d804      	bhi.n	8004f38 <_strtoul_l.constprop.0+0xa8>
 8004f2e:	3c57      	subs	r4, #87	; 0x57
 8004f30:	e7dd      	b.n	8004eee <_strtoul_l.constprop.0+0x5e>
 8004f32:	f04f 37ff 	mov.w	r7, #4294967295
 8004f36:	e7e6      	b.n	8004f06 <_strtoul_l.constprop.0+0x76>
 8004f38:	2f00      	cmp	r7, #0
 8004f3a:	da07      	bge.n	8004f4c <_strtoul_l.constprop.0+0xbc>
 8004f3c:	2322      	movs	r3, #34	; 0x22
 8004f3e:	f8ce 3000 	str.w	r3, [lr]
 8004f42:	f04f 30ff 	mov.w	r0, #4294967295
 8004f46:	b932      	cbnz	r2, 8004f56 <_strtoul_l.constprop.0+0xc6>
 8004f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f4c:	b106      	cbz	r6, 8004f50 <_strtoul_l.constprop.0+0xc0>
 8004f4e:	4240      	negs	r0, r0
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	d0f9      	beq.n	8004f48 <_strtoul_l.constprop.0+0xb8>
 8004f54:	b107      	cbz	r7, 8004f58 <_strtoul_l.constprop.0+0xc8>
 8004f56:	1e69      	subs	r1, r5, #1
 8004f58:	6011      	str	r1, [r2, #0]
 8004f5a:	e7f5      	b.n	8004f48 <_strtoul_l.constprop.0+0xb8>
 8004f5c:	2430      	movs	r4, #48	; 0x30
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1b5      	bne.n	8004ece <_strtoul_l.constprop.0+0x3e>
 8004f62:	2308      	movs	r3, #8
 8004f64:	e7b3      	b.n	8004ece <_strtoul_l.constprop.0+0x3e>
 8004f66:	2c30      	cmp	r4, #48	; 0x30
 8004f68:	d0a9      	beq.n	8004ebe <_strtoul_l.constprop.0+0x2e>
 8004f6a:	230a      	movs	r3, #10
 8004f6c:	e7af      	b.n	8004ece <_strtoul_l.constprop.0+0x3e>
 8004f6e:	bf00      	nop
 8004f70:	08005e61 	.word	0x08005e61

08004f74 <_strtoul_r>:
 8004f74:	f7ff bf8c 	b.w	8004e90 <_strtoul_l.constprop.0>

08004f78 <__submore>:
 8004f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f84:	4299      	cmp	r1, r3
 8004f86:	d11d      	bne.n	8004fc4 <__submore+0x4c>
 8004f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f8c:	f7fe ffde 	bl	8003f4c <_malloc_r>
 8004f90:	b918      	cbnz	r0, 8004f9a <__submore+0x22>
 8004f92:	f04f 30ff 	mov.w	r0, #4294967295
 8004f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fa0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004fa4:	6360      	str	r0, [r4, #52]	; 0x34
 8004fa6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004faa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004fae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004fb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004fb6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004fba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004fbe:	6020      	str	r0, [r4, #0]
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	e7e8      	b.n	8004f96 <__submore+0x1e>
 8004fc4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004fc6:	0077      	lsls	r7, r6, #1
 8004fc8:	463a      	mov	r2, r7
 8004fca:	f000 f917 	bl	80051fc <_realloc_r>
 8004fce:	4605      	mov	r5, r0
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d0de      	beq.n	8004f92 <__submore+0x1a>
 8004fd4:	eb00 0806 	add.w	r8, r0, r6
 8004fd8:	4601      	mov	r1, r0
 8004fda:	4632      	mov	r2, r6
 8004fdc:	4640      	mov	r0, r8
 8004fde:	f000 f8f3 	bl	80051c8 <memcpy>
 8004fe2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004fe6:	f8c4 8000 	str.w	r8, [r4]
 8004fea:	e7e9      	b.n	8004fc0 <__submore+0x48>

08004fec <_ungetc_r>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4614      	mov	r4, r2
 8004ff0:	1c4a      	adds	r2, r1, #1
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	d103      	bne.n	8005000 <_ungetc_r+0x14>
 8004ff8:	f04f 35ff 	mov.w	r5, #4294967295
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	b118      	cbz	r0, 800500a <_ungetc_r+0x1e>
 8005002:	6983      	ldr	r3, [r0, #24]
 8005004:	b90b      	cbnz	r3, 800500a <_ungetc_r+0x1e>
 8005006:	f7fe fe0b 	bl	8003c20 <__sinit>
 800500a:	4b41      	ldr	r3, [pc, #260]	; (8005110 <_ungetc_r+0x124>)
 800500c:	429c      	cmp	r4, r3
 800500e:	d11d      	bne.n	800504c <_ungetc_r+0x60>
 8005010:	6874      	ldr	r4, [r6, #4]
 8005012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005014:	07db      	lsls	r3, r3, #31
 8005016:	d405      	bmi.n	8005024 <_ungetc_r+0x38>
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	0598      	lsls	r0, r3, #22
 800501c:	d402      	bmi.n	8005024 <_ungetc_r+0x38>
 800501e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005020:	f7fe feb9 	bl	8003d96 <__retarget_lock_acquire_recursive>
 8005024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005028:	f023 0320 	bic.w	r3, r3, #32
 800502c:	0759      	lsls	r1, r3, #29
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	b29a      	uxth	r2, r3
 8005032:	d42d      	bmi.n	8005090 <_ungetc_r+0xa4>
 8005034:	06d3      	lsls	r3, r2, #27
 8005036:	d413      	bmi.n	8005060 <_ungetc_r+0x74>
 8005038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800503a:	07dd      	lsls	r5, r3, #31
 800503c:	d4dc      	bmi.n	8004ff8 <_ungetc_r+0xc>
 800503e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005042:	d1d9      	bne.n	8004ff8 <_ungetc_r+0xc>
 8005044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005046:	f7fe fea7 	bl	8003d98 <__retarget_lock_release_recursive>
 800504a:	e7d5      	b.n	8004ff8 <_ungetc_r+0xc>
 800504c:	4b31      	ldr	r3, [pc, #196]	; (8005114 <_ungetc_r+0x128>)
 800504e:	429c      	cmp	r4, r3
 8005050:	d101      	bne.n	8005056 <_ungetc_r+0x6a>
 8005052:	68b4      	ldr	r4, [r6, #8]
 8005054:	e7dd      	b.n	8005012 <_ungetc_r+0x26>
 8005056:	4b30      	ldr	r3, [pc, #192]	; (8005118 <_ungetc_r+0x12c>)
 8005058:	429c      	cmp	r4, r3
 800505a:	bf08      	it	eq
 800505c:	68f4      	ldreq	r4, [r6, #12]
 800505e:	e7d8      	b.n	8005012 <_ungetc_r+0x26>
 8005060:	0710      	lsls	r0, r2, #28
 8005062:	d511      	bpl.n	8005088 <_ungetc_r+0x9c>
 8005064:	4621      	mov	r1, r4
 8005066:	4630      	mov	r0, r6
 8005068:	f7fe fd34 	bl	8003ad4 <_fflush_r>
 800506c:	b130      	cbz	r0, 800507c <_ungetc_r+0x90>
 800506e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005070:	07d9      	lsls	r1, r3, #31
 8005072:	d4c1      	bmi.n	8004ff8 <_ungetc_r+0xc>
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	f413 7f00 	tst.w	r3, #512	; 0x200
 800507a:	e7e2      	b.n	8005042 <_ungetc_r+0x56>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	60a0      	str	r0, [r4, #8]
 8005080:	f023 0308 	bic.w	r3, r3, #8
 8005084:	81a3      	strh	r3, [r4, #12]
 8005086:	61a0      	str	r0, [r4, #24]
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	f043 0304 	orr.w	r3, r3, #4
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	b2ed      	uxtb	r5, r5
 8005096:	b1d3      	cbz	r3, 80050ce <_ungetc_r+0xe2>
 8005098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800509a:	4293      	cmp	r3, r2
 800509c:	dc05      	bgt.n	80050aa <_ungetc_r+0xbe>
 800509e:	4621      	mov	r1, r4
 80050a0:	4630      	mov	r0, r6
 80050a2:	f7ff ff69 	bl	8004f78 <__submore>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d1e1      	bne.n	800506e <_ungetc_r+0x82>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	1e5a      	subs	r2, r3, #1
 80050ae:	6022      	str	r2, [r4, #0]
 80050b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80050b4:	6863      	ldr	r3, [r4, #4]
 80050b6:	3301      	adds	r3, #1
 80050b8:	6063      	str	r3, [r4, #4]
 80050ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050bc:	07da      	lsls	r2, r3, #31
 80050be:	d49d      	bmi.n	8004ffc <_ungetc_r+0x10>
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	059b      	lsls	r3, r3, #22
 80050c4:	d49a      	bmi.n	8004ffc <_ungetc_r+0x10>
 80050c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050c8:	f7fe fe66 	bl	8003d98 <__retarget_lock_release_recursive>
 80050cc:	e796      	b.n	8004ffc <_ungetc_r+0x10>
 80050ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80050d0:	6920      	ldr	r0, [r4, #16]
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	f001 0101 	and.w	r1, r1, #1
 80050d8:	b160      	cbz	r0, 80050f4 <_ungetc_r+0x108>
 80050da:	4298      	cmp	r0, r3
 80050dc:	d20a      	bcs.n	80050f4 <_ungetc_r+0x108>
 80050de:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80050e2:	42a8      	cmp	r0, r5
 80050e4:	d106      	bne.n	80050f4 <_ungetc_r+0x108>
 80050e6:	3b01      	subs	r3, #1
 80050e8:	3201      	adds	r2, #1
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	6062      	str	r2, [r4, #4]
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d184      	bne.n	8004ffc <_ungetc_r+0x10>
 80050f2:	e7e5      	b.n	80050c0 <_ungetc_r+0xd4>
 80050f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80050f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050fc:	6363      	str	r3, [r4, #52]	; 0x34
 80050fe:	2303      	movs	r3, #3
 8005100:	63a3      	str	r3, [r4, #56]	; 0x38
 8005102:	4623      	mov	r3, r4
 8005104:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	2301      	movs	r3, #1
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	e7ee      	b.n	80050ee <_ungetc_r+0x102>
 8005110:	08005f84 	.word	0x08005f84
 8005114:	08005fa4 	.word	0x08005fa4
 8005118:	08005f64 	.word	0x08005f64

0800511c <_write_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4d07      	ldr	r5, [pc, #28]	; (800513c <_write_r+0x20>)
 8005120:	4604      	mov	r4, r0
 8005122:	4608      	mov	r0, r1
 8005124:	4611      	mov	r1, r2
 8005126:	2200      	movs	r2, #0
 8005128:	602a      	str	r2, [r5, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	f7fb fdf2 	bl	8000d14 <_write>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d102      	bne.n	800513a <_write_r+0x1e>
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	b103      	cbz	r3, 800513a <_write_r+0x1e>
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	2000012c 	.word	0x2000012c

08005140 <_close_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d06      	ldr	r5, [pc, #24]	; (800515c <_close_r+0x1c>)
 8005144:	2300      	movs	r3, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	f7fb fe0e 	bl	8000d6c <_close>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_close_r+0x1a>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_close_r+0x1a>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	2000012c 	.word	0x2000012c

08005160 <_fstat_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4d07      	ldr	r5, [pc, #28]	; (8005180 <_fstat_r+0x20>)
 8005164:	2300      	movs	r3, #0
 8005166:	4604      	mov	r4, r0
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	602b      	str	r3, [r5, #0]
 800516e:	f7fb fe4d 	bl	8000e0c <_fstat>
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	d102      	bne.n	800517c <_fstat_r+0x1c>
 8005176:	682b      	ldr	r3, [r5, #0]
 8005178:	b103      	cbz	r3, 800517c <_fstat_r+0x1c>
 800517a:	6023      	str	r3, [r4, #0]
 800517c:	bd38      	pop	{r3, r4, r5, pc}
 800517e:	bf00      	nop
 8005180:	2000012c 	.word	0x2000012c

08005184 <_isatty_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4d06      	ldr	r5, [pc, #24]	; (80051a0 <_isatty_r+0x1c>)
 8005188:	2300      	movs	r3, #0
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	602b      	str	r3, [r5, #0]
 8005190:	f7fb fdaa 	bl	8000ce8 <_isatty>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_isatty_r+0x1a>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_isatty_r+0x1a>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	2000012c 	.word	0x2000012c

080051a4 <_lseek_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	4d07      	ldr	r5, [pc, #28]	; (80051c4 <_lseek_r+0x20>)
 80051a8:	4604      	mov	r4, r0
 80051aa:	4608      	mov	r0, r1
 80051ac:	4611      	mov	r1, r2
 80051ae:	2200      	movs	r2, #0
 80051b0:	602a      	str	r2, [r5, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f7fb fdf1 	bl	8000d9a <_lseek>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d102      	bne.n	80051c2 <_lseek_r+0x1e>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	b103      	cbz	r3, 80051c2 <_lseek_r+0x1e>
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	2000012c 	.word	0x2000012c

080051c8 <memcpy>:
 80051c8:	440a      	add	r2, r1
 80051ca:	4291      	cmp	r1, r2
 80051cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80051d0:	d100      	bne.n	80051d4 <memcpy+0xc>
 80051d2:	4770      	bx	lr
 80051d4:	b510      	push	{r4, lr}
 80051d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051de:	4291      	cmp	r1, r2
 80051e0:	d1f9      	bne.n	80051d6 <memcpy+0xe>
 80051e2:	bd10      	pop	{r4, pc}

080051e4 <__malloc_lock>:
 80051e4:	4801      	ldr	r0, [pc, #4]	; (80051ec <__malloc_lock+0x8>)
 80051e6:	f7fe bdd6 	b.w	8003d96 <__retarget_lock_acquire_recursive>
 80051ea:	bf00      	nop
 80051ec:	20000120 	.word	0x20000120

080051f0 <__malloc_unlock>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__malloc_unlock+0x8>)
 80051f2:	f7fe bdd1 	b.w	8003d98 <__retarget_lock_release_recursive>
 80051f6:	bf00      	nop
 80051f8:	20000120 	.word	0x20000120

080051fc <_realloc_r>:
 80051fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005200:	4680      	mov	r8, r0
 8005202:	4614      	mov	r4, r2
 8005204:	460e      	mov	r6, r1
 8005206:	b921      	cbnz	r1, 8005212 <_realloc_r+0x16>
 8005208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800520c:	4611      	mov	r1, r2
 800520e:	f7fe be9d 	b.w	8003f4c <_malloc_r>
 8005212:	b92a      	cbnz	r2, 8005220 <_realloc_r+0x24>
 8005214:	f7fe fe2e 	bl	8003e74 <_free_r>
 8005218:	4625      	mov	r5, r4
 800521a:	4628      	mov	r0, r5
 800521c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005220:	f000 f82e 	bl	8005280 <_malloc_usable_size_r>
 8005224:	4284      	cmp	r4, r0
 8005226:	4607      	mov	r7, r0
 8005228:	d802      	bhi.n	8005230 <_realloc_r+0x34>
 800522a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800522e:	d812      	bhi.n	8005256 <_realloc_r+0x5a>
 8005230:	4621      	mov	r1, r4
 8005232:	4640      	mov	r0, r8
 8005234:	f7fe fe8a 	bl	8003f4c <_malloc_r>
 8005238:	4605      	mov	r5, r0
 800523a:	2800      	cmp	r0, #0
 800523c:	d0ed      	beq.n	800521a <_realloc_r+0x1e>
 800523e:	42bc      	cmp	r4, r7
 8005240:	4622      	mov	r2, r4
 8005242:	4631      	mov	r1, r6
 8005244:	bf28      	it	cs
 8005246:	463a      	movcs	r2, r7
 8005248:	f7ff ffbe 	bl	80051c8 <memcpy>
 800524c:	4631      	mov	r1, r6
 800524e:	4640      	mov	r0, r8
 8005250:	f7fe fe10 	bl	8003e74 <_free_r>
 8005254:	e7e1      	b.n	800521a <_realloc_r+0x1e>
 8005256:	4635      	mov	r5, r6
 8005258:	e7df      	b.n	800521a <_realloc_r+0x1e>
	...

0800525c <_read_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4d07      	ldr	r5, [pc, #28]	; (800527c <_read_r+0x20>)
 8005260:	4604      	mov	r4, r0
 8005262:	4608      	mov	r0, r1
 8005264:	4611      	mov	r1, r2
 8005266:	2200      	movs	r2, #0
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f7fb fda6 	bl	8000dbc <_read>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_read_r+0x1e>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_read_r+0x1e>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	2000012c 	.word	0x2000012c

08005280 <_malloc_usable_size_r>:
 8005280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005284:	1f18      	subs	r0, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	bfbc      	itt	lt
 800528a:	580b      	ldrlt	r3, [r1, r0]
 800528c:	18c0      	addlt	r0, r0, r3
 800528e:	4770      	bx	lr

08005290 <_init>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr

0800529c <_fini>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr
